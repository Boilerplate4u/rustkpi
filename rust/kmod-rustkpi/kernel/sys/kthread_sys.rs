/* automatically generated by rust-bindgen */

pub const __GNUCLIKE_ASM: ::kernel::sys::raw::c_uint = 3;
pub const __GNUCLIKE___TYPEOF: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE___OFFSETOF: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE___SECTION: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: ::kernel::sys::raw::c_uint = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: ::kernel::sys::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS_INLINE: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE__: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS___FUNC__: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS_WARNING: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: ::kernel::sys::raw::c_uint = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: ::kernel::sys::raw::c_uint = 1;
pub const __POSIX_VISIBLE: ::kernel::sys::raw::c_uint = 200809;
pub const __XSI_VISIBLE: ::kernel::sys::raw::c_uint = 700;
pub const __BSD_VISIBLE: ::kernel::sys::raw::c_uint = 1;
pub const __ISO_C_VISIBLE: ::kernel::sys::raw::c_uint = 2011;
pub const __EXT1_VISIBLE: ::kernel::sys::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct kproc_desc {
    pub arg0: *const ::kernel::sys::raw::c_char,
    pub func: ::core::option::Option<unsafe extern "C" fn()>,
    pub global_procpp: *mut *mut proc_,
}
#[test]
fn bindgen_test_layout_kproc_desc() {
    assert_eq!(::core::mem::size_of::<kproc_desc>() , 24usize , concat ! (
               "Size of: " , stringify ! ( kproc_desc ) ));
    assert_eq! (::core::mem::align_of::<kproc_desc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( kproc_desc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kproc_desc ) ) . arg0 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( kproc_desc ) , "::" ,
                stringify ! ( arg0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kproc_desc ) ) . func as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( kproc_desc ) , "::" ,
                stringify ! ( func ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kproc_desc ) ) . global_procpp as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( kproc_desc ) , "::" ,
                stringify ! ( global_procpp ) ));
}
impl Clone for kproc_desc {
    fn clone(&self) -> Self { *self }
}
impl Default for kproc_desc {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct kthread_desc {
    pub arg0: *const ::kernel::sys::raw::c_char,
    pub func: ::core::option::Option<unsafe extern "C" fn()>,
    pub global_threadpp: *mut *mut thread,
}
#[test]
fn bindgen_test_layout_kthread_desc() {
    assert_eq!(::core::mem::size_of::<kthread_desc>() , 24usize , concat ! (
               "Size of: " , stringify ! ( kthread_desc ) ));
    assert_eq! (::core::mem::align_of::<kthread_desc>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( kthread_desc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kthread_desc ) ) . arg0 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( kthread_desc ) , "::" ,
                stringify ! ( arg0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kthread_desc ) ) . func as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( kthread_desc ) , "::" ,
                stringify ! ( func ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const kthread_desc ) ) . global_threadpp as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( kthread_desc ) , "::" ,
                stringify ! ( global_threadpp ) ));
}
impl Clone for kthread_desc {
    fn clone(&self) -> Self { *self }
}
impl Default for kthread_desc {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub fn kproc_create(arg1:
                            ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut ::kernel::sys::raw::c_void)>,
                        arg2: *mut ::kernel::sys::raw::c_void,
                        arg3: *mut *mut proc_,
                        flags: ::kernel::sys::raw::c_int,
                        pages: ::kernel::sys::raw::c_int,
                        arg4: *const ::kernel::sys::raw::c_char, ...)
     -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kproc_exit(arg1: ::kernel::sys::raw::c_int);
}
extern "C" {
    pub fn kproc_resume(arg1: *mut proc_) -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kproc_shutdown(arg1: *mut ::kernel::sys::raw::c_void,
                          arg2: ::kernel::sys::raw::c_int);
}
extern "C" {
    pub fn kproc_start(arg1: *const ::kernel::sys::raw::c_void);
}
extern "C" {
    pub fn kproc_suspend(arg1: *mut proc_, arg2: ::kernel::sys::raw::c_int)
     -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kproc_suspend_check(arg1: *mut proc_);
}
extern "C" {
    pub fn kproc_kthread_add(arg1:
                                 ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::kernel::sys::raw::c_void)>,
                             arg2: *mut ::kernel::sys::raw::c_void,
                             arg3: *mut *mut proc_, arg4: *mut *mut thread,
                             flags: ::kernel::sys::raw::c_int,
                             pages: ::kernel::sys::raw::c_int,
                             procname: *const ::kernel::sys::raw::c_char,
                             arg5: *const ::kernel::sys::raw::c_char, ...)
     -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kthread_add(arg1:
                           ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut ::kernel::sys::raw::c_void)>,
                       arg2: *mut ::kernel::sys::raw::c_void,
                       arg3: *mut proc_, arg4: *mut *mut thread,
                       flags: ::kernel::sys::raw::c_int,
                       pages: ::kernel::sys::raw::c_int,
                       arg5: *const ::kernel::sys::raw::c_char, ...)
     -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kthread_exit();
}
extern "C" {
    pub fn kthread_resume(arg1: *mut thread) -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kthread_shutdown(arg1: *mut ::kernel::sys::raw::c_void,
                            arg2: ::kernel::sys::raw::c_int);
}
extern "C" {
    pub fn kthread_start(arg1: *const ::kernel::sys::raw::c_void);
}
extern "C" {
    pub fn kthread_suspend(arg1: *mut thread, arg2: ::kernel::sys::raw::c_int)
     -> ::kernel::sys::raw::c_int;
}
extern "C" {
    pub fn kthread_suspend_check();
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct proc_ {
    pub _address: u8,
}
impl Clone for proc_ {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct thread {
    pub _address: u8,
}
impl Clone for thread {
    fn clone(&self) -> Self { *self }
}
