{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"core","disambiguator":[15875382702952996590,373199932749271557]},"crate_root":"libcore","external_crates":[],"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":5588,"line_start":11,"line_end":178,"column_start":1,"column_end":10}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192540,"byte_end":192545,"line_start":350,"line_end":350,"column_start":29,"column_end":34},"name":"isize","value":"","parent":{"krate":0,"index":356}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192694,"byte_end":192699,"line_start":356,"line_end":356,"column_start":29,"column_end":34},"name":"usize","value":"","parent":{"krate":0,"index":356}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198867,"byte_end":198873,"line_start":134,"line_end":134,"column_start":25,"column_end":31},"name":"decode","value":"","parent":{"krate":0,"index":384}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198875,"byte_end":198889,"line_start":134,"line_end":134,"column_start":33,"column_end":47},"name":"DecodableFloat","value":"","parent":{"krate":0,"index":384}},{"kind":"Use","ref_id":{"krate":0,"index":11358},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198891,"byte_end":198902,"line_start":134,"line_end":134,"column_start":49,"column_end":60},"name":"FullDecoded","value":"","parent":{"krate":0,"index":384}},{"kind":"Use","ref_id":{"krate":0,"index":11336},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198904,"byte_end":198911,"line_start":134,"line_end":134,"column_start":62,"column_end":69},"name":"Decoded","value":"","parent":{"krate":0,"index":384}},{"kind":"Use","ref_id":{"krate":0,"index":11602},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":327673,"byte_end":327676,"line_start":17,"line_end":17,"column_start":34,"column_end":37},"name":"Big","value":"","parent":{"krate":0,"index":656}},{"kind":"Use","ref_id":{"krate":0,"index":11534},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":171641,"byte_end":171656,"line_start":3337,"line_end":3337,"column_start":23,"column_end":38},"name":"ParseFloatError","value":"","parent":{"krate":0,"index":302}},{"kind":"Use","ref_id":{"krate":0,"index":1710},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372457,"byte_end":372461,"line_start":22,"line_end":22,"column_start":18,"column_end":22},"name":"Copy","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372463,"byte_end":372467,"line_start":22,"line_end":22,"column_start":24,"column_end":28},"name":"Send","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372469,"byte_end":372474,"line_start":22,"line_end":22,"column_start":30,"column_end":35},"name":"Sized","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1712},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372476,"byte_end":372480,"line_start":22,"line_end":22,"column_start":37,"column_end":41},"name":"Sync","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1950},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372568,"byte_end":372572,"line_start":25,"line_end":25,"column_start":15,"column_end":19},"name":"Drop","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1956},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372574,"byte_end":372576,"line_start":25,"line_end":25,"column_start":21,"column_end":23},"name":"Fn","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372578,"byte_end":372583,"line_start":25,"line_end":25,"column_start":25,"column_end":30},"name":"FnMut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372585,"byte_end":372591,"line_start":25,"line_end":25,"column_start":32,"column_end":38},"name":"FnOnce","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1262},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372704,"byte_end":372708,"line_start":30,"line_end":30,"column_start":14,"column_end":18},"name":"drop","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2446},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372829,"byte_end":372834,"line_start":35,"line_end":35,"column_start":16,"column_end":21},"name":"Clone","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372921,"byte_end":372930,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"name":"PartialEq","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2312},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372932,"byte_end":372942,"line_start":38,"line_end":38,"column_start":26,"column_end":36},"name":"PartialOrd","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2264},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372944,"byte_end":372946,"line_start":38,"line_end":38,"column_start":38,"column_end":40},"name":"Eq","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2294},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372948,"byte_end":372951,"line_start":38,"line_end":38,"column_start":42,"column_end":45},"name":"Ord","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2472},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373043,"byte_end":373048,"line_start":41,"line_end":41,"column_start":19,"column_end":24},"name":"AsRef","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2476},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373050,"byte_end":373055,"line_start":41,"line_end":41,"column_start":26,"column_end":31},"name":"AsMut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2480},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373057,"byte_end":373061,"line_start":41,"line_end":41,"column_start":33,"column_end":37},"name":"Into","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2484},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373063,"byte_end":373067,"line_start":41,"line_end":41,"column_start":39,"column_end":43},"name":"From","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2458},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373158,"byte_end":373165,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"name":"Default","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3414},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373253,"byte_end":373261,"line_start":47,"line_end":47,"column_start":16,"column_end":24},"name":"Iterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3774},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373263,"byte_end":373269,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"name":"Extend","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3758},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373271,"byte_end":373283,"line_start":47,"line_end":47,"column_start":34,"column_end":46},"name":"IntoIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373372,"byte_end":373391,"line_start":50,"line_end":50,"column_start":16,"column_end":35},"name":"DoubleEndedIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3792},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373393,"byte_end":373410,"line_start":50,"line_end":50,"column_start":37,"column_end":54},"name":"ExactSizeIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":35088},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373509,"byte_end":373513,"line_start":53,"line_end":53,"column_start":26,"column_end":30},"name":"self","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":24427},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373515,"byte_end":373519,"line_start":53,"line_end":53,"column_start":32,"column_end":36},"name":"Some","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":24425},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373521,"byte_end":373525,"line_start":53,"line_end":53,"column_start":38,"column_end":42},"name":"None","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":35202},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373624,"byte_end":373628,"line_start":56,"line_end":56,"column_start":26,"column_end":30},"name":"self","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":24495},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373630,"byte_end":373632,"line_start":56,"line_end":56,"column_start":32,"column_end":34},"name":"Ok","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":24499},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373634,"byte_end":373637,"line_start":56,"line_end":56,"column_start":36,"column_end":39},"name":"Err","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":5008},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373779,"byte_end":373787,"line_start":61,"line_end":61,"column_start":16,"column_end":24},"name":"SliceExt","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":6532},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373873,"byte_end":373879,"line_start":64,"line_end":64,"column_start":14,"column_end":20},"name":"StrExt","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3158},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":373966,"byte_end":373973,"line_start":67,"line_end":67,"column_start":15,"column_end":22},"name":"CharExt","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":376144,"byte_end":376157,"line_start":52,"line_end":52,"column_start":14,"column_end":27},"name":"drop_in_place","value":"","parent":{"krate":0,"index":1200}},{"kind":"Use","ref_id":{"krate":0,"index":605},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":442709,"byte_end":442718,"line_start":28,"line_end":28,"column_start":21,"column_end":30},"name":"transmute","value":"","parent":{"krate":0,"index":1208}},{"kind":"Use","ref_id":{"krate":0,"index":623},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":479860,"byte_end":479879,"line_start":31,"line_end":31,"column_start":21,"column_end":40},"name":"copy_nonoverlapping","value":"","parent":{"krate":0,"index":1386}},{"kind":"Use","ref_id":{"krate":0,"index":627},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":479948,"byte_end":479952,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"name":"copy","value":"","parent":{"krate":0,"index":1386}},{"kind":"Use","ref_id":{"krate":0,"index":631},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480021,"byte_end":480032,"line_start":37,"line_end":37,"column_start":21,"column_end":32},"name":"write_bytes","value":"","parent":{"krate":0,"index":1386}},{"kind":"Use","ref_id":{"krate":0,"index":1746},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593267,"byte_end":593270,"line_start":170,"line_end":170,"column_start":23,"column_end":26},"name":"Add","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1754},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593272,"byte_end":593275,"line_start":170,"line_end":170,"column_start":28,"column_end":31},"name":"Sub","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593277,"byte_end":593280,"line_start":170,"line_end":170,"column_start":33,"column_end":36},"name":"Mul","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1770},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593282,"byte_end":593285,"line_start":170,"line_end":170,"column_start":38,"column_end":41},"name":"Div","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593287,"byte_end":593290,"line_start":170,"line_end":170,"column_start":43,"column_end":46},"name":"Rem","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1790},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593292,"byte_end":593295,"line_start":170,"line_end":170,"column_start":48,"column_end":51},"name":"Neg","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1802},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593377,"byte_end":593386,"line_start":172,"line_end":172,"column_start":23,"column_end":32},"name":"AddAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1808},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593388,"byte_end":593397,"line_start":172,"line_end":172,"column_start":34,"column_end":43},"name":"SubAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1814},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593399,"byte_end":593408,"line_start":172,"line_end":172,"column_start":45,"column_end":54},"name":"MulAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1820},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593410,"byte_end":593419,"line_start":172,"line_end":172,"column_start":56,"column_end":65},"name":"DivAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1826},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593421,"byte_end":593430,"line_start":172,"line_end":172,"column_start":67,"column_end":76},"name":"RemAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1834},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593500,"byte_end":593503,"line_start":175,"line_end":175,"column_start":21,"column_end":24},"name":"Not","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1842},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593505,"byte_end":593511,"line_start":175,"line_end":175,"column_start":26,"column_end":32},"name":"BitAnd","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1850},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593513,"byte_end":593518,"line_start":175,"line_end":175,"column_start":34,"column_end":39},"name":"BitOr","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1858},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593520,"byte_end":593526,"line_start":175,"line_end":175,"column_start":41,"column_end":47},"name":"BitXor","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1866},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593528,"byte_end":593531,"line_start":175,"line_end":175,"column_start":49,"column_end":52},"name":"Shl","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1876},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593533,"byte_end":593536,"line_start":175,"line_end":175,"column_start":54,"column_end":57},"name":"Shr","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1886},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593616,"byte_end":593628,"line_start":177,"line_end":177,"column_start":21,"column_end":33},"name":"BitAndAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1892},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593630,"byte_end":593641,"line_start":177,"line_end":177,"column_start":35,"column_end":46},"name":"BitOrAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1898},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593643,"byte_end":593655,"line_start":177,"line_end":177,"column_start":48,"column_end":60},"name":"BitXorAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593657,"byte_end":593666,"line_start":177,"line_end":177,"column_start":62,"column_end":71},"name":"ShlAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593668,"byte_end":593677,"line_start":177,"line_end":177,"column_start":73,"column_end":82},"name":"ShrAssign","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1922},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593749,"byte_end":593754,"line_start":180,"line_end":180,"column_start":23,"column_end":28},"name":"Deref","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1940},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593756,"byte_end":593764,"line_start":180,"line_end":180,"column_start":30,"column_end":38},"name":"DerefMut","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1950},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593834,"byte_end":593838,"line_start":183,"line_end":183,"column_start":21,"column_end":25},"name":"Drop","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1956},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593912,"byte_end":593914,"line_start":186,"line_end":186,"column_start":26,"column_end":28},"name":"Fn","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593916,"byte_end":593921,"line_start":186,"line_end":186,"column_start":30,"column_end":35},"name":"FnMut","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593923,"byte_end":593929,"line_start":186,"line_end":186,"column_start":37,"column_end":43},"name":"FnOnce","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2016},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594001,"byte_end":594006,"line_start":189,"line_end":189,"column_start":23,"column_end":28},"name":"Index","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2022},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594008,"byte_end":594016,"line_start":189,"line_end":189,"column_start":30,"column_end":38},"name":"IndexMut","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29144},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594088,"byte_end":594093,"line_start":192,"line_end":192,"column_start":23,"column_end":28},"name":"Range","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29164},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594095,"byte_end":594104,"line_start":192,"line_end":192,"column_start":30,"column_end":39},"name":"RangeFrom","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29124},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594106,"byte_end":594115,"line_start":192,"line_end":192,"column_start":41,"column_end":50},"name":"RangeFull","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29184},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594117,"byte_end":594124,"line_start":192,"line_end":192,"column_start":52,"column_end":59},"name":"RangeTo","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29206},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594248,"byte_end":594262,"line_start":195,"line_end":195,"column_start":23,"column_end":37},"name":"RangeInclusive","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29226},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594264,"byte_end":594280,"line_start":195,"line_end":195,"column_start":39,"column_end":55},"name":"RangeToInclusive","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2106},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594355,"byte_end":594358,"line_start":198,"line_end":198,"column_start":20,"column_end":23},"name":"Try","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":1998},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594445,"byte_end":594454,"line_start":201,"line_end":201,"column_start":27,"column_end":36},"name":"Generator","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":29082},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594456,"byte_end":594470,"line_start":201,"line_end":201,"column_start":38,"column_end":52},"name":"GeneratorState","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2028},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594561,"byte_end":594566,"line_start":204,"line_end":204,"column_start":23,"column_end":28},"name":"Place","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594568,"byte_end":594574,"line_start":204,"line_end":204,"column_start":30,"column_end":36},"name":"Placer","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2038},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594576,"byte_end":594583,"line_start":204,"line_end":204,"column_start":38,"column_end":45},"name":"InPlace","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2044},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594585,"byte_end":594590,"line_start":204,"line_end":204,"column_start":47,"column_end":52},"name":"Boxed","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2052},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594592,"byte_end":594600,"line_start":204,"line_end":204,"column_start":54,"column_end":62},"name":"BoxPlace","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":2122},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":594683,"byte_end":594696,"line_start":207,"line_end":207,"column_start":23,"column_end":36},"name":"CoerceUnsized","value":"","parent":{"krate":0,"index":1742}},{"kind":"Use","ref_id":{"krate":0,"index":3414},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926704,"byte_end":926712,"line_start":313,"line_end":313,"column_start":25,"column_end":33},"name":"Iterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3556},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926869,"byte_end":926873,"line_start":318,"line_end":318,"column_start":22,"column_end":26},"name":"Step","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":34476},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926946,"byte_end":926952,"line_start":321,"line_end":321,"column_start":25,"column_end":31},"name":"Repeat","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3676},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926954,"byte_end":926960,"line_start":321,"line_end":321,"column_start":33,"column_end":39},"name":"repeat","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3678},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927038,"byte_end":927043,"line_start":323,"line_end":323,"column_start":25,"column_end":30},"name":"Empty","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3712},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927045,"byte_end":927050,"line_start":323,"line_end":323,"column_start":32,"column_end":37},"name":"empty","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":34486},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927127,"byte_end":927131,"line_start":325,"line_end":325,"column_start":25,"column_end":29},"name":"Once","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3734},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927133,"byte_end":927137,"line_start":325,"line_end":325,"column_start":31,"column_end":35},"name":"once","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3754},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927210,"byte_end":927222,"line_start":328,"line_end":328,"column_start":24,"column_end":36},"name":"FromIterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3758},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927224,"byte_end":927236,"line_start":328,"line_end":328,"column_start":38,"column_end":50},"name":"IntoIterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927238,"byte_end":927257,"line_start":328,"line_end":328,"column_start":52,"column_end":71},"name":"DoubleEndedIterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3774},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927259,"byte_end":927265,"line_start":328,"line_end":328,"column_start":73,"column_end":79},"name":"Extend","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3792},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927337,"byte_end":927354,"line_start":330,"line_end":330,"column_start":24,"column_end":41},"name":"ExactSizeIterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3804},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927356,"byte_end":927359,"line_start":330,"line_end":330,"column_start":43,"column_end":46},"name":"Sum","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3808},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927361,"byte_end":927368,"line_start":330,"line_end":330,"column_start":48,"column_end":55},"name":"Product","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3840},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927441,"byte_end":927454,"line_start":332,"line_end":332,"column_start":23,"column_end":36},"name":"FusedIterator","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":3844},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927532,"byte_end":927542,"line_start":334,"line_end":334,"column_start":23,"column_end":33},"name":"TrustedLen","value":"","parent":{"krate":0,"index":3286}},{"kind":"Use","ref_id":{"krate":0,"index":35942},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1469598,"byte_end":1469607,"line_start":100,"line_end":100,"column_start":20,"column_end":29},"name":"SipHasher","value":"","parent":{"krate":0,"index":6706}},{"kind":"Use","ref_id":{"krate":0,"index":35914},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1469705,"byte_end":1469716,"line_start":104,"line_end":104,"column_start":21,"column_end":32},"name":"SipHasher13","value":"","parent":{"krate":0,"index":6706}},{"kind":"Use","ref_id":{"krate":0,"index":35928},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1469718,"byte_end":1469729,"line_start":104,"line_end":104,"column_start":34,"column_end":45},"name":"SipHasher24","value":"","parent":{"krate":0,"index":6706}},{"kind":"Use","ref_id":{"krate":0,"index":7092},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501986,"byte_end":1501997,"line_start":43,"line_end":43,"column_start":26,"column_end":37},"name":"DebugStruct","value":"","parent":{"krate":0,"index":6956}},{"kind":"Use","ref_id":{"krate":0,"index":7104},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501999,"byte_end":1502009,"line_start":43,"line_end":43,"column_start":39,"column_end":49},"name":"DebugTuple","value":"","parent":{"krate":0,"index":6956}},{"kind":"Use","ref_id":{"krate":0,"index":7126},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502011,"byte_end":1502019,"line_start":43,"line_end":43,"column_start":51,"column_end":59},"name":"DebugSet","value":"","parent":{"krate":0,"index":6956}},{"kind":"Use","ref_id":{"krate":0,"index":7138},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502021,"byte_end":1502030,"line_start":43,"line_end":43,"column_start":61,"column_end":70},"name":"DebugList","value":"","parent":{"krate":0,"index":6956}},{"kind":"Use","ref_id":{"krate":0,"index":7150},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502032,"byte_end":1502040,"line_start":43,"line_end":43,"column_start":72,"column_end":80},"name":"DebugMap","value":"","parent":{"krate":0,"index":6956}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":5588,"line_start":11,"line_end":178,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"libcore/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":32},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":188},{"krate":0,"index":302},{"krate":0,"index":1114},{"krate":0,"index":1200},{"krate":0,"index":1208},{"krate":0,"index":1352},{"krate":0,"index":1386},{"krate":0,"index":1690},{"krate":0,"index":1742},{"krate":0,"index":2254},{"krate":0,"index":2444},{"krate":0,"index":2456},{"krate":0,"index":2464},{"krate":0,"index":2544},{"krate":0,"index":2574},{"krate":0,"index":2616},{"krate":0,"index":2672},{"krate":0,"index":2802},{"krate":0,"index":3080},{"krate":0,"index":3274},{"krate":0,"index":3286},{"krate":0,"index":4452},{"krate":0,"index":4666},{"krate":0,"index":4668},{"krate":0,"index":4846},{"krate":0,"index":5854},{"krate":0,"index":6706},{"krate":0,"index":6956},{"krate":0,"index":7448},{"krate":0,"index":7556},{"krate":0,"index":7574},{"krate":0,"index":7582},{"krate":0,"index":7598}],"decl_id":null,"docs":" # The Rust Core Library","sig":null,"attributes":[{"value":"stable(feature = \"core\", since = \"1.6.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":2683,"byte_end":2728,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"no_core","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3214,"byte_end":3225,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"deny(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3226,"byte_end":3248,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3249,"byte_end":3288,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"deny(warnings)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3289,"byte_end":3307,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"feature(allow_internal_unstable)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3309,"byte_end":3345,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"feature(asm)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3346,"byte_end":3362,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"feature(associated_type_defaults)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3363,"byte_end":3400,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"feature(cfg_target_feature)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3401,"byte_end":3432,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"feature(cfg_target_has_atomic)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3433,"byte_end":3467,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"feature(concat_idents)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3468,"byte_end":3494,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"feature(const_fn)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3495,"byte_end":3516,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"feature(custom_attribute)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3517,"byte_end":3546,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"feature(fundamental)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3547,"byte_end":3571,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"feature(i128_type)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3572,"byte_end":3594,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"feature(inclusive_range_syntax)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3595,"byte_end":3630,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"feature(intrinsics)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3631,"byte_end":3654,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"feature(lang_items)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3655,"byte_end":3678,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"feature(never_type)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3679,"byte_end":3702,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"feature(no_core)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3703,"byte_end":3723,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"feature(on_unimplemented)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3724,"byte_end":3753,"line_start":83,"line_end":83,"column_start":1,"column_end":30}},{"value":"feature(optin_builtin_traits)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3754,"byte_end":3787,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"feature(prelude_import)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3788,"byte_end":3815,"line_start":85,"line_end":85,"column_start":1,"column_end":28}},{"value":"feature(repr_simd, platform_intrinsics)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3816,"byte_end":3859,"line_start":86,"line_end":86,"column_start":1,"column_end":44}},{"value":"feature(rustc_attrs)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3860,"byte_end":3884,"line_start":87,"line_end":87,"column_start":1,"column_end":25}},{"value":"feature(specialization)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3885,"byte_end":3912,"line_start":88,"line_end":88,"column_start":1,"column_end":28}},{"value":"feature(staged_api)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3913,"byte_end":3936,"line_start":89,"line_end":89,"column_start":1,"column_end":24}},{"value":"feature(unboxed_closures)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3937,"byte_end":3966,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"feature(untagged_unions)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3967,"byte_end":3995,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"feature(unwind_attributes)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3996,"byte_end":4026,"line_start":92,"line_end":92,"column_start":1,"column_end":31}},{"value":"feature(doc_spotlight)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4027,"byte_end":4053,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"feature(rustc_const_unstable)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4054,"byte_end":4087,"line_start":94,"line_end":94,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isize","qualname":"::isize","value":"libcore/num/isize.rs","parent":null,"children":[{"krate":0,"index":7606},{"krate":0,"index":7608}],"decl_id":null,"docs":" The pointer-sized signed integer type.","sig":null,"attributes":[{"value":"path = \"num/isize.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4328,"byte_end":4352,"line_start":114,"line_end":114,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":35704,"byte_end":35750,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i8","qualname":"::i8","value":"libcore/num/i8.rs","parent":null,"children":[{"krate":0,"index":7610},{"krate":0,"index":7612}],"decl_id":null,"docs":" The 8-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i8.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4368,"byte_end":4389,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":36353,"byte_end":36399,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i16","qualname":"::i16","value":"libcore/num/i16.rs","parent":null,"children":[{"krate":0,"index":7614},{"krate":0,"index":7616}],"decl_id":null,"docs":" The 16-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i16.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4405,"byte_end":4427,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":37002,"byte_end":37048,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i32","qualname":"::i32","value":"libcore/num/i32.rs","parent":null,"children":[{"krate":0,"index":7618},{"krate":0,"index":7620}],"decl_id":null,"docs":" The 32-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4443,"byte_end":4465,"line_start":117,"line_end":117,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":37652,"byte_end":37698,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i64","qualname":"::i64","value":"libcore/num/i64.rs","parent":null,"children":[{"krate":0,"index":7622},{"krate":0,"index":7624}],"decl_id":null,"docs":" The 64-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4481,"byte_end":4503,"line_start":118,"line_end":118,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":38302,"byte_end":38348,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i128","qualname":"::i128","value":"libcore/num/i128.rs","parent":null,"children":[{"krate":0,"index":7626},{"krate":0,"index":7628}],"decl_id":null,"docs":" The 128-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i128.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4519,"byte_end":4542,"line_start":119,"line_end":119,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"i128\", issue = \"35118\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":38955,"byte_end":39000,"line_start":15,"line_end":15,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"usize","qualname":"::usize","value":"libcore/num/usize.rs","parent":null,"children":[{"krate":0,"index":7630},{"krate":0,"index":7632}],"decl_id":null,"docs":" The pointer-sized unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/usize.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4560,"byte_end":4584,"line_start":121,"line_end":121,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":39669,"byte_end":39715,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u8","qualname":"::u8","value":"libcore/num/u8.rs","parent":null,"children":[{"krate":0,"index":7634},{"krate":0,"index":7636}],"decl_id":null,"docs":" The 8-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u8.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4600,"byte_end":4621,"line_start":122,"line_end":122,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":40321,"byte_end":40367,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":64},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u16","qualname":"::u16","value":"libcore/num/u16.rs","parent":null,"children":[{"krate":0,"index":7638},{"krate":0,"index":7640}],"decl_id":null,"docs":" The 16-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u16.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4637,"byte_end":4659,"line_start":123,"line_end":123,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":40973,"byte_end":41019,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u32","qualname":"::u32","value":"libcore/num/u32.rs","parent":null,"children":[{"krate":0,"index":7642},{"krate":0,"index":7644}],"decl_id":null,"docs":" The 32-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4675,"byte_end":4697,"line_start":124,"line_end":124,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":41626,"byte_end":41672,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u64","qualname":"::u64","value":"libcore/num/u64.rs","parent":null,"children":[{"krate":0,"index":7646},{"krate":0,"index":7648}],"decl_id":null,"docs":" The 64-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4713,"byte_end":4735,"line_start":125,"line_end":125,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":42279,"byte_end":42325,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u128","qualname":"::u128","value":"libcore/num/u128.rs","parent":null,"children":[{"krate":0,"index":7650},{"krate":0,"index":7652}],"decl_id":null,"docs":" The 128-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u128.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4751,"byte_end":4774,"line_start":126,"line_end":126,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"i128\", issue = \"35118\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":42935,"byte_end":42980,"line_start":15,"line_end":15,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f32","qualname":"::f32","value":"libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":144}],"decl_id":null,"docs":" This module provides constants which are specific to the implementation\n of the `f32` floating point data type.","sig":null,"attributes":[{"value":"path = \"num/f32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4792,"byte_end":4814,"line_start":128,"line_end":128,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43803,"byte_end":43849,"line_start":18,"line_end":18,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44039,"byte_end":44044,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f32::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f32`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43983,"byte_end":44028,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44156,"byte_end":44171,"line_start":31,"line_end":31,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f32::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44100,"byte_end":44145,"line_start":30,"line_end":30,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44296,"byte_end":44302,"line_start":34,"line_end":34,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f32::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44240,"byte_end":44285,"line_start":33,"line_end":33,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":88},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44442,"byte_end":44449,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f32::EPSILON","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44386,"byte_end":44431,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":90},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44567,"byte_end":44570,"line_start":42,"line_end":42,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f32::MIN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44511,"byte_end":44556,"line_start":41,"line_end":41,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":92},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44697,"byte_end":44709,"line_start":45,"line_end":45,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f32::MIN_POSITIVE","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44641,"byte_end":44686,"line_start":44,"line_end":44,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44825,"byte_end":44828,"line_start":48,"line_end":48,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f32::MAX","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44769,"byte_end":44814,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44983,"byte_end":44990,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f32::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44927,"byte_end":44972,"line_start":51,"line_end":51,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45102,"byte_end":45109,"line_start":55,"line_end":55,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f32::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45046,"byte_end":45091,"line_start":54,"line_end":54,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45229,"byte_end":45239,"line_start":59,"line_end":59,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f32::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45173,"byte_end":45218,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":102},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45351,"byte_end":45361,"line_start":62,"line_end":62,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f32::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45295,"byte_end":45340,"line_start":61,"line_end":61,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45454,"byte_end":45457,"line_start":66,"line_end":66,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f32::NAN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45398,"byte_end":45443,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45560,"byte_end":45568,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f32::INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45504,"byte_end":45549,"line_start":68,"line_end":68,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45681,"byte_end":45693,"line_start":72,"line_end":72,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f32::NEG_INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45625,"byte_end":45670,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":110},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45810,"byte_end":45816,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"name":"consts","qualname":"::f32::consts","value":"libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45756,"byte_end":45801,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45980,"byte_end":45982,"line_start":81,"line_end":81,"column_start":15,"column_end":17},"name":"PI","qualname":"::f32::consts::PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45920,"byte_end":45965,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46111,"byte_end":46120,"line_start":85,"line_end":85,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f32::consts::FRAC_PI_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46051,"byte_end":46096,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46249,"byte_end":46258,"line_start":89,"line_end":89,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f32::consts::FRAC_PI_3","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46189,"byte_end":46234,"line_start":88,"line_end":88,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46387,"byte_end":46396,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f32::consts::FRAC_PI_4","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46327,"byte_end":46372,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46526,"byte_end":46535,"line_start":97,"line_end":97,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f32::consts::FRAC_PI_6","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46466,"byte_end":46511,"line_start":96,"line_end":96,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46664,"byte_end":46673,"line_start":101,"line_end":101,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f32::consts::FRAC_PI_8","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46604,"byte_end":46649,"line_start":100,"line_end":100,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46802,"byte_end":46811,"line_start":105,"line_end":105,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f32::consts::FRAC_1_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46742,"byte_end":46787,"line_start":104,"line_end":104,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46941,"byte_end":46950,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f32::consts::FRAC_2_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46881,"byte_end":46926,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47086,"byte_end":47100,"line_start":113,"line_end":113,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f32::consts::FRAC_2_SQRT_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47026,"byte_end":47071,"line_start":112,"line_end":112,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":130},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47232,"byte_end":47238,"line_start":117,"line_end":117,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f32::consts::SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47172,"byte_end":47217,"line_start":116,"line_end":116,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":132},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47372,"byte_end":47385,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f32::consts::FRAC_1_SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47312,"byte_end":47357,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47529,"byte_end":47530,"line_start":125,"line_end":125,"column_start":15,"column_end":16},"name":"E","qualname":"::f32::consts::E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47469,"byte_end":47514,"line_start":124,"line_end":124,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":136},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47673,"byte_end":47679,"line_start":129,"line_end":129,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f32::consts::LOG2_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47613,"byte_end":47658,"line_start":128,"line_end":128,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47823,"byte_end":47830,"line_start":133,"line_end":133,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f32::consts::LOG10_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47763,"byte_end":47808,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47961,"byte_end":47965,"line_start":137,"line_end":137,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f32::consts::LN_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47901,"byte_end":47946,"line_start":136,"line_end":136,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48097,"byte_end":48102,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f32::consts::LN_10","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48037,"byte_end":48082,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":188},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f64","qualname":"::f64","value":"libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":260}],"decl_id":null,"docs":" This module provides constants which are specific to the implementation\n of the `f64` floating point data type.","sig":null,"attributes":[{"value":"path = \"num/f64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4830,"byte_end":4852,"line_start":129,"line_end":129,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54272,"byte_end":54318,"line_start":18,"line_end":18,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":198},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54508,"byte_end":54513,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f64::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f64`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54452,"byte_end":54497,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54625,"byte_end":54640,"line_start":31,"line_end":31,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f64::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54569,"byte_end":54614,"line_start":30,"line_end":30,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54765,"byte_end":54771,"line_start":34,"line_end":34,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f64::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54709,"byte_end":54754,"line_start":33,"line_end":33,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":204},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54912,"byte_end":54919,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f64::EPSILON","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54856,"byte_end":54901,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":206},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55045,"byte_end":55048,"line_start":42,"line_end":42,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f64::MIN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54989,"byte_end":55034,"line_start":41,"line_end":41,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":208},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55184,"byte_end":55196,"line_start":45,"line_end":45,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f64::MIN_POSITIVE","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55128,"byte_end":55173,"line_start":44,"line_end":44,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":210},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55321,"byte_end":55324,"line_start":48,"line_end":48,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f64::MAX","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55265,"byte_end":55310,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":212},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55488,"byte_end":55495,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f64::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55432,"byte_end":55477,"line_start":51,"line_end":51,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":214},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55608,"byte_end":55615,"line_start":55,"line_end":55,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f64::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55552,"byte_end":55597,"line_start":54,"line_end":54,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55736,"byte_end":55746,"line_start":59,"line_end":59,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f64::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55680,"byte_end":55725,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":218},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55859,"byte_end":55869,"line_start":62,"line_end":62,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f64::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55803,"byte_end":55848,"line_start":61,"line_end":61,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55963,"byte_end":55966,"line_start":66,"line_end":66,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f64::NAN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55907,"byte_end":55952,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56069,"byte_end":56077,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f64::INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56013,"byte_end":56058,"line_start":68,"line_end":68,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":224},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56190,"byte_end":56202,"line_start":72,"line_end":72,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f64::NEG_INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56134,"byte_end":56179,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":226},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56319,"byte_end":56325,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"name":"consts","qualname":"::f64::consts","value":"libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56265,"byte_end":56310,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":228},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56489,"byte_end":56491,"line_start":81,"line_end":81,"column_start":15,"column_end":17},"name":"PI","qualname":"::f64::consts::PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56429,"byte_end":56474,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":230},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56620,"byte_end":56629,"line_start":85,"line_end":85,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f64::consts::FRAC_PI_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56560,"byte_end":56605,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":232},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56758,"byte_end":56767,"line_start":89,"line_end":89,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f64::consts::FRAC_PI_3","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56698,"byte_end":56743,"line_start":88,"line_end":88,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":234},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56896,"byte_end":56905,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f64::consts::FRAC_PI_4","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56836,"byte_end":56881,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57035,"byte_end":57044,"line_start":97,"line_end":97,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f64::consts::FRAC_PI_6","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56975,"byte_end":57020,"line_start":96,"line_end":96,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57173,"byte_end":57182,"line_start":101,"line_end":101,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f64::consts::FRAC_PI_8","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57113,"byte_end":57158,"line_start":100,"line_end":100,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":240},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57311,"byte_end":57320,"line_start":105,"line_end":105,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f64::consts::FRAC_1_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57251,"byte_end":57296,"line_start":104,"line_end":104,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":242},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57450,"byte_end":57459,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f64::consts::FRAC_2_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57390,"byte_end":57435,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57595,"byte_end":57609,"line_start":113,"line_end":113,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f64::consts::FRAC_2_SQRT_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57535,"byte_end":57580,"line_start":112,"line_end":112,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":246},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57741,"byte_end":57747,"line_start":117,"line_end":117,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f64::consts::SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57681,"byte_end":57726,"line_start":116,"line_end":116,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":248},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57881,"byte_end":57894,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f64::consts::FRAC_1_SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57821,"byte_end":57866,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":250},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58038,"byte_end":58039,"line_start":125,"line_end":125,"column_start":15,"column_end":16},"name":"E","qualname":"::f64::consts::E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57978,"byte_end":58023,"line_start":124,"line_end":124,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":252},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58182,"byte_end":58188,"line_start":129,"line_end":129,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f64::consts::LOG2_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58122,"byte_end":58167,"line_start":128,"line_end":128,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":254},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58332,"byte_end":58339,"line_start":133,"line_end":133,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f64::consts::LOG10_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58272,"byte_end":58317,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":256},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58470,"byte_end":58474,"line_start":137,"line_end":137,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f64::consts::LN_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58410,"byte_end":58455,"line_start":136,"line_end":136,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":258},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58606,"byte_end":58611,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f64::consts::LN_10","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58546,"byte_end":58591,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":302},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"libcore/num/mod.rs","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":7654},{"krate":0,"index":7690},{"krate":0,"index":7686},{"krate":0,"index":7674},{"krate":0,"index":7670},{"krate":0,"index":7666},{"krate":0,"index":7664},{"krate":0,"index":7660},{"krate":0,"index":7656},{"krate":0,"index":318},{"krate":0,"index":322},{"krate":0,"index":326},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":384},{"krate":0,"index":564},{"krate":0,"index":900},{"krate":0,"index":926},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":12938},{"krate":0,"index":12956},{"krate":0,"index":12952},{"krate":0,"index":12948},{"krate":0,"index":12944},{"krate":0,"index":12940},{"krate":0,"index":998},{"krate":0,"index":1036},{"krate":0,"index":12958},{"krate":0,"index":12964},{"krate":0,"index":12970},{"krate":0,"index":12976},{"krate":0,"index":12982},{"krate":0,"index":12988},{"krate":0,"index":12994},{"krate":0,"index":13000},{"krate":0,"index":13006},{"krate":0,"index":13012},{"krate":0,"index":13018},{"krate":0,"index":13024},{"krate":0,"index":13030},{"krate":0,"index":13038},{"krate":0,"index":13036},{"krate":0,"index":13032},{"krate":0,"index":1038},{"krate":0,"index":1042},{"krate":0,"index":1046},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":13042},{"krate":0,"index":13048},{"krate":0,"index":13054},{"krate":0,"index":13060},{"krate":0,"index":13066},{"krate":0,"index":13072},{"krate":0,"index":13078},{"krate":0,"index":13084},{"krate":0,"index":13090},{"krate":0,"index":13096},{"krate":0,"index":13102},{"krate":0,"index":13108},{"krate":0,"index":13114},{"krate":0,"index":13120},{"krate":0,"index":13126},{"krate":0,"index":13132},{"krate":0,"index":13138},{"krate":0,"index":13144},{"krate":0,"index":13150},{"krate":0,"index":13156},{"krate":0,"index":13162},{"krate":0,"index":13168},{"krate":0,"index":13174},{"krate":0,"index":13180},{"krate":0,"index":13186},{"krate":0,"index":13192},{"krate":0,"index":13198},{"krate":0,"index":13204},{"krate":0,"index":13210},{"krate":0,"index":13216},{"krate":0,"index":13222},{"krate":0,"index":13228},{"krate":0,"index":13234},{"krate":0,"index":13240},{"krate":0,"index":13246},{"krate":0,"index":13252},{"krate":0,"index":13258},{"krate":0,"index":13264},{"krate":0,"index":13270},{"krate":0,"index":13276},{"krate":0,"index":13282},{"krate":0,"index":13288},{"krate":0,"index":13294},{"krate":0,"index":13300},{"krate":0,"index":13306},{"krate":0,"index":13312},{"krate":0,"index":13318},{"krate":0,"index":13324},{"krate":0,"index":13330},{"krate":0,"index":13336},{"krate":0,"index":13342},{"krate":0,"index":13348},{"krate":0,"index":13354},{"krate":0,"index":13360},{"krate":0,"index":13366},{"krate":0,"index":13372},{"krate":0,"index":13378},{"krate":0,"index":13384},{"krate":0,"index":13390},{"krate":0,"index":13396},{"krate":0,"index":13402},{"krate":0,"index":13408},{"krate":0,"index":1060},{"krate":0,"index":1070},{"krate":0,"index":1084},{"krate":0,"index":13642},{"krate":0,"index":13656},{"krate":0,"index":13670},{"krate":0,"index":13684},{"krate":0,"index":13698},{"krate":0,"index":13712},{"krate":0,"index":13726},{"krate":0,"index":13740},{"krate":0,"index":13754},{"krate":0,"index":13768},{"krate":0,"index":13782},{"krate":0,"index":13796},{"krate":0,"index":1086},{"krate":0,"index":13810},{"krate":0,"index":13826},{"krate":0,"index":13822},{"krate":0,"index":13816},{"krate":0,"index":13812},{"krate":0,"index":13830},{"krate":0,"index":13844},{"krate":0,"index":13840},{"krate":0,"index":13836},{"krate":0,"index":13832},{"krate":0,"index":1092},{"krate":0,"index":1096},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":13848},{"krate":0,"index":13852},{"krate":0,"index":13856},{"krate":0,"index":13860},{"krate":0,"index":13864},{"krate":0,"index":13868},{"krate":0,"index":13872},{"krate":0,"index":13876},{"krate":0,"index":13880},{"krate":0,"index":13884},{"krate":0,"index":13888},{"krate":0,"index":13892},{"krate":0,"index":13896},{"krate":0,"index":13900},{"krate":0,"index":13904},{"krate":0,"index":13908},{"krate":0,"index":13912},{"krate":0,"index":13916},{"krate":0,"index":13920},{"krate":0,"index":13924},{"krate":0,"index":13928},{"krate":0,"index":13932},{"krate":0,"index":13936},{"krate":0,"index":13940},{"krate":0,"index":13944},{"krate":0,"index":13948},{"krate":0,"index":13952},{"krate":0,"index":13956},{"krate":0,"index":13960},{"krate":0,"index":13964},{"krate":0,"index":13968},{"krate":0,"index":13972},{"krate":0,"index":13976},{"krate":0,"index":13980},{"krate":0,"index":13984},{"krate":0,"index":13988},{"krate":0,"index":13992},{"krate":0,"index":13996},{"krate":0,"index":14000},{"krate":0,"index":14004},{"krate":0,"index":14008},{"krate":0,"index":14012},{"krate":0,"index":14016},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112}],"decl_id":null,"docs":" Numeric traits and functions for the built-in numeric types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4869,"byte_end":4881,"line_start":131,"line_end":131,"column_start":1,"column_end":13}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64544,"byte_end":64590,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":7654},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65594,"byte_end":65602,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Wrapping","qualname":"::num::Wrapping","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provides intentionally-wrapped arithmetic on `T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65467,"byte_end":65512,"line_start":44,"line_end":44,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65583,"byte_end":65682,"line_start":46,"line_end":47,"column_start":1,"column_end":31}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65583,"byte_end":65682,"line_start":46,"line_end":47,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":360},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192282,"byte_end":192287,"line_start":342,"line_end":342,"column_start":19,"column_end":24},"name":"usize","qualname":"::num::wrapping::shift_max::platform::usize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":362},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192325,"byte_end":192330,"line_start":343,"line_end":343,"column_start":19,"column_end":24},"name":"isize","qualname":"::num::wrapping::shift_max::platform::isize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":364},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192371,"byte_end":192373,"line_start":346,"line_end":346,"column_start":15,"column_end":17},"name":"i8","qualname":"::num::wrapping::shift_max::i8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":366},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192409,"byte_end":192412,"line_start":347,"line_end":347,"column_start":15,"column_end":18},"name":"i16","qualname":"::num::wrapping::shift_max::i16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192448,"byte_end":192451,"line_start":348,"line_end":348,"column_start":15,"column_end":18},"name":"i32","qualname":"::num::wrapping::shift_max::i32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192487,"byte_end":192490,"line_start":349,"line_end":349,"column_start":15,"column_end":18},"name":"i64","qualname":"::num::wrapping::shift_max::i64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":374},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192562,"byte_end":192564,"line_start":352,"line_end":352,"column_start":15,"column_end":17},"name":"u8","qualname":"::num::wrapping::shift_max::u8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":376},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192590,"byte_end":192593,"line_start":353,"line_end":353,"column_start":15,"column_end":18},"name":"u16","qualname":"::num::wrapping::shift_max::u16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192620,"byte_end":192623,"line_start":354,"line_end":354,"column_start":15,"column_end":18},"name":"u32","qualname":"::num::wrapping::shift_max::u32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":192650,"byte_end":192653,"line_start":355,"line_end":355,"column_start":15,"column_end":18},"name":"u64","qualname":"::num::wrapping::shift_max::u64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":384},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flt2dec","qualname":"::num::flt2dec","value":"libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":398},{"krate":0,"index":402},{"krate":0,"index":428},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":11380},{"krate":0,"index":11400},{"krate":0,"index":11396},{"krate":0,"index":11390},{"krate":0,"index":11386},{"krate":0,"index":11382},{"krate":0,"index":536},{"krate":0,"index":11402},{"krate":0,"index":11404},{"krate":0,"index":542},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":11408},{"krate":0,"index":11426},{"krate":0,"index":11422},{"krate":0,"index":11418},{"krate":0,"index":11414},{"krate":0,"index":11410},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562}],"decl_id":null,"docs":"Floating-point number to decimal conversion routines.","sig":null,"attributes":[{"value":"unstable(feature = \"flt2dec\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198707,"byte_end":198832,"line_start":129,"line_end":131,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":398},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"estimator","qualname":"::num::flt2dec::estimator","value":"libcore/num/flt2dec/estimator.rs","parent":null,"children":[{"krate":0,"index":400}],"decl_id":null,"docs":" The exponent estimator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":400},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":222384,"byte_end":222407,"line_start":18,"line_end":18,"column_start":8,"column_end":31},"name":"estimate_scaling_factor","qualname":"::num::flt2dec::estimator::estimate_scaling_factor","value":"fn (mant: u64, exp: i16) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Finds `k_0` such that `10^(k_0-1) < mant * 2^exp <= 10^(k_0+1)`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":402},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decoder","qualname":"::num::flt2dec::decoder","value":"libcore/num/flt2dec/decoder.rs","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":11336},{"krate":0,"index":11356},{"krate":0,"index":11352},{"krate":0,"index":11348},{"krate":0,"index":11342},{"krate":0,"index":11338},{"krate":0,"index":11358},{"krate":0,"index":11378},{"krate":0,"index":11374},{"krate":0,"index":11370},{"krate":0,"index":11364},{"krate":0,"index":11360},{"krate":0,"index":414},{"krate":0,"index":418},{"krate":0,"index":422},{"krate":0,"index":426}],"decl_id":null,"docs":" Decodes a floating-point value into individual parts and error ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11336},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223669,"byte_end":223676,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"Decoded","qualname":"::num::flt2dec::decoder::Decoded","value":"Decoded { mant, minus, plus, exp, inclusive }","parent":null,"children":[{"krate":0,"index":5671},{"krate":0,"index":5673},{"krate":0,"index":5675},{"krate":0,"index":5677},{"krate":0,"index":5679}],"decl_id":null,"docs":" Decoded unsigned finite value, such that:","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223658,"byte_end":224038,"line_start":25,"line_end":38,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223658,"byte_end":224038,"line_start":25,"line_end":38,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":5671},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223716,"byte_end":223720,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"name":"mant","qualname":"::num::flt2dec::decoder::Decoded::mant","value":"u64","parent":{"krate":0,"index":11336},"children":[],"decl_id":null,"docs":" The scaled mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5673},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223766,"byte_end":223771,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"minus","qualname":"::num::flt2dec::decoder::Decoded::minus","value":"u64","parent":{"krate":0,"index":11336},"children":[],"decl_id":null,"docs":" The lower error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5675},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223817,"byte_end":223821,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"plus","qualname":"::num::flt2dec::decoder::Decoded::plus","value":"u64","parent":{"krate":0,"index":11336},"children":[],"decl_id":null,"docs":" The upper error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5677},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":223875,"byte_end":223878,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::flt2dec::decoder::Decoded::exp","value":"i16","parent":{"krate":0,"index":11336},"children":[],"decl_id":null,"docs":" The shared exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5679},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224020,"byte_end":224029,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"name":"inclusive","qualname":"::num::flt2dec::decoder::Decoded::inclusive","value":"bool","parent":{"krate":0,"index":11336},"children":[],"decl_id":null,"docs":" True when the error range is inclusive.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5681},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224162,"byte_end":224165,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::flt2dec::decoder::FullDecoded::Nan","value":"FullDecoded::Nan","parent":{"krate":0,"index":11358},"children":[],"decl_id":null,"docs":" Not-a-number.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5683},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224220,"byte_end":224228,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::flt2dec::decoder::FullDecoded::Infinite","value":"FullDecoded::Infinite","parent":{"krate":0,"index":11358},"children":[],"decl_id":null,"docs":" Infinities, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5685},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224277,"byte_end":224281,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::decoder::FullDecoded::Zero","value":"FullDecoded::Zero","parent":{"krate":0,"index":11358},"children":[],"decl_id":null,"docs":" Zero, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5687},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224339,"byte_end":224345,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"Finite","qualname":"::num::flt2dec::decoder::FullDecoded::Finite","value":"FullDecoded::Finite(Decoded)","parent":{"krate":0,"index":11358},"children":[],"decl_id":null,"docs":" Finite numbers with further decoded fields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11358},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224122,"byte_end":224133,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"FullDecoded","qualname":"::num::flt2dec::decoder::FullDecoded","value":"FullDecoded::{Nan, Infinite, Zero, Finite}","parent":null,"children":[{"krate":0,"index":5681},{"krate":0,"index":5683},{"krate":0,"index":5685},{"krate":0,"index":5687}],"decl_id":null,"docs":" Decoded unsigned value.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224113,"byte_end":224357,"line_start":42,"line_end":51,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224113,"byte_end":224357,"line_start":42,"line_end":51,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":414},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224419,"byte_end":224433,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"DecodableFloat","qualname":"::num::flt2dec::decoder::DecodableFloat","value":"DecodableFloat: RawFloat + Copy","parent":null,"children":[{"krate":0,"index":416}],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224507,"byte_end":224525,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"min_pos_norm_value","qualname":"::num::flt2dec::decoder::DecodableFloat::min_pos_norm_value","value":"fn () -> Self","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224831,"byte_end":224837,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"decode","qualname":"::num::flt2dec::decoder::decode","value":"fn <T> (v: T) -> (bool, FullDecoded)","parent":null,"children":[],"decl_id":null,"docs":" Returns a sign (true when negative) and `FullDecoded` value\n from given floating point number.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":428},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198993,"byte_end":199001,"line_start":140,"line_end":140,"column_start":9,"column_end":17},"name":"strategy","qualname":"::num::flt2dec::strategy","value":"libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":472}],"decl_id":null,"docs":" Digit-generation algorithms.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":430},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dragon","qualname":"::num::flt2dec::strategy::dragon","value":"libcore/num/flt2dec/strategy/dragon.rs","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470}],"decl_id":null,"docs":"Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":462},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":228274,"byte_end":228283,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"mul_pow10","qualname":"::num::flt2dec::strategy::dragon::mul_pow10","value":"fn (x: &mut Big, n: usize) -> &mut Big","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":468},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":229465,"byte_end":229480,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::dragon::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":470},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":236386,"byte_end":236398,"line_start":228,"line_end":228,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::dragon::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":472},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"grisu","qualname":"::num::flt2dec::strategy::grisu","value":"libcore/num/flt2dec/strategy/grisu.rs","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":528}],"decl_id":null,"docs":"Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n1KB of precomputed table, and in turn, it's very quick for most inputs.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":484},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":241528,"byte_end":241533,"line_start":24,"line_end":24,"column_start":26,"column_end":31},"name":"ALPHA","qualname":"::num::flt2dec::strategy::grisu::ALPHA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":241571,"byte_end":241576,"line_start":25,"line_end":25,"column_start":26,"column_end":31},"name":"GAMMA","qualname":"::num::flt2dec::strategy::grisu::GAMMA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":488},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":241910,"byte_end":241922,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"name":"CACHED_POW10","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10","value":"[(u64, i16, i16); 81]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":245151,"byte_end":245171,"line_start":122,"line_end":122,"column_start":26,"column_end":46},"name":"CACHED_POW10_FIRST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_FIRST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":492},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":245211,"byte_end":245230,"line_start":123,"line_end":123,"column_start":26,"column_end":45},"name":"CACHED_POW10_LAST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_LAST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":245267,"byte_end":245279,"line_start":126,"line_end":126,"column_start":8,"column_end":20},"name":"cached_power","qualname":"::num::flt2dec::strategy::grisu::cached_power","value":"fn (alpha: i16, gamma: i16) -> (i16, Fp)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":245760,"byte_end":245782,"line_start":138,"line_end":138,"column_start":8,"column_end":30},"name":"max_pow10_no_more_than","qualname":"::num::flt2dec::strategy::grisu::max_pow10_no_more_than","value":"fn (x: u32) -> (u8, u32)","parent":null,"children":[],"decl_id":null,"docs":" Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":246617,"byte_end":246636,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"format_shortest_opt","qualname":"::num::flt2dec::strategy::grisu::format_shortest_opt","value":"fn (d: &Decoded, buf: &mut [u8]) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":260826,"byte_end":260841,"line_start":431,"line_end":431,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::grisu::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":261233,"byte_end":261249,"line_start":442,"line_end":442,"column_start":8,"column_end":24},"name":"format_exact_opt","qualname":"::num::flt2dec::strategy::grisu::format_exact_opt","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":272464,"byte_end":272476,"line_start":688,"line_end":688,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::grisu::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":532},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":199358,"byte_end":199372,"line_start":150,"line_end":150,"column_start":11,"column_end":25},"name":"MAX_SIG_DIGITS","qualname":"::num::flt2dec::MAX_SIG_DIGITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The minimum size of buffer necessary for the shortest mode.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":199556,"byte_end":199564,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"round_up","qualname":"::num::flt2dec::round_up","value":"fn (d: &mut [u8], n: usize) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" When `d[..n]` contains decimal digits, increase the last digit and propagate carry.\n Returns a next digit when it causes the length change.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5691},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200233,"byte_end":200237,"line_start":177,"line_end":177,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::Part::Zero","value":"Part::Zero(usize)","parent":{"krate":0,"index":11380},"children":[],"decl_id":null,"docs":" Given number of zero digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5695},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200291,"byte_end":200294,"line_start":179,"line_end":179,"column_start":5,"column_end":8},"name":"Num","qualname":"::num::flt2dec::Part::Num","value":"Part::Num(u16)","parent":{"krate":0,"index":11380},"children":[],"decl_id":null,"docs":" A literal number up to 5 digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5699},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200345,"byte_end":200349,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"Copy","qualname":"::num::flt2dec::Part::Copy","value":"Part::Copy(&'a [u8])","parent":{"krate":0,"index":11380},"children":[],"decl_id":null,"docs":" A verbatim copy of given bytes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11380},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200181,"byte_end":200185,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Part","qualname":"::num::flt2dec::Part","value":"Part::{Zero, Num, Copy}","parent":null,"children":[{"krate":0,"index":5691},{"krate":0,"index":5695},{"krate":0,"index":5699}],"decl_id":null,"docs":" Formatted parts.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200172,"byte_end":200362,"line_start":175,"line_end":182,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200172,"byte_end":200362,"line_start":175,"line_end":182,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200448,"byte_end":200451,"line_start":186,"line_end":186,"column_start":12,"column_end":15},"name":"len","qualname":"<Part<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200990,"byte_end":200995,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"write","qualname":"<Part<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11402},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":201872,"byte_end":201881,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"Formatted","qualname":"::num::flt2dec::Formatted","value":"Formatted { sign, parts }","parent":null,"children":[{"krate":0,"index":5715},{"krate":0,"index":5717}],"decl_id":null,"docs":" Formatted result containing one or more parts.\n This can be written to the byte buffer or converted to the allocated string.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":201804,"byte_end":201843,"line_start":224,"line_end":224,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":5715},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":201967,"byte_end":201971,"line_start":228,"line_end":228,"column_start":9,"column_end":13},"name":"sign","qualname":"::num::flt2dec::Formatted::sign","value":"&'static [u8]","parent":{"krate":0,"index":11402},"children":[],"decl_id":null,"docs":" A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5717},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":202075,"byte_end":202080,"line_start":230,"line_end":230,"column_start":9,"column_end":14},"name":"parts","qualname":"::num::flt2dec::Formatted::parts","value":"&'a [num::flt2dec::Part<'a>]","parent":{"krate":0,"index":11402},"children":[],"decl_id":null,"docs":" Formatted parts to be rendered after a sign and optional zero padding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":202205,"byte_end":202208,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"len","qualname":"<Formatted<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":202604,"byte_end":202609,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"name":"write","qualname":"<Formatted<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5723},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207687,"byte_end":207692,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"Minus","qualname":"::num::flt2dec::Sign::Minus","value":"Sign::Minus","parent":{"krate":0,"index":11408},"children":[],"decl_id":null,"docs":" Prints `-` only for the negative non-zero values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5725},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207813,"byte_end":207821,"line_start":376,"line_end":376,"column_start":5,"column_end":13},"name":"MinusRaw","qualname":"::num::flt2dec::Sign::MinusRaw","value":"Sign::MinusRaw","parent":{"krate":0,"index":11408},"children":[],"decl_id":null,"docs":" Prints `-` only for any negative values (including the negative zero).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5727},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207931,"byte_end":207940,"line_start":378,"line_end":378,"column_start":5,"column_end":14},"name":"MinusPlus","qualname":"::num::flt2dec::Sign::MinusPlus","value":"Sign::MinusPlus","parent":{"krate":0,"index":11408},"children":[],"decl_id":null,"docs":" Prints `-` for the negative non-zero values, or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5729},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":208070,"byte_end":208082,"line_start":380,"line_end":380,"column_start":5,"column_end":17},"name":"MinusPlusRaw","qualname":"::num::flt2dec::Sign::MinusPlusRaw","value":"Sign::MinusPlusRaw","parent":{"krate":0,"index":11408},"children":[],"decl_id":null,"docs":" Prints `-` for any negative values (including the negative zero), or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11408},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207618,"byte_end":207622,"line_start":372,"line_end":372,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::flt2dec::Sign","value":"Sign::{Minus, MinusRaw, MinusPlus, MinusPlusRaw}","parent":null,"children":[{"krate":0,"index":5723},{"krate":0,"index":5725},{"krate":0,"index":5727},{"krate":0,"index":5729}],"decl_id":null,"docs":" Sign formatting options.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207609,"byte_end":208114,"line_start":372,"line_end":381,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":207609,"byte_end":208114,"line_start":372,"line_end":381,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":209977,"byte_end":209992,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"to_shortest_str","qualname":"::num::flt2dec::to_shortest_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with at least\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":212530,"byte_end":212549,"line_start":470,"line_end":470,"column_start":8,"column_end":27},"name":"to_shortest_exp_str","qualname":"::num::flt2dec::to_shortest_exp_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, dec_bounds: (i16, i16), upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form or\n the exponential form, depending on the resulting exponent. The result is\n stored to the supplied parts array while utilizing given byte buffer\n as a scratch. `upper` is used to determine the case of non-finite values\n (`inf` and `nan`) or the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":216337,"byte_end":216353,"line_start":549,"line_end":549,"column_start":8,"column_end":24},"name":"to_exact_exp_str","qualname":"::num::flt2dec::to_exact_exp_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, ndigits: usize, upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the exponential form with\n exactly given number of significant digits. The result is stored to\n the supplied parts array while utilizing given byte buffer as a scratch.\n `upper` is used to determine the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":219061,"byte_end":219079,"line_start":605,"line_end":605,"column_start":8,"column_end":26},"name":"to_exact_fixed_str","qualname":"::num::flt2dec::to_exact_fixed_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with exactly\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":564},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dec2flt","qualname":"::num::dec2flt","value":"libcore/num/dec2flt/mod.rs","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":644},{"krate":0,"index":656},{"krate":0,"index":680},{"krate":0,"index":850},{"krate":0,"index":874},{"krate":0,"index":11522},{"krate":0,"index":11528},{"krate":0,"index":11534},{"krate":0,"index":11550},{"krate":0,"index":11546},{"krate":0,"index":11540},{"krate":0,"index":11536},{"krate":0,"index":11554},{"krate":0,"index":11568},{"krate":0,"index":11564},{"krate":0,"index":11560},{"krate":0,"index":11556},{"krate":0,"index":876},{"krate":0,"index":880},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898}],"decl_id":null,"docs":" Converting decimal strings into IEEE 754 binary floating point numbers.","sig":null,"attributes":[{"value":"unstable(feature = \"dec2flt\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":278214,"byte_end":278339,"line_start":91,"line_end":93,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":289000,"byte_end":289013,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"set_precision","qualname":"::num::dec2flt::algorithm::fpu_precision::set_precision","value":"fn <T> () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":291908,"byte_end":291917,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"fast_path","qualname":"::num::dec2flt::algorithm::fast_path","value":"fn <T> (integral: &[u8], fractional: &[u8], e: i64) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" The fast path of Bellerophon using machine-sized integers and floats.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":294503,"byte_end":294514,"line_start":155,"line_end":155,"column_start":8,"column_end":19},"name":"bellerophon","qualname":"::num::dec2flt::algorithm::bellerophon","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Algorithm Bellerophon is trivial code justified by non-trivial numeric analysis.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":300311,"byte_end":300322,"line_start":287,"line_end":287,"column_start":8,"column_end":19},"name":"algorithm_m","qualname":"::num::dec2flt::algorithm::algorithm_m","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Conceptually, Algorithm M is the simplest way to convert a decimal to a float.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":646},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":305975,"byte_end":305980,"line_start":14,"line_end":14,"column_start":11,"column_end":16},"name":"MIN_E","qualname":"::num::dec2flt::table::MIN_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":648},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":306004,"byte_end":306009,"line_start":15,"line_end":15,"column_start":11,"column_end":16},"name":"MAX_E","qualname":"::num::dec2flt::table::MAX_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":650},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":306033,"byte_end":306039,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"POWERS","qualname":"::num::dec2flt::table::POWERS","value":"([u64; 611], [i16; 611])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":652},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":326537,"byte_end":326553,"line_start":1243,"line_end":1243,"column_start":11,"column_end":27},"name":"F32_SHORT_POWERS","qualname":"::num::dec2flt::table::F32_SHORT_POWERS","value":"[f32; 11]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":654},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":326683,"byte_end":326699,"line_start":1257,"line_end":1257,"column_start":11,"column_end":27},"name":"F64_SHORT_POWERS","qualname":"::num::dec2flt::table::F64_SHORT_POWERS","value":"[f64; 23]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":327828,"byte_end":327849,"line_start":21,"line_end":21,"column_start":8,"column_end":29},"name":"compare_with_half_ulp","qualname":"::num::dec2flt::num::compare_with_half_ulp","value":"fn (f: &Big, ones_place: usize) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Test whether truncating all bits less significant than `ones_place` introduces\n a relative error less, equal, or greater than 0.5 ULP.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":328892,"byte_end":328910,"line_start":49,"line_end":49,"column_start":8,"column_end":26},"name":"from_str_unchecked","qualname":"::num::dec2flt::num::from_str_unchecked","value":"fn <'a, T> (bytes: T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Convert an ASCII string containing only decimal digits to a `u64`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":329242,"byte_end":329255,"line_start":60,"line_end":60,"column_start":8,"column_end":21},"name":"digits_to_big","qualname":"::num::dec2flt::num::digits_to_big","value":"fn (integral: &[u8], fractional: &[u8]) -> Big","parent":null,"children":[],"decl_id":null,"docs":" Convert a string of ASCII digits into a bignum.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":329572,"byte_end":329578,"line_start":71,"line_end":71,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::num::dec2flt::num::to_u64","value":"fn (x: &Big) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Unwraps a bignum into a 64 bit integer. Panics if the number is too large.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":329948,"byte_end":329956,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::num::dec2flt::num::get_bits","value":"fn (x: &Big, start: usize, end: usize) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extract a range of bits.\n Index 0 is the least significant bit and the range is half-open as usual.\n Panics if asked to extract more bits than fit into the return type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rawfp","qualname":"::num::dec2flt::rawfp","value":"libcore/num/dec2flt/rawfp.rs","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":690},{"krate":0,"index":696},{"krate":0,"index":706},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":11428},{"krate":0,"index":11438},{"krate":0,"index":11434},{"krate":0,"index":11430},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":812},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848}],"decl_id":null,"docs":" Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\n Normal floating point numbers have a canonical representation as (frac, exp) such that the\n value is 2<sup>exp</sup> * (1 + sum(frac[N-i] / 2<sup>i</sup>)) where N is the number of bits.\n Subnormals are slightly different and weird, but the same principle applies.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11428},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332097,"byte_end":332105,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"Unpacked","qualname":"::num::dec2flt::rawfp::Unpacked","value":"Unpacked { sig, k }","parent":null,"children":[{"krate":0,"index":5731},{"krate":0,"index":5733}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332086,"byte_end":332143,"line_start":41,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":5731},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332116,"byte_end":332119,"line_start":42,"line_end":42,"column_start":9,"column_end":12},"name":"sig","qualname":"::num::dec2flt::rawfp::Unpacked::sig","value":"u64","parent":{"krate":0,"index":11428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5733},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332134,"byte_end":332135,"line_start":43,"line_end":43,"column_start":9,"column_end":10},"name":"k","qualname":"::num::dec2flt::rawfp::Unpacked::k","value":"i16","parent":{"krate":0,"index":11428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332172,"byte_end":332175,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Unpacked>::new","value":"fn (sig: u64, k: i16) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":740},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332622,"byte_end":332630,"line_start":58,"line_end":58,"column_start":11,"column_end":19},"name":"RawFloat","qualname":"::num::dec2flt::rawfp::RawFloat","value":"RawFloat: Float + Copy + Debug + LowerExp + Mul<Output = Self> + Div<Output = Self> +\nNeg<Output = Self>","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784}],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":742},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332820,"byte_end":332828,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::num::dec2flt::rawfp::RawFloat::INFINITY","value":"Self","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":744},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332846,"byte_end":332849,"line_start":70,"line_end":70,"column_start":11,"column_end":14},"name":"NAN","qualname":"::num::dec2flt::rawfp::RawFloat::NAN","value":"Self","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":746},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332867,"byte_end":332871,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO","value":"Self","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":748},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332938,"byte_end":332945,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"RawBits","qualname":"::num::dec2flt::rawfp::RawFloat::RawBits","value":"type RawBits: Add<Output = Self::RawBits> + From<u8> + TryFrom<u64>;","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" Same as `Float::Bits` with extra traits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333071,"byte_end":333085,"line_start":77,"line_end":77,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::num::dec2flt::rawfp::RawFloat::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333145,"byte_end":333151,"line_start":80,"line_end":80,"column_start":8,"column_end":14},"name":"unpack","qualname":"::num::dec2flt::rawfp::RawFloat::unpack","value":"fn (self) -> Unpacked","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333365,"byte_end":333373,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"from_int","qualname":"::num::dec2flt::rawfp::RawFloat::from_int","value":"fn (x: u64) -> Self","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333511,"byte_end":333527,"line_start":88,"line_end":88,"column_start":8,"column_end":24},"name":"short_fast_pow10","qualname":"::num::dec2flt::rawfp::RawFloat::short_fast_pow10","value":"fn (e: usize) -> Self","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":758},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333679,"byte_end":333699,"line_start":92,"line_end":92,"column_start":11,"column_end":31},"name":"CEIL_LOG5_OF_MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::CEIL_LOG5_OF_MAX_SIG","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" What the name says. It's easier to hard code than juggling intrinsics and\n hoping LLVM constant folds it.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":760},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":333911,"byte_end":333928,"line_start":96,"line_end":96,"column_start":11,"column_end":28},"name":"MAX_NORMAL_DIGITS","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_NORMAL_DIGITS","value":"usize","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" subnormals. Probably the decimal exponent of the maximum normal value, hence the name.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":762},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334086,"byte_end":334096,"line_start":100,"line_end":100,"column_start":11,"column_end":21},"name":"INF_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::INF_CUTOFF","value":"i64","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value greater than this, the number\n is certainly rounded to infinity.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":764},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334245,"byte_end":334256,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"ZERO_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO_CUTOFF","value":"i64","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value less than this, the number\n is certainly rounded to zero.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":766},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334318,"byte_end":334326,"line_start":107,"line_end":107,"column_start":11,"column_end":19},"name":"EXP_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXP_BITS","value":"u8","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The number of bits in the exponent.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":768},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334418,"byte_end":334426,"line_start":110,"line_end":110,"column_start":11,"column_end":19},"name":"SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::SIG_BITS","value":"u8","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *including* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":770},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334518,"byte_end":334535,"line_start":113,"line_end":113,"column_start":11,"column_end":28},"name":"EXPLICIT_SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXPLICIT_SIG_BITS","value":"u8","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *excluding* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":772},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334617,"byte_end":334624,"line_start":116,"line_end":116,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The maximum legal exponent in fractional representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":774},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334729,"byte_end":334736,"line_start":119,"line_end":119,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The minimum legal exponent in fractional representation, excluding subnormals.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":776},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334831,"byte_end":334842,"line_start":122,"line_end":122,"column_start":11,"column_end":22},"name":"MAX_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP_INT","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" `MAX_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":778},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":334911,"byte_end":334926,"line_start":125,"line_end":125,"column_start":11,"column_end":26},"name":"MAX_ENCODED_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_ENCODED_EXP","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" `MAX_EXP` encoded (i.e., with offset bias)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":780},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":335021,"byte_end":335032,"line_start":128,"line_end":128,"column_start":11,"column_end":22},"name":"MIN_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP_INT","value":"i16","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" `MIN_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":782},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":335121,"byte_end":335128,"line_start":131,"line_end":131,"column_start":11,"column_end":18},"name":"MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_SIG","value":"u64","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The maximum normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":784},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":335217,"byte_end":335224,"line_start":134,"line_end":134,"column_start":11,"column_end":18},"name":"MIN_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_SIG","value":"u64","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":" The minimal normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":338562,"byte_end":338573,"line_start":242,"line_end":242,"column_start":8,"column_end":19},"name":"fp_to_float","qualname":"::num::dec2flt::rawfp::fp_to_float","value":"fn <T> (x: Fp) -> T","parent":null,"children":[],"decl_id":null,"docs":" Convert an Fp to the closest machine float type.\n Does not handle subnormal results.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":838},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":339058,"byte_end":339070,"line_start":257,"line_end":257,"column_start":8,"column_end":20},"name":"round_normal","qualname":"::num::dec2flt::rawfp::round_normal","value":"fn <T> (x: Fp) -> Unpacked","parent":null,"children":[],"decl_id":null,"docs":" Round the 64-bit significand to T::SIG_BITS bits with half-to-even.\n Does not handle exponent overflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":339738,"byte_end":339751,"line_start":277,"line_end":277,"column_start":8,"column_end":21},"name":"encode_normal","qualname":"::num::dec2flt::rawfp::encode_normal","value":"fn <T> (x: Unpacked) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inverse of `RawFloat::unpack()` for normalized numbers.\n Panics if the significand or exponent are not valid for normalized numbers.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":842},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":340505,"byte_end":340521,"line_start":292,"line_end":292,"column_start":8,"column_end":24},"name":"encode_subnormal","qualname":"::num::dec2flt::rawfp::encode_subnormal","value":"fn <T> (significand: u64) -> T","parent":null,"children":[],"decl_id":null,"docs":" Construct a subnormal. A mantissa of 0 is allowed and constructs zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":844},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":340897,"byte_end":340906,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"big_to_fp","qualname":"::num::dec2flt::rawfp::big_to_fp","value":"fn (f: &Big) -> Fp","parent":null,"children":[],"decl_id":null,"docs":" Approximate a bignum with an Fp. Rounds within 0.5 ULP with half-to-even.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":846},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":341869,"byte_end":341879,"line_start":321,"line_end":321,"column_start":8,"column_end":18},"name":"prev_float","qualname":"::num::dec2flt::rawfp::prev_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Find the largest floating point number strictly smaller than the argument.\n Does not handle subnormals, zero, or exponent underflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":848},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":342780,"byte_end":342790,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"next_float","qualname":"::num::dec2flt::rawfp::next_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":850},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::num::dec2flt::parse","value":"libcore/num/dec2flt/parse.rs","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":11484},{"krate":0,"index":11486},{"krate":0,"index":11490},{"krate":0,"index":11502},{"krate":0,"index":11496},{"krate":0,"index":11492},{"krate":0,"index":864},{"krate":0,"index":11506},{"krate":0,"index":11518},{"krate":0,"index":11512},{"krate":0,"index":11508},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"decl_id":null,"docs":" Validating and decomposing a decimal string of the form:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5779},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345010,"byte_end":345018,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Positive","qualname":"::num::dec2flt::parse::Sign::Positive","value":"Sign::Positive","parent":{"krate":0,"index":11484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5781},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345024,"byte_end":345032,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"Negative","qualname":"::num::dec2flt::parse::Sign::Negative","value":"Sign::Negative","parent":{"krate":0,"index":11484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11484},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":344999,"byte_end":345003,"line_start":27,"line_end":27,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::dec2flt::parse::Sign","value":"Sign::{Positive, Negative}","parent":null,"children":[{"krate":0,"index":5779},{"krate":0,"index":5781}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11490},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345127,"byte_end":345134,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::num::dec2flt::parse::Decimal","value":"Decimal { integral, fractional, exp }","parent":null,"children":[{"krate":0,"index":5783},{"krate":0,"index":5785},{"krate":0,"index":5787}],"decl_id":null,"docs":" The interesting parts of a decimal string.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345116,"byte_end":345297,"line_start":34,"line_end":39,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":5783},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345149,"byte_end":345157,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"name":"integral","qualname":"::num::dec2flt::parse::Decimal::integral","value":"&'a [u8]","parent":{"krate":0,"index":11490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5785},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345177,"byte_end":345187,"line_start":36,"line_end":36,"column_start":9,"column_end":19},"name":"fractional","qualname":"::num::dec2flt::parse::Decimal::fractional","value":"&'a [u8]","parent":{"krate":0,"index":11490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5787},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345286,"byte_end":345289,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::dec2flt::parse::Decimal::exp","value":"i64","parent":{"krate":0,"index":11490},"children":[],"decl_id":null,"docs":" The decimal exponent, guaranteed to have fewer than 18 decimal digits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345333,"byte_end":345336,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal<'a>>::new","value":"fn (integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5797},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345551,"byte_end":345556,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Valid","qualname":"::num::dec2flt::parse::ParseResult::Valid","value":"ParseResult::Valid(Decimal<'a>)","parent":{"krate":0,"index":11506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5801},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345575,"byte_end":345588,"line_start":50,"line_end":50,"column_start":5,"column_end":18},"name":"ShortcutToInf","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToInf","value":"ParseResult::ShortcutToInf","parent":{"krate":0,"index":11506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5803},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345594,"byte_end":345608,"line_start":51,"line_end":51,"column_start":5,"column_end":19},"name":"ShortcutToZero","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToZero","value":"ParseResult::ShortcutToZero","parent":{"krate":0,"index":11506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5805},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345614,"byte_end":345621,"line_start":52,"line_end":52,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::num::dec2flt::parse::ParseResult::Invalid","value":"ParseResult::Invalid","parent":{"krate":0,"index":11506},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11506},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345529,"byte_end":345540,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::num::dec2flt::parse::ParseResult","value":"ParseResult::{Valid, ShortcutToInf, ShortcutToZero, Invalid}","parent":null,"children":[{"krate":0,"index":5797},{"krate":0,"index":5801},{"krate":0,"index":5803},{"krate":0,"index":5805}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345520,"byte_end":345624,"line_start":48,"line_end":53,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":868},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345805,"byte_end":345818,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"parse_decimal","qualname":"::num::dec2flt::parse::parse_decimal","value":"fn (s: &str) -> ParseResult","parent":null,"children":[],"decl_id":null,"docs":" Check if the input string is a valid floating point number and if so, locate the integral\n part, the fractional part, and the exponent in it. Does not handle signs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11534},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280249,"byte_end":280264,"line_start":159,"line_end":159,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::num::dec2flt::ParseFloatError","value":"ParseFloatError {  }","parent":null,"children":[{"krate":0,"index":5815}],"decl_id":null,"docs":" An error which can be returned when parsing a float.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280192,"byte_end":280237,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280238,"byte_end":280293,"line_start":159,"line_end":161,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280644,"byte_end":280657,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseFloatError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":900},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bignum","qualname":"::num::bignum","value":"libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":916},{"krate":0,"index":11572},{"krate":0,"index":11582},{"krate":0,"index":11592},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":11602},{"krate":0,"index":11604},{"krate":0,"index":11668},{"krate":0,"index":11672},{"krate":0,"index":11674},{"krate":0,"index":11678},{"krate":0,"index":11684},{"krate":0,"index":11688},{"krate":0,"index":924}],"decl_id":null,"docs":" Custom arbitrary-precision number (bignum) implementation.","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_bignum\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":349684,"byte_end":349821,"line_start":25,"line_end":27,"column_start":1,"column_end":26}},{"value":"macro_use","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":349822,"byte_end":349835,"line_start":28,"line_end":28,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":906},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":349920,"byte_end":349927,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"FullOps","qualname":"::num::bignum::FullOps","value":"FullOps: Sized","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914}],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":350080,"byte_end":350088,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"full_add","qualname":"::num::bignum::FullOps::full_add","value":"fn (self, other: Self, carry: bool) -> (bool, Self)","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":350294,"byte_end":350302,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"full_mul","qualname":"::num::bignum::FullOps::full_mul","value":"fn (self, other: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":350517,"byte_end":350529,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"name":"full_mul_add","qualname":"::num::bignum::FullOps::full_mul_add","value":"fn (self, other: Self, other2: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":350769,"byte_end":350781,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"full_div_rem","qualname":"::num::bignum::FullOps::full_div_rem","value":"fn (self, other: Self, borrow: Self) -> (Self, Self)","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":922},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":368054,"byte_end":368061,"line_start":487,"line_end":487,"column_start":10,"column_end":17},"name":"Digit32","qualname":"::num::bignum::Digit32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The digit type for `Big32x40`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":924},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":368178,"byte_end":368183,"line_start":493,"line_end":493,"column_start":9,"column_end":14},"name":"tests","qualname":"::num::bignum::tests","value":"libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":11694},{"krate":0,"index":11696},{"krate":0,"index":11760},{"krate":0,"index":11764},{"krate":0,"index":11766},{"krate":0,"index":11770},{"krate":0,"index":11776},{"krate":0,"index":11780}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":926},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"diy_float","qualname":"::num::diy_float","value":"libcore/num/diy_float.rs","parent":null,"children":[{"krate":0,"index":11786},{"krate":0,"index":11796},{"krate":0,"index":11792},{"krate":0,"index":11788},{"krate":0,"index":928}],"decl_id":null,"docs":" Extended precision \"soft float\", for internal use only.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_diy_float\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":368906,"byte_end":369046,"line_start":16,"line_end":18,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":11786},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369169,"byte_end":369171,"line_start":23,"line_end":23,"column_start":12,"column_end":14},"name":"Fp","qualname":"::num::diy_float::Fp","value":"Fp { f, e }","parent":null,"children":[{"krate":0,"index":5881},{"krate":0,"index":5883}],"decl_id":null,"docs":" A custom 64-bit floating point type, representing `f * 2^e`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369158,"byte_end":369269,"line_start":23,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":5881},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369212,"byte_end":369213,"line_start":25,"line_end":25,"column_start":9,"column_end":10},"name":"f","qualname":"::num::diy_float::Fp::f","value":"u64","parent":{"krate":0,"index":11786},"children":[],"decl_id":null,"docs":" The integer mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5883},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369260,"byte_end":369261,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"e","qualname":"::num::diy_float::Fp::e","value":"i16","parent":{"krate":0,"index":11786},"children":[],"decl_id":null,"docs":" The exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369359,"byte_end":369362,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"mul","qualname":"<Fp>::mul","value":"fn (&self, other: &Fp) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369950,"byte_end":369959,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Fp>::normalize","value":"fn (&self) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":370749,"byte_end":370761,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"normalize_to","qualname":"<Fp>::normalize_to","value":"fn (&self, e: i16) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137567,"byte_end":137575,"line_start":2262,"line_end":2262,"column_start":12,"column_end":20},"name":"is_ascii","qualname":"<u8>::is_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":138212,"byte_end":138230,"line_start":2284,"line_end":2284,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<u8>::to_ascii_uppercase","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":138884,"byte_end":138902,"line_start":2306,"line_end":2306,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<u8>::to_ascii_lowercase","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":139419,"byte_end":139439,"line_start":2324,"line_end":2324,"column_start":12,"column_end":32},"name":"eq_ignore_ascii_case","qualname":"<u8>::eq_ignore_ascii_case","value":"fn (&self, other: &u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140184,"byte_end":140204,"line_start":2349,"line_end":2349,"column_start":12,"column_end":32},"name":"make_ascii_uppercase","qualname":"<u8>::make_ascii_uppercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140912,"byte_end":140932,"line_start":2374,"line_end":2374,"column_start":12,"column_end":32},"name":"make_ascii_lowercase","qualname":"<u8>::make_ascii_lowercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":142004,"byte_end":142023,"line_start":2410,"line_end":2410,"column_start":12,"column_end":31},"name":"is_ascii_alphabetic","qualname":"<u8>::is_ascii_alphabetic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143165,"byte_end":143183,"line_start":2448,"line_end":2448,"column_start":12,"column_end":30},"name":"is_ascii_uppercase","qualname":"<u8>::is_ascii_uppercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144315,"byte_end":144333,"line_start":2486,"line_end":2486,"column_start":12,"column_end":30},"name":"is_ascii_lowercase","qualname":"<u8>::is_ascii_lowercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":145582,"byte_end":145603,"line_start":2527,"line_end":2527,"column_start":12,"column_end":33},"name":"is_ascii_alphanumeric","qualname":"<u8>::is_ascii_alphanumeric","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":146707,"byte_end":146721,"line_start":2565,"line_end":2565,"column_start":12,"column_end":26},"name":"is_ascii_digit","qualname":"<u8>::is_ascii_digit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":147926,"byte_end":147943,"line_start":2606,"line_end":2606,"column_start":12,"column_end":29},"name":"is_ascii_hexdigit","qualname":"<u8>::is_ascii_hexdigit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":149273,"byte_end":149293,"line_start":2648,"line_end":2648,"column_start":12,"column_end":32},"name":"is_ascii_punctuation","qualname":"<u8>::is_ascii_punctuation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":150396,"byte_end":150412,"line_start":2686,"line_end":2686,"column_start":12,"column_end":28},"name":"is_ascii_graphic","qualname":"<u8>::is_ascii_graphic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":152590,"byte_end":152609,"line_start":2741,"line_end":2741,"column_start":12,"column_end":31},"name":"is_ascii_whitespace","qualname":"<u8>::is_ascii_whitespace","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":153852,"byte_end":153868,"line_start":2781,"line_end":2781,"column_start":12,"column_end":28},"name":"is_ascii_control","qualname":"<u8>::is_ascii_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":137159,"byte_end":137173,"line_start":2244,"line_end":2244,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5897},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155650,"byte_end":155653,"line_start":2858,"line_end":2858,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::FpCategory::Nan","value":"FpCategory::Nan","parent":{"krate":0,"index":12938},"children":[],"decl_id":null,"docs":" \"Not a Number\", often obtained by dividing by zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155600,"byte_end":155645,"line_start":2857,"line_end":2857,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5899},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155749,"byte_end":155757,"line_start":2862,"line_end":2862,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::FpCategory::Infinite","value":"FpCategory::Infinite","parent":{"krate":0,"index":12938},"children":[],"decl_id":null,"docs":" Positive or negative infinity.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155699,"byte_end":155744,"line_start":2861,"line_end":2861,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5901},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155849,"byte_end":155853,"line_start":2866,"line_end":2866,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::FpCategory::Zero","value":"FpCategory::Zero","parent":{"krate":0,"index":12938},"children":[],"decl_id":null,"docs":" Positive or negative zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155799,"byte_end":155844,"line_start":2865,"line_end":2865,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5903},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155992,"byte_end":156001,"line_start":2870,"line_end":2870,"column_start":5,"column_end":14},"name":"Subnormal","qualname":"::num::FpCategory::Subnormal","value":"FpCategory::Subnormal","parent":{"krate":0,"index":12938},"children":[],"decl_id":null,"docs":" De-normalized floating point representation (less precise than `Normal`).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155942,"byte_end":155987,"line_start":2869,"line_end":2869,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5905},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156099,"byte_end":156105,"line_start":2874,"line_end":2874,"column_start":5,"column_end":11},"name":"Normal","qualname":"::num::FpCategory::Normal","value":"FpCategory::Normal","parent":{"krate":0,"index":12938},"children":[],"decl_id":null,"docs":" A regular floating point number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156049,"byte_end":156094,"line_start":2873,"line_end":2873,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":12938},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155523,"byte_end":155533,"line_start":2855,"line_end":2855,"column_start":10,"column_end":20},"name":"FpCategory","qualname":"::num::FpCategory","value":"FpCategory::{Nan, Infinite, Zero, Subnormal, Normal}","parent":null,"children":[{"krate":0,"index":5897},{"krate":0,"index":5899},{"krate":0,"index":5901},{"krate":0,"index":5903},{"krate":0,"index":5905}],"decl_id":null,"docs":" A classification of floating point numbers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155468,"byte_end":155513,"line_start":2854,"line_end":2854,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155514,"byte_end":156108,"line_start":2855,"line_end":2875,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155514,"byte_end":156108,"line_start":2855,"line_end":2875,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":998},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156316,"byte_end":156321,"line_start":2882,"line_end":2882,"column_start":11,"column_end":16},"name":"Float","qualname":"::num::Float","value":"Float: Sized","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034}],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":1000},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156449,"byte_end":156453,"line_start":2885,"line_end":2885,"column_start":10,"column_end":14},"name":"Bits","qualname":"::num::Float::Bits","value":"type Bits;","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" Type used by `to_bits` and `from_bits`.\n","sig":null,"attributes":[{"value":"stable(feature = \"core_float_bits\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156383,"byte_end":156439,"line_start":2884,"line_end":2884,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156577,"byte_end":156583,"line_start":2889,"line_end":2889,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::num::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156763,"byte_end":156774,"line_start":2893,"line_end":2893,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::num::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156913,"byte_end":156922,"line_start":2896,"line_end":2896,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::num::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":157077,"byte_end":157086,"line_start":2899,"line_end":2899,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::num::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":157216,"byte_end":157224,"line_start":2902,"line_end":2902,"column_start":8,"column_end":16},"name":"classify","qualname":"::num::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":157414,"byte_end":157417,"line_start":2907,"line_end":2907,"column_start":8,"column_end":11},"name":"abs","qualname":"::num::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":157766,"byte_end":157772,"line_start":2914,"line_end":2914,"column_start":8,"column_end":14},"name":"signum","qualname":"::num::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":157941,"byte_end":157957,"line_start":2919,"line_end":2919,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::num::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158129,"byte_end":158145,"line_start":2923,"line_end":2923,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::num::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158276,"byte_end":158281,"line_start":2927,"line_end":2927,"column_start":8,"column_end":13},"name":"recip","qualname":"::num::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158472,"byte_end":158476,"line_start":2933,"line_end":2933,"column_start":8,"column_end":12},"name":"powi","qualname":"::num::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158606,"byte_end":158616,"line_start":2937,"line_end":2937,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::num::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158737,"byte_end":158747,"line_start":2940,"line_end":2940,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::num::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":158881,"byte_end":158884,"line_start":2944,"line_end":2944,"column_start":8,"column_end":11},"name":"max","qualname":"::num::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159030,"byte_end":159033,"line_start":2947,"line_end":2947,"column_start":8,"column_end":11},"name":"min","qualname":"::num::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159167,"byte_end":159174,"line_start":2951,"line_end":2951,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::num::Float::to_bits","value":"fn (self) -> Self::Bits","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159302,"byte_end":159311,"line_start":2954,"line_end":2954,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::num::Float::from_bits","value":"fn (v: Self::Bits) -> Self","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156163,"byte_end":156305,"line_start":2879,"line_end":2881,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":13030},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159914,"byte_end":159929,"line_start":2973,"line_end":2973,"column_start":12,"column_end":27},"name":"TryFromIntError","qualname":"::num::TryFromIntError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a checked integral type conversion fails.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159822,"byte_end":159872,"line_start":2971,"line_end":2971,"column_start":1,"column_end":51}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159903,"byte_end":159934,"line_start":2973,"line_end":2973,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":160197,"byte_end":160210,"line_start":2981,"line_end":2981,"column_start":12,"column_end":25},"name":"__description","qualname":"<TryFromIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":166941,"byte_end":166950,"line_start":3194,"line_end":3194,"column_start":8,"column_end":17},"name":"min_value","qualname":"::num::FromStrRadixHelper::min_value","value":"fn () -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":166969,"byte_end":166978,"line_start":3195,"line_end":3195,"column_start":8,"column_end":17},"name":"max_value","qualname":"::num::FromStrRadixHelper::max_value","value":"fn () -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":166997,"byte_end":167005,"line_start":3196,"line_end":3196,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::num::FromStrRadixHelper::from_u32","value":"fn (u: u32) -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":167030,"byte_end":167041,"line_start":3197,"line_end":3197,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::num::FromStrRadixHelper::checked_mul","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":167085,"byte_end":167096,"line_start":3198,"line_end":3198,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::num::FromStrRadixHelper::checked_sub","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":167140,"byte_end":167151,"line_start":3199,"line_end":3199,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::num::FromStrRadixHelper::checked_add","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13810},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170574,"byte_end":170587,"line_start":3301,"line_end":3301,"column_start":12,"column_end":25},"name":"ParseIntError","qualname":"::num::ParseIntError","value":"ParseIntError {  }","parent":null,"children":[{"krate":0,"index":5911}],"decl_id":null,"docs":" An error which can be returned when parsing an integer.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170517,"byte_end":170562,"line_start":3300,"line_end":3300,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170563,"byte_end":170615,"line_start":3301,"line_end":3303,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170996,"byte_end":171009,"line_start":3319,"line_end":3319,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1114},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"libcore/prelude/mod.rs","parent":null,"children":[{"krate":0,"index":1116}],"decl_id":null,"docs":" The libcore prelude\n","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":371514,"byte_end":371567,"line_start":13,"line_end":13,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::prelude::v1","value":"libcore/prelude/v1.rs","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1128},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1152},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1172},{"krate":0,"index":1178},{"krate":0,"index":1186},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198}],"decl_id":null,"docs":" The core prelude","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":372284,"byte_end":372337,"line_start":17,"line_end":17,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1200},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"intrinsics","qualname":"::intrinsics","value":"libcore/intrinsics.rs","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206}],"decl_id":null,"docs":" rustc compiler intrinsics.","sig":null,"attributes":[{"value":"unstable(feature = \"core_intrinsics\",\n           reason =\n               \"intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":375644,"byte_end":375923,"line_start":42,"line_end":46,"column_start":1,"column_end":26}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":375924,"byte_end":375947,"line_start":47,"line_end":47,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":376861,"byte_end":376873,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"atomic_cxchg","qualname":"::intrinsics::::atomic_cxchg","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":377461,"byte_end":377477,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"atomic_cxchg_acq","qualname":"::intrinsics::::atomic_cxchg_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":378147,"byte_end":378163,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"atomic_cxchg_rel","qualname":"::intrinsics::::atomic_cxchg_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":378832,"byte_end":378851,"line_start":97,"line_end":97,"column_start":12,"column_end":31},"name":"atomic_cxchg_acqrel","qualname":"::intrinsics::::atomic_cxchg_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":379439,"byte_end":379459,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"atomic_cxchg_relaxed","qualname":"::intrinsics::::atomic_cxchg_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":380128,"byte_end":380152,"line_start":117,"line_end":117,"column_start":12,"column_end":36},"name":"atomic_cxchg_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":380821,"byte_end":380841,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"atomic_cxchg_failacq","qualname":"::intrinsics::::atomic_cxchg_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":381511,"byte_end":381539,"line_start":139,"line_end":139,"column_start":12,"column_end":40},"name":"atomic_cxchg_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":382208,"byte_end":382239,"line_start":150,"line_end":150,"column_start":12,"column_end":43},"name":"atomic_cxchg_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":382816,"byte_end":382832,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"atomic_cxchgweak","qualname":"::intrinsics::::atomic_cxchgweak","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":383409,"byte_end":383429,"line_start":169,"line_end":169,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_acq","qualname":"::intrinsics::::atomic_cxchgweak_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":384088,"byte_end":384108,"line_start":180,"line_end":180,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_rel","qualname":"::intrinsics::::atomic_cxchgweak_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":384766,"byte_end":384789,"line_start":191,"line_end":191,"column_start":12,"column_end":35},"name":"atomic_cxchgweak_acqrel","qualname":"::intrinsics::::atomic_cxchgweak_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":245},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":385366,"byte_end":385390,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_relaxed","qualname":"::intrinsics::::atomic_cxchgweak_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":386048,"byte_end":386076,"line_start":211,"line_end":211,"column_start":12,"column_end":40},"name":"atomic_cxchgweak_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":386734,"byte_end":386758,"line_start":222,"line_end":222,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_failacq","qualname":"::intrinsics::::atomic_cxchgweak_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":257},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":387417,"byte_end":387449,"line_start":233,"line_end":233,"column_start":12,"column_end":44},"name":"atomic_cxchgweak_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388107,"byte_end":388142,"line_start":244,"line_end":244,"column_start":12,"column_end":47},"name":"atomic_cxchgweak_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388581,"byte_end":388592,"line_start":252,"line_end":252,"column_start":12,"column_end":23},"name":"atomic_load","qualname":"::intrinsics::::atomic_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389009,"byte_end":389024,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"atomic_load_acq","qualname":"::intrinsics::::atomic_load_acq","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389441,"byte_end":389460,"line_start":266,"line_end":266,"column_start":12,"column_end":31},"name":"atomic_load_relaxed","qualname":"::intrinsics::::atomic_load_relaxed","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389496,"byte_end":389517,"line_start":267,"line_end":267,"column_start":12,"column_end":33},"name":"atomic_load_unordered","qualname":"::intrinsics::::atomic_load_unordered","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":281},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389948,"byte_end":389960,"line_start":275,"line_end":275,"column_start":12,"column_end":24},"name":"atomic_store","qualname":"::intrinsics::::atomic_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":390392,"byte_end":390408,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"atomic_store_rel","qualname":"::intrinsics::::atomic_store_rel","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":390840,"byte_end":390860,"line_start":289,"line_end":289,"column_start":12,"column_end":32},"name":"atomic_store_relaxed","qualname":"::intrinsics::::atomic_store_relaxed","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":390897,"byte_end":390919,"line_start":290,"line_end":290,"column_start":12,"column_end":34},"name":"atomic_store_unordered","qualname":"::intrinsics::::atomic_store_unordered","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391373,"byte_end":391384,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"atomic_xchg","qualname":"::intrinsics::::atomic_xchg","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":301},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391843,"byte_end":391858,"line_start":305,"line_end":305,"column_start":12,"column_end":27},"name":"atomic_xchg_acq","qualname":"::intrinsics::::atomic_xchg_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":305},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":392317,"byte_end":392332,"line_start":312,"line_end":312,"column_start":12,"column_end":27},"name":"atomic_xchg_rel","qualname":"::intrinsics::::atomic_xchg_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":392790,"byte_end":392808,"line_start":319,"line_end":319,"column_start":12,"column_end":30},"name":"atomic_xchg_acqrel","qualname":"::intrinsics::::atomic_xchg_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393267,"byte_end":393286,"line_start":326,"line_end":326,"column_start":12,"column_end":31},"name":"atomic_xchg_relaxed","qualname":"::intrinsics::::atomic_xchg_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393742,"byte_end":393753,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"atomic_xadd","qualname":"::intrinsics::::atomic_xadd","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394209,"byte_end":394224,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"atomic_xadd_acq","qualname":"::intrinsics::::atomic_xadd_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394680,"byte_end":394695,"line_start":348,"line_end":348,"column_start":12,"column_end":27},"name":"atomic_xadd_rel","qualname":"::intrinsics::::atomic_xadd_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":329},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":395150,"byte_end":395168,"line_start":355,"line_end":355,"column_start":12,"column_end":30},"name":"atomic_xadd_acqrel","qualname":"::intrinsics::::atomic_xadd_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":395624,"byte_end":395643,"line_start":362,"line_end":362,"column_start":12,"column_end":31},"name":"atomic_xadd_relaxed","qualname":"::intrinsics::::atomic_xadd_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":396106,"byte_end":396117,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"atomic_xsub","qualname":"::intrinsics::::atomic_xsub","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":396580,"byte_end":396595,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"atomic_xsub_acq","qualname":"::intrinsics::::atomic_xsub_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":345},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":397058,"byte_end":397073,"line_start":384,"line_end":384,"column_start":12,"column_end":27},"name":"atomic_xsub_rel","qualname":"::intrinsics::::atomic_xsub_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":397535,"byte_end":397553,"line_start":391,"line_end":391,"column_start":12,"column_end":30},"name":"atomic_xsub_acqrel","qualname":"::intrinsics::::atomic_xsub_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":353},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":398016,"byte_end":398035,"line_start":398,"line_end":398,"column_start":12,"column_end":31},"name":"atomic_xsub_relaxed","qualname":"::intrinsics::::atomic_xsub_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":357},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":398499,"byte_end":398509,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"atomic_and","qualname":"::intrinsics::::atomic_and","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":361},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":398973,"byte_end":398987,"line_start":413,"line_end":413,"column_start":12,"column_end":26},"name":"atomic_and_acq","qualname":"::intrinsics::::atomic_and_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":399451,"byte_end":399465,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"atomic_and_rel","qualname":"::intrinsics::::atomic_and_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":399928,"byte_end":399945,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"atomic_and_acqrel","qualname":"::intrinsics::::atomic_and_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":373},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":400409,"byte_end":400427,"line_start":434,"line_end":434,"column_start":12,"column_end":30},"name":"atomic_and_relaxed","qualname":"::intrinsics::::atomic_and_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":377},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":400906,"byte_end":400917,"line_start":442,"line_end":442,"column_start":12,"column_end":23},"name":"atomic_nand","qualname":"::intrinsics::::atomic_nand","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":381},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":401396,"byte_end":401411,"line_start":449,"line_end":449,"column_start":12,"column_end":27},"name":"atomic_nand_acq","qualname":"::intrinsics::::atomic_nand_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":385},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":401890,"byte_end":401905,"line_start":456,"line_end":456,"column_start":12,"column_end":27},"name":"atomic_nand_rel","qualname":"::intrinsics::::atomic_nand_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":402383,"byte_end":402401,"line_start":463,"line_end":463,"column_start":12,"column_end":30},"name":"atomic_nand_acqrel","qualname":"::intrinsics::::atomic_nand_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":393},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":402880,"byte_end":402899,"line_start":470,"line_end":470,"column_start":12,"column_end":31},"name":"atomic_nand_relaxed","qualname":"::intrinsics::::atomic_nand_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":397},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":403359,"byte_end":403368,"line_start":478,"line_end":478,"column_start":12,"column_end":21},"name":"atomic_or","qualname":"::intrinsics::::atomic_or","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":401},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":403828,"byte_end":403841,"line_start":485,"line_end":485,"column_start":12,"column_end":25},"name":"atomic_or_acq","qualname":"::intrinsics::::atomic_or_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":404301,"byte_end":404314,"line_start":492,"line_end":492,"column_start":12,"column_end":25},"name":"atomic_or_rel","qualname":"::intrinsics::::atomic_or_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":404773,"byte_end":404789,"line_start":499,"line_end":499,"column_start":12,"column_end":28},"name":"atomic_or_acqrel","qualname":"::intrinsics::::atomic_or_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":405249,"byte_end":405266,"line_start":506,"line_end":506,"column_start":12,"column_end":29},"name":"atomic_or_relaxed","qualname":"::intrinsics::::atomic_or_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":405730,"byte_end":405740,"line_start":514,"line_end":514,"column_start":12,"column_end":22},"name":"atomic_xor","qualname":"::intrinsics::::atomic_xor","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":406204,"byte_end":406218,"line_start":521,"line_end":521,"column_start":12,"column_end":26},"name":"atomic_xor_acq","qualname":"::intrinsics::::atomic_xor_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":406682,"byte_end":406696,"line_start":528,"line_end":528,"column_start":12,"column_end":26},"name":"atomic_xor_rel","qualname":"::intrinsics::::atomic_xor_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407159,"byte_end":407176,"line_start":535,"line_end":535,"column_start":12,"column_end":29},"name":"atomic_xor_acqrel","qualname":"::intrinsics::::atomic_xor_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407640,"byte_end":407658,"line_start":542,"line_end":542,"column_start":12,"column_end":30},"name":"atomic_xor_relaxed","qualname":"::intrinsics::::atomic_xor_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407701,"byte_end":407711,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"atomic_max","qualname":"::intrinsics::::atomic_max","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407753,"byte_end":407767,"line_start":545,"line_end":545,"column_start":12,"column_end":26},"name":"atomic_max_acq","qualname":"::intrinsics::::atomic_max_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407809,"byte_end":407823,"line_start":546,"line_end":546,"column_start":12,"column_end":26},"name":"atomic_max_rel","qualname":"::intrinsics::::atomic_max_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":449},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407865,"byte_end":407882,"line_start":547,"line_end":547,"column_start":12,"column_end":29},"name":"atomic_max_acqrel","qualname":"::intrinsics::::atomic_max_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407924,"byte_end":407942,"line_start":548,"line_end":548,"column_start":12,"column_end":30},"name":"atomic_max_relaxed","qualname":"::intrinsics::::atomic_max_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407985,"byte_end":407995,"line_start":550,"line_end":550,"column_start":12,"column_end":22},"name":"atomic_min","qualname":"::intrinsics::::atomic_min","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":461},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408037,"byte_end":408051,"line_start":551,"line_end":551,"column_start":12,"column_end":26},"name":"atomic_min_acq","qualname":"::intrinsics::::atomic_min_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":465},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408093,"byte_end":408107,"line_start":552,"line_end":552,"column_start":12,"column_end":26},"name":"atomic_min_rel","qualname":"::intrinsics::::atomic_min_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":469},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408149,"byte_end":408166,"line_start":553,"line_end":553,"column_start":12,"column_end":29},"name":"atomic_min_acqrel","qualname":"::intrinsics::::atomic_min_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":473},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408208,"byte_end":408226,"line_start":554,"line_end":554,"column_start":12,"column_end":30},"name":"atomic_min_relaxed","qualname":"::intrinsics::::atomic_min_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":477},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408269,"byte_end":408280,"line_start":556,"line_end":556,"column_start":12,"column_end":23},"name":"atomic_umin","qualname":"::intrinsics::::atomic_umin","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":481},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408322,"byte_end":408337,"line_start":557,"line_end":557,"column_start":12,"column_end":27},"name":"atomic_umin_acq","qualname":"::intrinsics::::atomic_umin_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":485},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408379,"byte_end":408394,"line_start":558,"line_end":558,"column_start":12,"column_end":27},"name":"atomic_umin_rel","qualname":"::intrinsics::::atomic_umin_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408436,"byte_end":408454,"line_start":559,"line_end":559,"column_start":12,"column_end":30},"name":"atomic_umin_acqrel","qualname":"::intrinsics::::atomic_umin_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408496,"byte_end":408515,"line_start":560,"line_end":560,"column_start":12,"column_end":31},"name":"atomic_umin_relaxed","qualname":"::intrinsics::::atomic_umin_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408558,"byte_end":408569,"line_start":562,"line_end":562,"column_start":12,"column_end":23},"name":"atomic_umax","qualname":"::intrinsics::::atomic_umax","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408611,"byte_end":408626,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"atomic_umax_acq","qualname":"::intrinsics::::atomic_umax_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408668,"byte_end":408683,"line_start":564,"line_end":564,"column_start":12,"column_end":27},"name":"atomic_umax_rel","qualname":"::intrinsics::::atomic_umax_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408725,"byte_end":408743,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"atomic_umax_acqrel","qualname":"::intrinsics::::atomic_umax_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408785,"byte_end":408804,"line_start":566,"line_end":566,"column_start":12,"column_end":31},"name":"atomic_umax_relaxed","qualname":"::intrinsics::::atomic_umax_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":409296,"byte_end":409314,"line_start":575,"line_end":575,"column_start":12,"column_end":30},"name":"prefetch_read_data","qualname":"::intrinsics::::prefetch_read_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":409810,"byte_end":409829,"line_start":583,"line_end":583,"column_start":12,"column_end":31},"name":"prefetch_write_data","qualname":"::intrinsics::::prefetch_write_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410325,"byte_end":410350,"line_start":591,"line_end":591,"column_start":12,"column_end":37},"name":"prefetch_read_instruction","qualname":"::intrinsics::::prefetch_read_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410846,"byte_end":410872,"line_start":599,"line_end":599,"column_start":12,"column_end":38},"name":"prefetch_write_instruction","qualname":"::intrinsics::::prefetch_write_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410949,"byte_end":410961,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"atomic_fence","qualname":"::intrinsics::::atomic_fence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410976,"byte_end":410992,"line_start":605,"line_end":605,"column_start":12,"column_end":28},"name":"atomic_fence_acq","qualname":"::intrinsics::::atomic_fence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411007,"byte_end":411023,"line_start":606,"line_end":606,"column_start":12,"column_end":28},"name":"atomic_fence_rel","qualname":"::intrinsics::::atomic_fence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411038,"byte_end":411057,"line_start":607,"line_end":607,"column_start":12,"column_end":31},"name":"atomic_fence_acqrel","qualname":"::intrinsics::::atomic_fence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411398,"byte_end":411422,"line_start":615,"line_end":615,"column_start":12,"column_end":36},"name":"atomic_singlethreadfence","qualname":"::intrinsics::::atomic_singlethreadfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler-only memory barrier.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411437,"byte_end":411465,"line_start":616,"line_end":616,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_acq","qualname":"::intrinsics::::atomic_singlethreadfence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411480,"byte_end":411508,"line_start":617,"line_end":617,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_rel","qualname":"::intrinsics::::atomic_singlethreadfence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411523,"byte_end":411554,"line_start":618,"line_end":618,"column_start":12,"column_end":43},"name":"atomic_singlethreadfence_acqrel","qualname":"::intrinsics::::atomic_singlethreadfence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411938,"byte_end":411948,"line_start":627,"line_end":627,"column_start":12,"column_end":22},"name":"rustc_peek","qualname":"::intrinsics::::rustc_peek","value":"fn <T> (_: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Magic intrinsic that derives its meaning from attributes\n attached to the function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412146,"byte_end":412151,"line_start":633,"line_end":633,"column_start":12,"column_end":17},"name":"abort","qualname":"::intrinsics::::abort","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Aborts the execution of the process.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412489,"byte_end":412500,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"unreachable","qualname":"::intrinsics::::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling\n further optimizations.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413037,"byte_end":413043,"line_start":651,"line_end":651,"column_start":12,"column_end":18},"name":"assume","qualname":"::intrinsics::::assume","value":"fn (b: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Informs the optimizer that a condition is always true.\n If the condition is false, the behavior is undefined.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413270,"byte_end":413276,"line_start":657,"line_end":657,"column_start":12,"column_end":18},"name":"likely","qualname":"::intrinsics::::likely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be true.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413512,"byte_end":413520,"line_start":663,"line_end":663,"column_start":12,"column_end":20},"name":"unlikely","qualname":"::intrinsics::::unlikely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be false.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413617,"byte_end":413627,"line_start":666,"line_end":666,"column_start":12,"column_end":22},"name":"breakpoint","qualname":"::intrinsics::::breakpoint","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes a breakpoint trap, for inspection by a debugger.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413823,"byte_end":413830,"line_start":672,"line_end":672,"column_start":12,"column_end":19},"name":"size_of","qualname":"::intrinsics::::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a type in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413974,"byte_end":413987,"line_start":677,"line_end":677,"column_start":12,"column_end":25},"name":"move_val_init","qualname":"::intrinsics::::move_val_init","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves a value to an uninitialized memory location.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":573},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414025,"byte_end":414037,"line_start":679,"line_end":679,"column_start":12,"column_end":24},"name":"min_align_of","qualname":"::intrinsics::::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414064,"byte_end":414077,"line_start":680,"line_end":680,"column_start":12,"column_end":25},"name":"pref_align_of","qualname":"::intrinsics::::pref_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":581},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414286,"byte_end":414297,"line_start":686,"line_end":686,"column_start":12,"column_end":23},"name":"size_of_val","qualname":"::intrinsics::::size_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of the referenced value in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":585},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414337,"byte_end":414353,"line_start":687,"line_end":687,"column_start":12,"column_end":28},"name":"min_align_of_val","qualname":"::intrinsics::::min_align_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414460,"byte_end":414469,"line_start":690,"line_end":690,"column_start":12,"column_end":21},"name":"type_name","qualname":"::intrinsics::::type_name","value":"fn <T> () -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Gets a static string slice containing the name of a type.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":593},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414703,"byte_end":414710,"line_start":695,"line_end":695,"column_start":12,"column_end":19},"name":"type_id","qualname":"::intrinsics::::type_id","value":"fn <T> () -> u64","parent":null,"children":[],"decl_id":null,"docs":" Gets an identifier which is globally unique to the specified type. This\n function will return the same value for a type regardless of whichever\n crate it is invoked in.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":415046,"byte_end":415050,"line_start":703,"line_end":703,"column_start":12,"column_end":16},"name":"init","qualname":"::intrinsics::::init","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value initialized to zero.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":601},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":415451,"byte_end":415457,"line_start":712,"line_end":712,"column_start":12,"column_end":18},"name":"uninit","qualname":"::intrinsics::::uninit","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates an uninitialized value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":423512,"byte_end":423521,"line_start":923,"line_end":923,"column_start":12,"column_end":21},"name":"transmute","qualname":"::intrinsics::::transmute","value":"fn <T, U> (e: T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Reinterprets the bits of a value of one type as another type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":423455,"byte_end":423500,"line_start":922,"line_end":922,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":423970,"byte_end":423980,"line_start":934,"line_end":934,"column_start":12,"column_end":22},"name":"needs_drop","qualname":"::intrinsics::::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the actual type given as `T` requires drop\n glue; returns `false` if the actual type provided for `T`\n implements `Copy`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":424539,"byte_end":424545,"line_start":947,"line_end":947,"column_start":12,"column_end":18},"name":"offset","qualname":"::intrinsics::::offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":425173,"byte_end":425185,"line_start":960,"line_end":960,"column_start":12,"column_end":24},"name":"arith_offset","qualname":"::intrinsics::::arith_offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer, potentially wrapping.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":426760,"byte_end":426779,"line_start":1002,"line_end":1002,"column_start":12,"column_end":31},"name":"copy_nonoverlapping","qualname":"::intrinsics::::copy_nonoverlapping","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may *not* overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":426703,"byte_end":426748,"line_start":1001,"line_end":1001,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":427796,"byte_end":427800,"line_start":1033,"line_end":1033,"column_start":12,"column_end":16},"name":"copy","qualname":"::intrinsics::::copy","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":427739,"byte_end":427784,"line_start":1032,"line_end":1032,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":428330,"byte_end":428341,"line_start":1051,"line_end":1051,"column_start":12,"column_end":23},"name":"write_bytes","qualname":"::intrinsics::::write_bytes","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n bytes of memory starting at `dst` to `val`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":428273,"byte_end":428318,"line_start":1050,"line_end":1050,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":428695,"byte_end":428730,"line_start":1059,"line_end":1059,"column_start":12,"column_end":47},"name":"volatile_copy_nonoverlapping_memory","qualname":"::intrinsics::::volatile_copy_nonoverlapping_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":429141,"byte_end":429161,"line_start":1067,"line_end":1067,"column_start":12,"column_end":32},"name":"volatile_copy_memory","qualname":"::intrinsics::::volatile_copy_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":429517,"byte_end":429536,"line_start":1074,"line_end":1074,"column_start":12,"column_end":31},"name":"volatile_set_memory","qualname":"::intrinsics::::volatile_set_memory","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":429771,"byte_end":429784,"line_start":1079,"line_end":1079,"column_start":12,"column_end":25},"name":"volatile_load","qualname":"::intrinsics::::volatile_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile load from the `src` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::read_volatile`](../../std/ptr/fn.read_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430003,"byte_end":430017,"line_start":1083,"line_end":1083,"column_start":12,"column_end":26},"name":"volatile_store","qualname":"::intrinsics::::volatile_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile store to the `dst` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430099,"byte_end":430106,"line_start":1086,"line_end":1086,"column_start":12,"column_end":19},"name":"sqrtf32","qualname":"::intrinsics::::sqrtf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f32`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430178,"byte_end":430185,"line_start":1088,"line_end":1088,"column_start":12,"column_end":19},"name":"sqrtf64","qualname":"::intrinsics::::sqrtf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f64`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430259,"byte_end":430266,"line_start":1091,"line_end":1091,"column_start":12,"column_end":19},"name":"powif32","qualname":"::intrinsics::::powif32","value":"fn (a: f32, x: i32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430347,"byte_end":430354,"line_start":1093,"line_end":1093,"column_start":12,"column_end":19},"name":"powif64","qualname":"::intrinsics::::powif64","value":"fn (a: f64, x: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430429,"byte_end":430435,"line_start":1096,"line_end":1096,"column_start":12,"column_end":18},"name":"sinf32","qualname":"::intrinsics::::sinf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430501,"byte_end":430507,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"sinf64","qualname":"::intrinsics::::sinf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430576,"byte_end":430582,"line_start":1101,"line_end":1101,"column_start":12,"column_end":18},"name":"cosf32","qualname":"::intrinsics::::cosf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430650,"byte_end":430656,"line_start":1103,"line_end":1103,"column_start":12,"column_end":18},"name":"cosf64","qualname":"::intrinsics::::cosf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430728,"byte_end":430734,"line_start":1106,"line_end":1106,"column_start":12,"column_end":18},"name":"powf32","qualname":"::intrinsics::::powf32","value":"fn (a: f32, x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an `f32` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430813,"byte_end":430819,"line_start":1108,"line_end":1108,"column_start":12,"column_end":18},"name":"powf64","qualname":"::intrinsics::::powf64","value":"fn (a: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an `f64` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430901,"byte_end":430907,"line_start":1111,"line_end":1111,"column_start":12,"column_end":18},"name":"expf32","qualname":"::intrinsics::::expf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430980,"byte_end":430986,"line_start":1113,"line_end":1113,"column_start":12,"column_end":18},"name":"expf64","qualname":"::intrinsics::::expf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431066,"byte_end":431073,"line_start":1116,"line_end":1116,"column_start":12,"column_end":19},"name":"exp2f32","qualname":"::intrinsics::::exp2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431152,"byte_end":431159,"line_start":1118,"line_end":1118,"column_start":12,"column_end":19},"name":"exp2f64","qualname":"::intrinsics::::exp2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431239,"byte_end":431245,"line_start":1121,"line_end":1121,"column_start":12,"column_end":18},"name":"logf32","qualname":"::intrinsics::::logf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431324,"byte_end":431330,"line_start":1123,"line_end":1123,"column_start":12,"column_end":18},"name":"logf64","qualname":"::intrinsics::::logf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431410,"byte_end":431418,"line_start":1126,"line_end":1126,"column_start":12,"column_end":20},"name":"log10f32","qualname":"::intrinsics::::log10f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431497,"byte_end":431505,"line_start":1128,"line_end":1128,"column_start":12,"column_end":20},"name":"log10f64","qualname":"::intrinsics::::log10f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431584,"byte_end":431591,"line_start":1131,"line_end":1131,"column_start":12,"column_end":19},"name":"log2f32","qualname":"::intrinsics::::log2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431669,"byte_end":431676,"line_start":1133,"line_end":1133,"column_start":12,"column_end":19},"name":"log2f64","qualname":"::intrinsics::::log2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431751,"byte_end":431757,"line_start":1136,"line_end":1136,"column_start":12,"column_end":18},"name":"fmaf32","qualname":"::intrinsics::::fmaf32","value":"fn (a: f32, b: f32, c: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431847,"byte_end":431853,"line_start":1138,"line_end":1138,"column_start":12,"column_end":18},"name":"fmaf64","qualname":"::intrinsics::::fmaf64","value":"fn (a: f64, b: f64, c: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431946,"byte_end":431953,"line_start":1141,"line_end":1141,"column_start":12,"column_end":19},"name":"fabsf32","qualname":"::intrinsics::::fabsf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432029,"byte_end":432036,"line_start":1143,"line_end":1143,"column_start":12,"column_end":19},"name":"fabsf64","qualname":"::intrinsics::::fabsf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432123,"byte_end":432134,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"copysignf32","qualname":"::intrinsics::::copysignf32","value":"fn (x: f32, y: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432228,"byte_end":432239,"line_start":1148,"line_end":1148,"column_start":12,"column_end":23},"name":"copysignf64","qualname":"::intrinsics::::copysignf64","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432344,"byte_end":432352,"line_start":1151,"line_end":1151,"column_start":12,"column_end":20},"name":"floorf32","qualname":"::intrinsics::::floorf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432448,"byte_end":432456,"line_start":1153,"line_end":1153,"column_start":12,"column_end":20},"name":"floorf64","qualname":"::intrinsics::::floorf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432557,"byte_end":432564,"line_start":1156,"line_end":1156,"column_start":12,"column_end":19},"name":"ceilf32","qualname":"::intrinsics::::ceilf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432664,"byte_end":432671,"line_start":1158,"line_end":1158,"column_start":12,"column_end":19},"name":"ceilf64","qualname":"::intrinsics::::ceilf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432746,"byte_end":432754,"line_start":1161,"line_end":1161,"column_start":12,"column_end":20},"name":"truncf32","qualname":"::intrinsics::::truncf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432828,"byte_end":432836,"line_start":1163,"line_end":1163,"column_start":12,"column_end":20},"name":"truncf64","qualname":"::intrinsics::::truncf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433003,"byte_end":433010,"line_start":1167,"line_end":1167,"column_start":12,"column_end":19},"name":"rintf32","qualname":"::intrinsics::::rintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433176,"byte_end":433183,"line_start":1170,"line_end":1170,"column_start":12,"column_end":19},"name":"rintf64","qualname":"::intrinsics::::rintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433261,"byte_end":433273,"line_start":1173,"line_end":1173,"column_start":12,"column_end":24},"name":"nearbyintf32","qualname":"::intrinsics::::nearbyintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433350,"byte_end":433362,"line_start":1175,"line_end":1175,"column_start":12,"column_end":24},"name":"nearbyintf64","qualname":"::intrinsics::::nearbyintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433478,"byte_end":433486,"line_start":1178,"line_end":1178,"column_start":12,"column_end":20},"name":"roundf32","qualname":"::intrinsics::::roundf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433601,"byte_end":433609,"line_start":1180,"line_end":1180,"column_start":12,"column_end":20},"name":"roundf64","qualname":"::intrinsics::::roundf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433751,"byte_end":433760,"line_start":1184,"line_end":1184,"column_start":12,"column_end":21},"name":"fadd_fast","qualname":"::intrinsics::::fadd_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float addition that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433910,"byte_end":433919,"line_start":1188,"line_end":1188,"column_start":12,"column_end":21},"name":"fsub_fast","qualname":"::intrinsics::::fsub_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float subtraction that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434072,"byte_end":434081,"line_start":1192,"line_end":1192,"column_start":12,"column_end":21},"name":"fmul_fast","qualname":"::intrinsics::::fmul_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float multiplication that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434228,"byte_end":434237,"line_start":1196,"line_end":1196,"column_start":12,"column_end":21},"name":"fdiv_fast","qualname":"::intrinsics::::fdiv_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float division that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434385,"byte_end":434394,"line_start":1200,"line_end":1200,"column_start":12,"column_end":21},"name":"frem_fast","qualname":"::intrinsics::::frem_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float remainder that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434491,"byte_end":434496,"line_start":1204,"line_end":1204,"column_start":12,"column_end":17},"name":"ctpop","qualname":"::intrinsics::::ctpop","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits set in an integer type `T`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":435164,"byte_end":435168,"line_start":1231,"line_end":1231,"column_start":12,"column_end":16},"name":"ctlz","qualname":"::intrinsics::::ctlz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":435575,"byte_end":435587,"line_start":1247,"line_end":1247,"column_start":12,"column_end":24},"name":"ctlz_nonzero","qualname":"::intrinsics::::ctlz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `ctlz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":763},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":436260,"byte_end":436264,"line_start":1274,"line_end":1274,"column_start":12,"column_end":16},"name":"cttz","qualname":"::intrinsics::::cttz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trailing unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":436673,"byte_end":436685,"line_start":1290,"line_end":1290,"column_start":12,"column_end":24},"name":"cttz_nonzero","qualname":"::intrinsics::::cttz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `cttz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":436764,"byte_end":436769,"line_start":1293,"line_end":1293,"column_start":12,"column_end":17},"name":"bswap","qualname":"::intrinsics::::bswap","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reverses the bytes in an integer type `T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437076,"byte_end":437093,"line_start":1299,"line_end":1299,"column_start":12,"column_end":29},"name":"add_with_overflow","qualname":"::intrinsics::::add_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer addition.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_add` method. For example,\n [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437416,"byte_end":437433,"line_start":1305,"line_end":1305,"column_start":12,"column_end":29},"name":"sub_with_overflow","qualname":"::intrinsics::::sub_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer subtraction\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_sub` method. For example,\n [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437759,"byte_end":437776,"line_start":1311,"line_end":1311,"column_start":12,"column_end":29},"name":"mul_with_overflow","qualname":"::intrinsics::::mul_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer multiplication\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_mul` method. For example,\n [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437945,"byte_end":437958,"line_start":1315,"line_end":1315,"column_start":12,"column_end":25},"name":"unchecked_div","qualname":"::intrinsics::::unchecked_div","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked division, resulting in undefined behavior\n where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438134,"byte_end":438147,"line_start":1318,"line_end":1318,"column_start":12,"column_end":25},"name":"unchecked_rem","qualname":"::intrinsics::::unchecked_rem","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of an unchecked division, resulting in\n undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438320,"byte_end":438333,"line_start":1322,"line_end":1322,"column_start":12,"column_end":25},"name":"unchecked_shl","qualname":"::intrinsics::::unchecked_shl","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked left shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438506,"byte_end":438519,"line_start":1325,"line_end":1325,"column_start":12,"column_end":25},"name":"unchecked_shr","qualname":"::intrinsics::::unchecked_shr","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked right shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438858,"byte_end":438873,"line_start":1331,"line_end":1331,"column_start":12,"column_end":27},"name":"overflowing_add","qualname":"::intrinsics::::overflowing_add","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_add` method. For example,\n [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":439211,"byte_end":439226,"line_start":1336,"line_end":1336,"column_start":12,"column_end":27},"name":"overflowing_sub","qualname":"::intrinsics::::overflowing_sub","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_sub` method. For example,\n [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":439564,"byte_end":439579,"line_start":1341,"line_end":1341,"column_start":12,"column_end":27},"name":"overflowing_mul","qualname":"::intrinsics::::overflowing_mul","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_mul` method. For example,\n [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":439747,"byte_end":439765,"line_start":1345,"line_end":1345,"column_start":12,"column_end":30},"name":"discriminant_value","qualname":"::intrinsics::::discriminant_value","value":"fn <T> (v: &T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the discriminant for the variant in 'v',\n cast to a `u64`; if `T` has no discriminant, returns 0.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":440292,"byte_end":440295,"line_start":1355,"line_end":1355,"column_start":12,"column_end":15},"name":"try","qualname":"::intrinsics::::try","value":"fn (f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Rust's \"try catch\" construct which invokes the function pointer `f` with\n the data pointer `data`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":441590,"byte_end":441602,"line_start":1389,"line_end":1389,"column_start":12,"column_end":24},"name":"align_offset","qualname":"::intrinsics::::align_offset","value":"fn (ptr: *const (), align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the byte offset that needs to be applied to `ptr` in order to\n make it aligned to `align`.\n If it is not possible to align `ptr`, the implementation returns\n `usize::max_value()`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":441771,"byte_end":441788,"line_start":1393,"line_end":1393,"column_start":12,"column_end":29},"name":"nontemporal_store","qualname":"::intrinsics::::nontemporal_store","value":"fn <T> (ptr: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a `!nontemporal` store according to LLVM (see their docs).\n Probably will never become stable.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1208},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"libcore/mem.rs","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1274},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1284},{"krate":0,"index":1288},{"krate":0,"index":14020},{"krate":0,"index":14022},{"krate":0,"index":1290},{"krate":0,"index":1298},{"krate":0,"index":1304},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":1318},{"krate":0,"index":1322},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1342},{"krate":0,"index":1346},{"krate":0,"index":1350}],"decl_id":null,"docs":" Basic functions for dealing with memory.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":442462,"byte_end":442508,"line_start":16,"line_end":16,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1238},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447428,"byte_end":447434,"line_start":174,"line_end":174,"column_start":8,"column_end":14},"name":"forget","qualname":"::mem::forget","value":"fn <T> (t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Leaks a value: takes ownership and \"forgets\" about the value **without running\n its destructor**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447365,"byte_end":447374,"line_start":172,"line_end":172,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447375,"byte_end":447420,"line_start":173,"line_end":173,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1240},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":451729,"byte_end":451736,"line_start":315,"line_end":315,"column_start":14,"column_end":21},"name":"size_of","qualname":"::mem::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of a type in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":451660,"byte_end":451669,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":451670,"byte_end":451715,"line_start":314,"line_end":314,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1242},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452459,"byte_end":452470,"line_start":341,"line_end":341,"column_start":8,"column_end":19},"name":"size_of_val","qualname":"::mem::size_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the pointed-to value in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452396,"byte_end":452405,"line_start":339,"line_end":339,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452406,"byte_end":452451,"line_start":340,"line_end":340,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1244},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453142,"byte_end":453154,"line_start":364,"line_end":364,"column_start":8,"column_end":20},"name":"min_align_of","qualname":"::mem::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453007,"byte_end":453016,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453017,"byte_end":453062,"line_start":362,"line_end":362,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453063,"byte_end":453134,"line_start":363,"line_end":363,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1246},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453754,"byte_end":453770,"line_start":385,"line_end":385,"column_start":8,"column_end":24},"name":"min_align_of_val","qualname":"::mem::min_align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453615,"byte_end":453624,"line_start":382,"line_end":382,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453625,"byte_end":453670,"line_start":383,"line_end":383,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453671,"byte_end":453746,"line_start":384,"line_end":384,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1248},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454349,"byte_end":454357,"line_start":406,"line_end":406,"column_start":14,"column_end":22},"name":"align_of","qualname":"::mem::align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454280,"byte_end":454289,"line_start":404,"line_end":404,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454290,"byte_end":454335,"line_start":405,"line_end":405,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1250},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454849,"byte_end":454861,"line_start":425,"line_end":425,"column_start":8,"column_end":20},"name":"align_of_val","qualname":"::mem::align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454786,"byte_end":454795,"line_start":423,"line_end":423,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454796,"byte_end":454841,"line_start":424,"line_end":424,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1252},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":457077,"byte_end":457087,"line_start":485,"line_end":485,"column_start":8,"column_end":18},"name":"needs_drop","qualname":"::mem::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether dropping values of type `T` matters.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":457008,"byte_end":457017,"line_start":483,"line_end":483,"column_start":1,"column_end":10}},{"value":"stable(feature = \"needs_drop\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":457018,"byte_end":457069,"line_start":484,"line_end":484,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1254},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":458159,"byte_end":458165,"line_start":517,"line_end":517,"column_start":15,"column_end":21},"name":"zeroed","qualname":"::mem::zeroed","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value whose bytes are all zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":458089,"byte_end":458098,"line_start":515,"line_end":515,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":458099,"byte_end":458144,"line_start":516,"line_end":516,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1256},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":461752,"byte_end":461765,"line_start":611,"line_end":611,"column_start":15,"column_end":28},"name":"uninitialized","qualname":"::mem::uninitialized","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Bypasses Rust's normal memory-initialization checks by pretending to\n produce a value of type `T`, while doing nothing at all.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":461682,"byte_end":461691,"line_start":609,"line_end":609,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":461692,"byte_end":461737,"line_start":610,"line_end":610,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1258},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":462135,"byte_end":462139,"line_start":632,"line_end":632,"column_start":8,"column_end":12},"name":"swap","qualname":"::mem::swap","value":"fn <T> (x: &mut T, y: &mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":462072,"byte_end":462081,"line_start":630,"line_end":630,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":462082,"byte_end":462127,"line_start":631,"line_end":631,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1260},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":463665,"byte_end":463672,"line_start":690,"line_end":690,"column_start":8,"column_end":15},"name":"replace","qualname":"::mem::replace","value":"fn <T> (dest: &mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at a mutable location with a new one, returning the old value, without\n deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":463602,"byte_end":463611,"line_start":688,"line_end":688,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":463612,"byte_end":463657,"line_start":689,"line_end":689,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1262},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":466107,"byte_end":466111,"line_start":787,"line_end":787,"column_start":8,"column_end":12},"name":"drop","qualname":"::mem::drop","value":"fn <T> (_x: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disposes of a value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":466044,"byte_end":466053,"line_start":785,"line_end":785,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":466054,"byte_end":466099,"line_start":786,"line_end":786,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1264},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467470,"byte_end":467484,"line_start":832,"line_end":832,"column_start":15,"column_end":29},"name":"transmute_copy","qualname":"::mem::transmute_copy","value":"fn <T, U> (src: &T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Interprets `src` as having type `&U`, and then reads `src` without moving\n the contained value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467400,"byte_end":467409,"line_start":830,"line_end":830,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467410,"byte_end":467455,"line_start":831,"line_end":831,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1266},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467759,"byte_end":467771,"line_start":840,"line_end":840,"column_start":12,"column_end":24},"name":"Discriminant","qualname":"::mem::Discriminant","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque type representing the discriminant of an enum.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467688,"byte_end":467747,"line_start":839,"line_end":839,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1288},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":469809,"byte_end":469821,"line_start":905,"line_end":905,"column_start":8,"column_end":20},"name":"discriminant","qualname":"::mem::discriminant","value":"fn <T> (v: &T) -> Discriminant<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a value uniquely identifying the enum variant in `v`.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":469742,"byte_end":469801,"line_start":904,"line_end":904,"column_start":1,"column_end":60}}]},{"kind":"Union","id":{"krate":0,"index":14020},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471366,"byte_end":471378,"line_start":950,"line_end":950,"column_start":11,"column_end":23},"name":"ManuallyDrop","qualname":"::mem::ManuallyDrop","value":"ManuallyDrop {  }","parent":null,"children":[{"krate":0,"index":5921}],"decl_id":null,"docs":" A wrapper to inhibit compiler from automatically calling `T`’s destructor.","sig":null,"attributes":[{"value":"stable(feature = \"manually_drop\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471251,"byte_end":471305,"line_start":947,"line_end":947,"column_start":1,"column_end":55}},{"value":"allow(unions_with_drop_fields)","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471306,"byte_end":471339,"line_start":948,"line_end":948,"column_start":1,"column_end":34}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471356,"byte_end":471393,"line_start":950,"line_end":950,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471690,"byte_end":471693,"line_start":963,"line_end":963,"column_start":12,"column_end":15},"name":"new","qualname":"<ManuallyDrop<T>>::new","value":"fn (value: T) -> ManuallyDrop<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":472115,"byte_end":472125,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ManuallyDrop<T>>::into_inner","value":"fn (slot: ManuallyDrop<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":472615,"byte_end":472619,"line_start":993,"line_end":993,"column_start":19,"column_end":23},"name":"drop","qualname":"<ManuallyDrop<T>>::drop","value":"fn (slot: &mut ManuallyDrop<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1350},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":475616,"byte_end":475627,"line_start":1105,"line_end":1105,"column_start":15,"column_end":26},"name":"unreachable","qualname":"::mem::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling further\n optimizations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":475538,"byte_end":475547,"line_start":1103,"line_end":1103,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"unreachable\", issue = \"43751\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":475548,"byte_end":475601,"line_start":1104,"line_end":1104,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1352},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nonzero","qualname":"::nonzero","value":"libcore/nonzero.rs","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":14024},{"krate":0,"index":14028},{"krate":0,"index":14032},{"krate":0,"index":14036},{"krate":0,"index":14040},{"krate":0,"index":14044},{"krate":0,"index":14048},{"krate":0,"index":14052},{"krate":0,"index":14056},{"krate":0,"index":14060},{"krate":0,"index":14064},{"krate":0,"index":14068},{"krate":0,"index":14072},{"krate":0,"index":14076},{"krate":0,"index":14080},{"krate":0,"index":14120},{"krate":0,"index":14116},{"krate":0,"index":14112},{"krate":0,"index":14106},{"krate":0,"index":14102},{"krate":0,"index":14090},{"krate":0,"index":14086},{"krate":0,"index":14082},{"krate":0,"index":1364},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1378},{"krate":0,"index":1382}],"decl_id":null,"docs":" Exposes the NonZero lang item which provides optimization hints.\n","sig":null,"attributes":[{"value":"unstable(feature = \"nonzero\",\n           reason = \"needs an RFC to flesh out the design\",\n           issue = \"27730\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":476211,"byte_end":476334,"line_start":12,"line_end":14,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":476453,"byte_end":476461,"line_start":19,"line_end":19,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::nonzero::Zeroable","value":"Zeroable","parent":null,"children":[{"krate":0,"index":1358}],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":476506,"byte_end":476513,"line_start":21,"line_end":21,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::nonzero::Zeroable::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14080},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477596,"byte_end":477603,"line_start":65,"line_end":65,"column_start":12,"column_end":19},"name":"NonZero","qualname":"::nonzero::NonZero","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type for raw pointers and integers that will never be\n NULL or 0 that might allow certain optimizations.\n","sig":null,"attributes":[{"value":"lang = \"non_zero\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477496,"byte_end":477516,"line_start":63,"line_end":63,"column_start":1,"column_end":21}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477585,"byte_end":477620,"line_start":65,"line_end":65,"column_start":1,"column_end":36}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477585,"byte_end":477620,"line_start":65,"line_end":65,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477958,"byte_end":477971,"line_start":74,"line_end":74,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<NonZero<T>>::new_unchecked","value":"fn (inner: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478111,"byte_end":478114,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZero<T>>::new","value":"fn (inner: T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478297,"byte_end":478300,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"get","qualname":"<NonZero<T>>::get","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1386},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"libcore/ptr.rs","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1486},{"krate":0,"index":1538},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":14122},{"krate":0,"index":14126},{"krate":0,"index":14128},{"krate":0,"index":14132},{"krate":0,"index":14136},{"krate":0,"index":14140},{"krate":0,"index":14144},{"krate":0,"index":14148},{"krate":0,"index":14152},{"krate":0,"index":14154},{"krate":0,"index":14158},{"krate":0,"index":14162},{"krate":0,"index":14166},{"krate":0,"index":14170},{"krate":0,"index":14174},{"krate":0,"index":14178},{"krate":0,"index":14180},{"krate":0,"index":14184},{"krate":0,"index":14188},{"krate":0,"index":14192},{"krate":0,"index":14196},{"krate":0,"index":14200},{"krate":0,"index":14204},{"krate":0,"index":14206},{"krate":0,"index":14210},{"krate":0,"index":14214},{"krate":0,"index":14218},{"krate":0,"index":14222},{"krate":0,"index":14226},{"krate":0,"index":14230},{"krate":0,"index":14232},{"krate":0,"index":14236},{"krate":0,"index":14240},{"krate":0,"index":14244},{"krate":0,"index":14248},{"krate":0,"index":14252},{"krate":0,"index":14256},{"krate":0,"index":14258},{"krate":0,"index":14262},{"krate":0,"index":14266},{"krate":0,"index":14270},{"krate":0,"index":14274},{"krate":0,"index":14278},{"krate":0,"index":14282},{"krate":0,"index":14284},{"krate":0,"index":14288},{"krate":0,"index":14292},{"krate":0,"index":14296},{"krate":0,"index":14300},{"krate":0,"index":14304},{"krate":0,"index":14308},{"krate":0,"index":14310},{"krate":0,"index":14314},{"krate":0,"index":14318},{"krate":0,"index":14322},{"krate":0,"index":14326},{"krate":0,"index":14330},{"krate":0,"index":14334},{"krate":0,"index":14336},{"krate":0,"index":14340},{"krate":0,"index":14344},{"krate":0,"index":14348},{"krate":0,"index":14352},{"krate":0,"index":14356},{"krate":0,"index":14360},{"krate":0,"index":14362},{"krate":0,"index":14366},{"krate":0,"index":14370},{"krate":0,"index":14374},{"krate":0,"index":14378},{"krate":0,"index":14382},{"krate":0,"index":14386},{"krate":0,"index":14388},{"krate":0,"index":14392},{"krate":0,"index":14396},{"krate":0,"index":14400},{"krate":0,"index":14404},{"krate":0,"index":14408},{"krate":0,"index":14412},{"krate":0,"index":14414},{"krate":0,"index":14418},{"krate":0,"index":14422},{"krate":0,"index":14426},{"krate":0,"index":14430},{"krate":0,"index":14434},{"krate":0,"index":14438},{"krate":0,"index":14440},{"krate":0,"index":14444},{"krate":0,"index":14448},{"krate":0,"index":14452},{"krate":0,"index":14456},{"krate":0,"index":14460},{"krate":0,"index":14464},{"krate":0,"index":14466},{"krate":0,"index":14470},{"krate":0,"index":14474},{"krate":0,"index":14478},{"krate":0,"index":14482},{"krate":0,"index":14486},{"krate":0,"index":14490},{"krate":0,"index":14492},{"krate":0,"index":14496},{"krate":0,"index":14500},{"krate":0,"index":14504},{"krate":0,"index":14508},{"krate":0,"index":14512},{"krate":0,"index":14516},{"krate":0,"index":14518},{"krate":0,"index":14522},{"krate":0,"index":14526},{"krate":0,"index":14530},{"krate":0,"index":14534},{"krate":0,"index":14538},{"krate":0,"index":14542},{"krate":0,"index":14544},{"krate":0,"index":14548},{"krate":0,"index":14552},{"krate":0,"index":14556},{"krate":0,"index":14560},{"krate":0,"index":14564},{"krate":0,"index":14568},{"krate":0,"index":14570},{"krate":0,"index":14574},{"krate":0,"index":14578},{"krate":0,"index":14582},{"krate":0,"index":14586},{"krate":0,"index":14590},{"krate":0,"index":14594},{"krate":0,"index":14596},{"krate":0,"index":14600},{"krate":0,"index":14604},{"krate":0,"index":14608},{"krate":0,"index":14612},{"krate":0,"index":14616},{"krate":0,"index":14620},{"krate":0,"index":14622},{"krate":0,"index":14626},{"krate":0,"index":14630},{"krate":0,"index":14634},{"krate":0,"index":14638},{"krate":0,"index":14642},{"krate":0,"index":14646},{"krate":0,"index":14648},{"krate":0,"index":14652},{"krate":0,"index":14656},{"krate":0,"index":14660},{"krate":0,"index":14664},{"krate":0,"index":14668},{"krate":0,"index":14672},{"krate":0,"index":14674},{"krate":0,"index":14678},{"krate":0,"index":14682},{"krate":0,"index":14686},{"krate":0,"index":14690},{"krate":0,"index":14694},{"krate":0,"index":14698},{"krate":0,"index":14700},{"krate":0,"index":14704},{"krate":0,"index":14708},{"krate":0,"index":14712},{"krate":0,"index":14716},{"krate":0,"index":14720},{"krate":0,"index":14724},{"krate":0,"index":14726},{"krate":0,"index":14730},{"krate":0,"index":14734},{"krate":0,"index":14738},{"krate":0,"index":14742},{"krate":0,"index":14746},{"krate":0,"index":14750},{"krate":0,"index":14752},{"krate":0,"index":14756},{"krate":0,"index":14760},{"krate":0,"index":14764},{"krate":0,"index":14768},{"krate":0,"index":14772},{"krate":0,"index":14776},{"krate":0,"index":14778},{"krate":0,"index":14782},{"krate":0,"index":14786},{"krate":0,"index":14790},{"krate":0,"index":14794},{"krate":0,"index":14798},{"krate":0,"index":14802},{"krate":0,"index":14804},{"krate":0,"index":14808},{"krate":0,"index":14812},{"krate":0,"index":14816},{"krate":0,"index":14820},{"krate":0,"index":14824},{"krate":0,"index":14828},{"krate":0,"index":14830},{"krate":0,"index":14834},{"krate":0,"index":14838},{"krate":0,"index":14842},{"krate":0,"index":14846},{"krate":0,"index":14850},{"krate":0,"index":14854},{"krate":0,"index":14856},{"krate":0,"index":14860},{"krate":0,"index":14864},{"krate":0,"index":14868},{"krate":0,"index":14872},{"krate":0,"index":14876},{"krate":0,"index":14880},{"krate":0,"index":14882},{"krate":0,"index":14886},{"krate":0,"index":14890},{"krate":0,"index":14894},{"krate":0,"index":14898},{"krate":0,"index":14902},{"krate":0,"index":14906},{"krate":0,"index":14908},{"krate":0,"index":14912},{"krate":0,"index":14916},{"krate":0,"index":14920},{"krate":0,"index":14924},{"krate":0,"index":14928},{"krate":0,"index":14932},{"krate":0,"index":14934},{"krate":0,"index":14938},{"krate":0,"index":14942},{"krate":0,"index":14946},{"krate":0,"index":14950},{"krate":0,"index":14954},{"krate":0,"index":14958},{"krate":0,"index":14960},{"krate":0,"index":14964},{"krate":0,"index":14968},{"krate":0,"index":14972},{"krate":0,"index":14976},{"krate":0,"index":14980},{"krate":0,"index":14984},{"krate":0,"index":14986},{"krate":0,"index":14990},{"krate":0,"index":14994},{"krate":0,"index":14998},{"krate":0,"index":15002},{"krate":0,"index":15006},{"krate":0,"index":15010},{"krate":0,"index":15012},{"krate":0,"index":15016},{"krate":0,"index":15020},{"krate":0,"index":15024},{"krate":0,"index":15028},{"krate":0,"index":15032},{"krate":0,"index":15036},{"krate":0,"index":15038},{"krate":0,"index":15042},{"krate":0,"index":15046},{"krate":0,"index":15050},{"krate":0,"index":15054},{"krate":0,"index":15058},{"krate":0,"index":15062},{"krate":0,"index":15064},{"krate":0,"index":15068},{"krate":0,"index":15072},{"krate":0,"index":15076},{"krate":0,"index":15080},{"krate":0,"index":15084},{"krate":0,"index":15088},{"krate":0,"index":15090},{"krate":0,"index":15094},{"krate":0,"index":15098},{"krate":0,"index":15102},{"krate":0,"index":15106},{"krate":0,"index":15110},{"krate":0,"index":15114},{"krate":0,"index":15116},{"krate":0,"index":15120},{"krate":0,"index":15124},{"krate":0,"index":15128},{"krate":0,"index":15132},{"krate":0,"index":15136},{"krate":0,"index":15140},{"krate":0,"index":15142},{"krate":0,"index":15146},{"krate":0,"index":15150},{"krate":0,"index":15154},{"krate":0,"index":15158},{"krate":0,"index":15162},{"krate":0,"index":15166},{"krate":0,"index":15168},{"krate":0,"index":15172},{"krate":0,"index":15176},{"krate":0,"index":15180},{"krate":0,"index":15184},{"krate":0,"index":15188},{"krate":0,"index":15192},{"krate":0,"index":15194},{"krate":0,"index":15198},{"krate":0,"index":15202},{"krate":0,"index":15206},{"krate":0,"index":15210},{"krate":0,"index":15214},{"krate":0,"index":15218},{"krate":0,"index":15220},{"krate":0,"index":15224},{"krate":0,"index":15228},{"krate":0,"index":15232},{"krate":0,"index":15236},{"krate":0,"index":15240},{"krate":0,"index":15244},{"krate":0,"index":15246},{"krate":0,"index":15250},{"krate":0,"index":15254},{"krate":0,"index":15258},{"krate":0,"index":15262},{"krate":0,"index":15266},{"krate":0,"index":15270},{"krate":0,"index":15272},{"krate":0,"index":15276},{"krate":0,"index":15280},{"krate":0,"index":15284},{"krate":0,"index":15288},{"krate":0,"index":15292},{"krate":0,"index":15296},{"krate":0,"index":15298},{"krate":0,"index":15302},{"krate":0,"index":15306},{"krate":0,"index":15310},{"krate":0,"index":15314},{"krate":0,"index":15318},{"krate":0,"index":15322},{"krate":0,"index":15324},{"krate":0,"index":15328},{"krate":0,"index":15332},{"krate":0,"index":15336},{"krate":0,"index":15340},{"krate":0,"index":15344},{"krate":0,"index":15348},{"krate":0,"index":15350},{"krate":0,"index":15354},{"krate":0,"index":15358},{"krate":0,"index":15362},{"krate":0,"index":15366},{"krate":0,"index":15370},{"krate":0,"index":15374},{"krate":0,"index":15376},{"krate":0,"index":15380},{"krate":0,"index":15384},{"krate":0,"index":15388},{"krate":0,"index":15392},{"krate":0,"index":15396},{"krate":0,"index":15400},{"krate":0,"index":15402},{"krate":0,"index":15406},{"krate":0,"index":15410},{"krate":0,"index":15414},{"krate":0,"index":15418},{"krate":0,"index":15422},{"krate":0,"index":15426},{"krate":0,"index":15428},{"krate":0,"index":15432},{"krate":0,"index":15436},{"krate":0,"index":15440},{"krate":0,"index":15444},{"krate":0,"index":15448},{"krate":0,"index":15452},{"krate":0,"index":15454},{"krate":0,"index":15458},{"krate":0,"index":15462},{"krate":0,"index":15466},{"krate":0,"index":15470},{"krate":0,"index":15474},{"krate":0,"index":15478},{"krate":0,"index":15480},{"krate":0,"index":15484},{"krate":0,"index":15488},{"krate":0,"index":15492},{"krate":0,"index":15496},{"krate":0,"index":15500},{"krate":0,"index":15504},{"krate":0,"index":15506},{"krate":0,"index":15510},{"krate":0,"index":15514},{"krate":0,"index":15518},{"krate":0,"index":15522},{"krate":0,"index":15526},{"krate":0,"index":15530},{"krate":0,"index":15532},{"krate":0,"index":15536},{"krate":0,"index":15540},{"krate":0,"index":15544},{"krate":0,"index":15548},{"krate":0,"index":15552},{"krate":0,"index":15556},{"krate":0,"index":15558},{"krate":0,"index":15562},{"krate":0,"index":15566},{"krate":0,"index":15570},{"krate":0,"index":15574},{"krate":0,"index":15578},{"krate":0,"index":15582},{"krate":0,"index":15584},{"krate":0,"index":15588},{"krate":0,"index":15592},{"krate":0,"index":15596},{"krate":0,"index":15600},{"krate":0,"index":15604},{"krate":0,"index":15608},{"krate":0,"index":15610},{"krate":0,"index":15614},{"krate":0,"index":15618},{"krate":0,"index":15622},{"krate":0,"index":15626},{"krate":0,"index":15630},{"krate":0,"index":15634},{"krate":0,"index":15636},{"krate":0,"index":15640},{"krate":0,"index":15644},{"krate":0,"index":15648},{"krate":0,"index":15652},{"krate":0,"index":15656},{"krate":0,"index":15660},{"krate":0,"index":15662},{"krate":0,"index":15666},{"krate":0,"index":15670},{"krate":0,"index":15674},{"krate":0,"index":15678},{"krate":0,"index":15682},{"krate":0,"index":15686},{"krate":0,"index":15688},{"krate":0,"index":15692},{"krate":0,"index":15696},{"krate":0,"index":15700},{"krate":0,"index":15704},{"krate":0,"index":15708},{"krate":0,"index":15712},{"krate":0,"index":15714},{"krate":0,"index":15718},{"krate":0,"index":15722},{"krate":0,"index":15726},{"krate":0,"index":15730},{"krate":0,"index":15734},{"krate":0,"index":15738},{"krate":0,"index":15740},{"krate":0,"index":15744},{"krate":0,"index":15748},{"krate":0,"index":15752},{"krate":0,"index":15756},{"krate":0,"index":15760},{"krate":0,"index":15764},{"krate":0,"index":15766},{"krate":0,"index":15770},{"krate":0,"index":15774},{"krate":0,"index":15778},{"krate":0,"index":15782},{"krate":0,"index":15786},{"krate":0,"index":15790},{"krate":0,"index":15792},{"krate":0,"index":15796},{"krate":0,"index":15800},{"krate":0,"index":15804},{"krate":0,"index":15808},{"krate":0,"index":15812},{"krate":0,"index":15816},{"krate":0,"index":15818},{"krate":0,"index":15822},{"krate":0,"index":15826},{"krate":0,"index":15830},{"krate":0,"index":15834},{"krate":0,"index":15838},{"krate":0,"index":15842},{"krate":0,"index":15844},{"krate":0,"index":15848},{"krate":0,"index":15852},{"krate":0,"index":15856},{"krate":0,"index":15860},{"krate":0,"index":15864},{"krate":0,"index":15868},{"krate":0,"index":15870},{"krate":0,"index":15874},{"krate":0,"index":15878},{"krate":0,"index":15882},{"krate":0,"index":15886},{"krate":0,"index":15890},{"krate":0,"index":15894},{"krate":0,"index":15896},{"krate":0,"index":15900},{"krate":0,"index":15904},{"krate":0,"index":15908},{"krate":0,"index":15912},{"krate":0,"index":15916},{"krate":0,"index":15920},{"krate":0,"index":15922},{"krate":0,"index":15926},{"krate":0,"index":15930},{"krate":0,"index":15934},{"krate":0,"index":15938},{"krate":0,"index":15942},{"krate":0,"index":15946},{"krate":0,"index":15948},{"krate":0,"index":15952},{"krate":0,"index":15956},{"krate":0,"index":15960},{"krate":0,"index":15964},{"krate":0,"index":15968},{"krate":0,"index":15972},{"krate":0,"index":15974},{"krate":0,"index":15978},{"krate":0,"index":15982},{"krate":0,"index":15986},{"krate":0,"index":15990},{"krate":0,"index":15994},{"krate":0,"index":15998},{"krate":0,"index":16000},{"krate":0,"index":16004},{"krate":0,"index":16008},{"krate":0,"index":16012},{"krate":0,"index":16016},{"krate":0,"index":16020},{"krate":0,"index":16024},{"krate":0,"index":16026},{"krate":0,"index":16030},{"krate":0,"index":16034},{"krate":0,"index":16038},{"krate":0,"index":16042},{"krate":0,"index":16046},{"krate":0,"index":16050},{"krate":0,"index":16052},{"krate":0,"index":16056},{"krate":0,"index":16060},{"krate":0,"index":16064},{"krate":0,"index":16068},{"krate":0,"index":16072},{"krate":0,"index":16076},{"krate":0,"index":16078},{"krate":0,"index":16082},{"krate":0,"index":16086},{"krate":0,"index":16090},{"krate":0,"index":16094},{"krate":0,"index":1556},{"krate":0,"index":1560},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1602},{"krate":0,"index":1614},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1626},{"krate":0,"index":1630},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1654},{"krate":0,"index":1666},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1678},{"krate":0,"index":1682},{"krate":0,"index":1686}],"decl_id":null,"docs":" Raw, unsafe pointers, `*const T`, and `*mut T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":479551,"byte_end":479597,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1424},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480805,"byte_end":480818,"line_start":59,"line_end":59,"column_start":15,"column_end":28},"name":"drop_in_place","qualname":"::ptr::drop_in_place","value":"fn <T> (to_drop: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes the destructor (if any) of the pointed-to value.","sig":null,"attributes":[{"value":"stable(feature = \"drop_in_place\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480677,"byte_end":480730,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"lang = \"drop_in_place\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480731,"byte_end":480756,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"allow(unconditional_recursion)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480757,"byte_end":480790,"line_start":58,"line_end":58,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1426},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481203,"byte_end":481207,"line_start":77,"line_end":77,"column_start":14,"column_end":18},"name":"null","qualname":"::ptr::null","value":"fn <T> () -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481134,"byte_end":481143,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481144,"byte_end":481189,"line_start":76,"line_end":76,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1428},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481479,"byte_end":481487,"line_start":91,"line_end":91,"column_start":14,"column_end":22},"name":"null_mut","qualname":"::ptr::null_mut","value":"fn <T> () -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null mutable raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481410,"byte_end":481419,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":481420,"byte_end":481465,"line_start":90,"line_end":90,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1430},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":482790,"byte_end":482794,"line_start":143,"line_end":143,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"fn <T> (x: *mut T, y: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations of the same type, without\n deinitializing either.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":482720,"byte_end":482729,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":482730,"byte_end":482775,"line_start":142,"line_end":142,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1432},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":483878,"byte_end":483897,"line_start":185,"line_end":185,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"fn <T> (x: *mut T, y: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps a sequence of values at two mutable locations of the same type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":483792,"byte_end":483801,"line_start":183,"line_end":183,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"swap_nonoverlapping\", issue = \"42818\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":483802,"byte_end":483863,"line_start":184,"line_end":184,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1440},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":486503,"byte_end":486510,"line_start":253,"line_end":253,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"fn <T> (dest: *mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at `dest` with `src`, returning the old\n value, without dropping either.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":486433,"byte_end":486442,"line_start":251,"line_end":251,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":486443,"byte_end":486488,"line_start":252,"line_end":252,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1442},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":487502,"byte_end":487506,"line_start":286,"line_end":286,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":487432,"byte_end":487441,"line_start":284,"line_end":284,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":487442,"byte_end":487487,"line_start":285,"line_end":285,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1444},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":488507,"byte_end":488521,"line_start":320,"line_end":320,"column_start":15,"column_end":29},"name":"read_unaligned","qualname":"::ptr::read_unaligned","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":488428,"byte_end":488437,"line_start":318,"line_end":318,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":488438,"byte_end":488492,"line_start":319,"line_end":319,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":1446},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":489750,"byte_end":489755,"line_start":363,"line_end":363,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":489680,"byte_end":489689,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":489690,"byte_end":489735,"line_start":362,"line_end":362,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1448},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":490836,"byte_end":490851,"line_start":402,"line_end":402,"column_start":15,"column_end":30},"name":"write_unaligned","qualname":"::ptr::write_unaligned","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":490757,"byte_end":490766,"line_start":400,"line_end":400,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":490767,"byte_end":490821,"line_start":401,"line_end":401,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":1450},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":492693,"byte_end":492706,"line_start":453,"line_end":453,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the value from `src` without moving it. This\n leaves the memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":492620,"byte_end":492629,"line_start":451,"line_end":451,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":492630,"byte_end":492678,"line_start":452,"line_end":452,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1452},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494423,"byte_end":494437,"line_start":505,"line_end":505,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given value without\n reading or dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494350,"byte_end":494359,"line_start":503,"line_end":503,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494360,"byte_end":494408,"line_start":504,"line_end":504,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":495139,"byte_end":495146,"line_start":529,"line_end":529,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*const T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496262,"byte_end":496268,"line_start":563,"line_end":563,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*const T>::as_ref","value":"fn <'a> (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":498571,"byte_end":498577,"line_start":621,"line_end":621,"column_start":19,"column_end":25},"name":"offset","qualname":"<*const T>::offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":499805,"byte_end":499820,"line_start":659,"line_end":659,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*const T>::wrapping_offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":500945,"byte_end":500954,"line_start":693,"line_end":693,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*const T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":503474,"byte_end":503477,"line_start":755,"line_end":755,"column_start":19,"column_end":22},"name":"add","qualname":"<*const T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":505863,"byte_end":505866,"line_start":814,"line_end":814,"column_start":19,"column_end":22},"name":"sub","qualname":"<*const T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":507207,"byte_end":507219,"line_start":857,"line_end":857,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*const T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":508616,"byte_end":508628,"line_start":900,"line_end":900,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*const T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":509816,"byte_end":509820,"line_start":936,"line_end":936,"column_start":19,"column_end":23},"name":"read","qualname":"<*const T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":511769,"byte_end":511782,"line_start":988,"line_end":988,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*const T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":512899,"byte_end":512913,"line_start":1024,"line_end":1024,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*const T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":514082,"byte_end":514089,"line_start":1061,"line_end":1061,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*const T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":515505,"byte_end":515527,"line_start":1100,"line_end":1100,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*const T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":516889,"byte_end":516901,"line_start":1138,"line_end":1138,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*const T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494509,"byte_end":494530,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517648,"byte_end":517655,"line_start":1165,"line_end":1165,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*mut T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":518773,"byte_end":518779,"line_start":1199,"line_end":1199,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*mut T>::as_ref","value":"fn <'a> (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":521071,"byte_end":521077,"line_start":1257,"line_end":1257,"column_start":19,"column_end":25},"name":"offset","qualname":"<*mut T>::offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":522304,"byte_end":522319,"line_start":1294,"line_end":1294,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*mut T>::wrapping_offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":523232,"byte_end":523238,"line_start":1322,"line_end":1322,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<*mut T>::as_mut","value":"fn <'a> (self) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":524379,"byte_end":524388,"line_start":1358,"line_end":1358,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*mut T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":525911,"byte_end":525923,"line_start":1400,"line_end":1400,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*mut T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":528291,"byte_end":528294,"line_start":1458,"line_end":1458,"column_start":19,"column_end":22},"name":"add","qualname":"<*mut T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":530680,"byte_end":530683,"line_start":1517,"line_end":1517,"column_start":19,"column_end":22},"name":"sub","qualname":"<*mut T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":532024,"byte_end":532036,"line_start":1560,"line_end":1560,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*mut T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":533433,"byte_end":533445,"line_start":1603,"line_end":1603,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*mut T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":534633,"byte_end":534637,"line_start":1639,"line_end":1639,"column_start":19,"column_end":23},"name":"read","qualname":"<*mut T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536585,"byte_end":536598,"line_start":1691,"line_end":1691,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*mut T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":537715,"byte_end":537729,"line_start":1727,"line_end":1727,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*mut T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538898,"byte_end":538905,"line_start":1764,"line_end":1764,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*mut T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540321,"byte_end":540343,"line_start":1803,"line_end":1803,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*mut T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":541563,"byte_end":541572,"line_start":1840,"line_end":1840,"column_start":19,"column_end":28},"name":"copy_from","qualname":"<*mut T>::copy_from","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542998,"byte_end":543022,"line_start":1879,"line_end":1879,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<*mut T>::copy_from_nonoverlapping","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543945,"byte_end":543958,"line_start":1904,"line_end":1904,"column_start":19,"column_end":32},"name":"drop_in_place","qualname":"<*mut T>::drop_in_place","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545198,"byte_end":545203,"line_start":1945,"line_end":1945,"column_start":19,"column_end":24},"name":"write","qualname":"<*mut T>::write","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545805,"byte_end":545816,"line_start":1968,"line_end":1968,"column_start":19,"column_end":30},"name":"write_bytes","qualname":"<*mut T>::write_bytes","value":"fn (self, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":547805,"byte_end":547819,"line_start":2024,"line_end":2024,"column_start":19,"column_end":33},"name":"write_volatile","qualname":"<*mut T>::write_volatile","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":549090,"byte_end":549105,"line_start":2067,"line_end":2067,"column_start":19,"column_end":34},"name":"write_unaligned","qualname":"<*mut T>::write_unaligned","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":549554,"byte_end":549561,"line_start":2082,"line_end":2082,"column_start":19,"column_end":26},"name":"replace","qualname":"<*mut T>::replace","value":"fn (self, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":550131,"byte_end":550135,"line_start":2100,"line_end":2100,"column_start":19,"column_end":23},"name":"swap","qualname":"<*mut T>::swap","value":"fn (self, with: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517031,"byte_end":517050,"line_start":1145,"line_end":1145,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1550},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":551619,"byte_end":551621,"line_start":2155,"line_end":2155,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"fn <T> (a: *const T, b: *const T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare raw pointers for equality.","sig":null,"attributes":[{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":551554,"byte_end":551601,"line_start":2153,"line_end":2153,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":551602,"byte_end":551611,"line_start":2154,"line_end":2154,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":557912,"byte_end":557918,"line_start":2336,"line_end":2336,"column_start":12,"column_end":18},"name":"Unique","qualname":"::ptr::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":997}],"decl_id":null,"docs":" A wrapper around a raw non-null `*mut T` that indicates that the possessor\n of this wrapper owns the referent. Useful for building abstractions like\n `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\",\n           issue = \"0\",\n           reason =\n               \"use NonNull instead and consider PhantomData<T> (if you also use #[may_dangle]), Send, and/or Sync\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":557704,"byte_end":557900,"line_start":2333,"line_end":2335,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559456,"byte_end":559461,"line_start":2374,"line_end":2374,"column_start":12,"column_end":17},"name":"empty","qualname":"<Unique<T>>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559139,"byte_end":559190,"line_start":2367,"line_end":2367,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559804,"byte_end":559817,"line_start":2389,"line_end":2389,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<Unique<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559603,"byte_end":559654,"line_start":2382,"line_end":2382,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559990,"byte_end":559993,"line_start":2394,"line_end":2394,"column_start":12,"column_end":15},"name":"new","qualname":"<Unique<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559603,"byte_end":559654,"line_start":2382,"line_end":2382,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":560184,"byte_end":560190,"line_start":2399,"line_end":2399,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Unique<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559603,"byte_end":559654,"line_start":2382,"line_end":2382,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":560528,"byte_end":560534,"line_start":2408,"line_end":2408,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Unique<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559603,"byte_end":559654,"line_start":2382,"line_end":2382,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":560868,"byte_end":560874,"line_start":2417,"line_end":2417,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Unique<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559603,"byte_end":559654,"line_start":2382,"line_end":2382,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":1638},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":562348,"byte_end":562354,"line_start":2466,"line_end":2466,"column_start":10,"column_end":16},"name":"Shared","qualname":"::ptr::Shared","value":"NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Previous name of `NonNull`.\n","sig":null,"attributes":[{"value":"rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":562221,"byte_end":562289,"line_start":2464,"line_end":2464,"column_start":1,"column_end":69}},{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":562290,"byte_end":562338,"line_start":2465,"line_end":2465,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1640},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":563523,"byte_end":563530,"line_start":2486,"line_end":2486,"column_start":12,"column_end":19},"name":"NonNull","qualname":"::ptr::NonNull","value":"NonNull {  }","parent":null,"children":[{"krate":0,"index":1037}],"decl_id":null,"docs":" `*mut T` but non-zero and covariant.","sig":null,"attributes":[{"value":"stable(feature = \"nonnull\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":563463,"byte_end":563511,"line_start":2485,"line_end":2485,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564556,"byte_end":564564,"line_start":2513,"line_end":2513,"column_start":12,"column_end":20},"name":"dangling","qualname":"<NonNull<T>>::dangling","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564911,"byte_end":564924,"line_start":2528,"line_end":2528,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<NonNull<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":565130,"byte_end":565133,"line_start":2534,"line_end":2534,"column_start":12,"column_end":15},"name":"new","qualname":"<NonNull<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":565356,"byte_end":565362,"line_start":2540,"line_end":2540,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<NonNull<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":565753,"byte_end":565759,"line_start":2550,"line_end":2550,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<NonNull<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566146,"byte_end":566152,"line_start":2560,"line_end":2560,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<NonNull<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1690},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"marker","qualname":"::marker","value":"libcore/marker.rs","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":16098},{"krate":0,"index":16102},{"krate":0,"index":16106},{"krate":0,"index":16108},{"krate":0,"index":16112},{"krate":0,"index":16116},{"krate":0,"index":16118},{"krate":0,"index":16122},{"krate":0,"index":1722},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740}],"decl_id":null,"docs":" Primitive traits and types representing basic properties of types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":568097,"byte_end":568143,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1700},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":569186,"byte_end":569190,"line_start":43,"line_end":43,"column_start":23,"column_end":27},"name":"Send","qualname":"::marker::Send","value":"Send","parent":null,"children":[],"decl_id":null,"docs":" Types that can be transferred across thread boundaries.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":569041,"byte_end":569086,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":569087,"byte_end":569163,"line_start":42,"line_end":42,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1706},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":570669,"byte_end":570674,"line_start":89,"line_end":89,"column_start":11,"column_end":16},"name":"Sized","qualname":"::marker::Sized","value":"Sized","parent":null,"children":[],"decl_id":null,"docs":" Types with a constant size known at compile time.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":570409,"byte_end":570454,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"lang = \"sized\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":570455,"byte_end":570472,"line_start":86,"line_end":86,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` does not have a constant size known at compile-time\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":570473,"byte_end":570563,"line_start":87,"line_end":87,"column_start":1,"column_end":91}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":570564,"byte_end":570578,"line_start":88,"line_end":88,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1708},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":571963,"byte_end":571969,"line_start":122,"line_end":122,"column_start":11,"column_end":17},"name":"Unsize","qualname":"::marker::Unsize","value":"Unsize<T: ?Sized>","parent":null,"children":[],"decl_id":null,"docs":" Types that can be \"unsized\" to a dynamically-sized type.","sig":null,"attributes":[{"value":"unstable(feature = \"unsize\", issue = \"27732\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":571885,"byte_end":571933,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"lang = \"unsize\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":571934,"byte_end":571952,"line_start":121,"line_end":121,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":1710},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":576705,"byte_end":576709,"line_start":268,"line_end":268,"column_start":11,"column_end":15},"name":"Copy","qualname":"::marker::Copy","value":"Copy: Clone","parent":null,"children":[],"decl_id":null,"docs":" Types whose values can be duplicated simply by copying bits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":576632,"byte_end":576677,"line_start":266,"line_end":266,"column_start":1,"column_end":46}},{"value":"lang = \"copy\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":576678,"byte_end":576694,"line_start":267,"line_end":267,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1712},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":580285,"byte_end":580289,"line_start":343,"line_end":343,"column_start":23,"column_end":27},"name":"Sync","qualname":"::marker::Sync","value":"Sync","parent":null,"children":[],"decl_id":null,"docs":" Types for which it is safe to share references between threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":580121,"byte_end":580166,"line_start":340,"line_end":340,"column_start":1,"column_end":46}},{"value":"lang = \"sync\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":580167,"byte_end":580183,"line_start":341,"line_end":341,"column_start":1,"column_end":17}},{"value":"rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":580184,"byte_end":580262,"line_start":342,"line_end":342,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1720},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":586719,"byte_end":586730,"line_start":540,"line_end":540,"column_start":12,"column_end":23},"name":"PhantomData","qualname":"::marker::PhantomData","value":"","parent":null,"children":[],"decl_id":null,"docs":" Zero-sized type used to mark things that \"act like\" they own a `T`.","sig":null,"attributes":[{"value":"lang = \"phantom_data\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":586637,"byte_end":586661,"line_start":538,"line_end":538,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":586662,"byte_end":586707,"line_start":539,"line_end":539,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1742},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"libcore/ops/mod.rs","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1832},{"krate":0,"index":1920},{"krate":0,"index":1948},{"krate":0,"index":1954},{"krate":0,"index":1996},{"krate":0,"index":2014},{"krate":0,"index":2026},{"krate":0,"index":2056},{"krate":0,"index":2104},{"krate":0,"index":2118},{"krate":0,"index":2142},{"krate":0,"index":2156},{"krate":0,"index":2168},{"krate":0,"index":2182},{"krate":0,"index":2194},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2210},{"krate":0,"index":2216},{"krate":0,"index":2226},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2240},{"krate":0,"index":2252}],"decl_id":null,"docs":" Overloadable operators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":593026,"byte_end":593072,"line_start":155,"line_end":155,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1746},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596870,"byte_end":596873,"line_start":79,"line_end":79,"column_start":11,"column_end":14},"name":"Add","qualname":"::ops::arith::Add","value":"Add<RHS = Self>","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1750}],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596729,"byte_end":596744,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596745,"byte_end":596790,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596791,"byte_end":596859,"line_start":78,"line_end":78,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1748},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":597005,"byte_end":597011,"line_start":82,"line_end":82,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Add::Output","value":"type Output;","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" The resulting type after applying the `+` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596950,"byte_end":596995,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":597107,"byte_end":597110,"line_start":86,"line_end":86,"column_start":8,"column_end":11},"name":"add","qualname":"::ops::arith::Add::add","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1746},"children":[],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596729,"byte_end":596744,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596745,"byte_end":596790,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596791,"byte_end":596859,"line_start":78,"line_end":78,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1754},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599296,"byte_end":599299,"line_start":174,"line_end":174,"column_start":11,"column_end":14},"name":"Sub","qualname":"::ops::arith::Sub","value":"Sub<RHS = Self>","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1758}],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599155,"byte_end":599170,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599171,"byte_end":599216,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599217,"byte_end":599285,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1756},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599431,"byte_end":599437,"line_start":177,"line_end":177,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Sub::Output","value":"type Output;","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599376,"byte_end":599421,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599533,"byte_end":599536,"line_start":181,"line_end":181,"column_start":8,"column_end":11},"name":"sub","qualname":"::ops::arith::Sub::sub","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599155,"byte_end":599170,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599171,"byte_end":599216,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":599217,"byte_end":599285,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1762},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602593,"byte_end":602596,"line_start":291,"line_end":291,"column_start":11,"column_end":14},"name":"Mul","qualname":"::ops::arith::Mul","value":"Mul<RHS = Self>","parent":null,"children":[{"krate":0,"index":1764},{"krate":0,"index":1766}],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602452,"byte_end":602467,"line_start":288,"line_end":288,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602468,"byte_end":602513,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602514,"byte_end":602582,"line_start":290,"line_end":290,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1764},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602728,"byte_end":602734,"line_start":294,"line_end":294,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Mul::Output","value":"type Output;","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" The resulting type after applying the `*` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602673,"byte_end":602718,"line_start":293,"line_end":293,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602830,"byte_end":602833,"line_start":298,"line_end":298,"column_start":8,"column_end":11},"name":"mul","qualname":"::ops::arith::Mul::mul","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602452,"byte_end":602467,"line_start":288,"line_end":288,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602468,"byte_end":602513,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":602514,"byte_end":602582,"line_start":290,"line_end":290,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1770},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":606009,"byte_end":606012,"line_start":412,"line_end":412,"column_start":11,"column_end":14},"name":"Div","qualname":"::ops::arith::Div","value":"Div<RHS = Self>","parent":null,"children":[{"krate":0,"index":1772},{"krate":0,"index":1774}],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605868,"byte_end":605883,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605884,"byte_end":605929,"line_start":410,"line_end":410,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605930,"byte_end":605998,"line_start":411,"line_end":411,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1772},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":606144,"byte_end":606150,"line_start":415,"line_end":415,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Div::Output","value":"type Output;","parent":{"krate":0,"index":1770},"children":[],"decl_id":null,"docs":" The resulting type after applying the `/` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":606089,"byte_end":606134,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":606246,"byte_end":606249,"line_start":419,"line_end":419,"column_start":8,"column_end":11},"name":"div","qualname":"::ops::arith::Div::div","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1770},"children":[],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605868,"byte_end":605883,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605884,"byte_end":605929,"line_start":410,"line_end":410,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":605930,"byte_end":605998,"line_start":411,"line_end":411,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1780},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608373,"byte_end":608376,"line_start":494,"line_end":494,"column_start":11,"column_end":14},"name":"Rem","qualname":"::ops::arith::Rem","value":"Rem<RHS = Self>","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1784}],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608232,"byte_end":608247,"line_start":491,"line_end":491,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608248,"byte_end":608293,"line_start":492,"line_end":492,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608294,"byte_end":608362,"line_start":493,"line_end":493,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1782},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608508,"byte_end":608514,"line_start":497,"line_end":497,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Rem::Output","value":"type Output = Self;","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" The resulting type after applying the `%` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608453,"byte_end":608498,"line_start":496,"line_end":496,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608617,"byte_end":608620,"line_start":501,"line_end":501,"column_start":8,"column_end":11},"name":"rem","qualname":"::ops::arith::Rem::rem","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608232,"byte_end":608247,"line_start":491,"line_end":491,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608248,"byte_end":608293,"line_start":492,"line_end":492,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":608294,"byte_end":608362,"line_start":493,"line_end":493,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1790},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610463,"byte_end":610466,"line_start":577,"line_end":577,"column_start":11,"column_end":14},"name":"Neg","qualname":"::ops::arith::Neg","value":"Neg","parent":null,"children":[{"krate":0,"index":1792},{"krate":0,"index":1794}],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610391,"byte_end":610406,"line_start":575,"line_end":575,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610407,"byte_end":610452,"line_start":576,"line_end":576,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1792},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610588,"byte_end":610594,"line_start":580,"line_end":580,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Neg::Output","value":"type Output;","parent":{"krate":0,"index":1790},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610533,"byte_end":610578,"line_start":579,"line_end":579,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610696,"byte_end":610699,"line_start":584,"line_end":584,"column_start":8,"column_end":11},"name":"neg","qualname":"::ops::arith::Neg::neg","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":1790},"children":[],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610391,"byte_end":610406,"line_start":575,"line_end":575,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":610407,"byte_end":610452,"line_start":576,"line_end":576,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1802},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612326,"byte_end":612335,"line_start":651,"line_end":651,"column_start":11,"column_end":20},"name":"AddAssign","qualname":"::ops::arith::AddAssign","value":"AddAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1804}],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612166,"byte_end":612188,"line_start":648,"line_end":648,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612189,"byte_end":612245,"line_start":649,"line_end":649,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612246,"byte_end":612315,"line_start":650,"line_end":650,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612453,"byte_end":612463,"line_start":654,"line_end":654,"column_start":8,"column_end":18},"name":"add_assign","qualname":"::ops::arith::AddAssign::add_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612166,"byte_end":612188,"line_start":648,"line_end":648,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612189,"byte_end":612245,"line_start":649,"line_end":649,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":612246,"byte_end":612315,"line_start":650,"line_end":650,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1808},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613806,"byte_end":613815,"line_start":704,"line_end":704,"column_start":11,"column_end":20},"name":"SubAssign","qualname":"::ops::arith::SubAssign","value":"SubAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1810}],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613646,"byte_end":613668,"line_start":701,"line_end":701,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613669,"byte_end":613725,"line_start":702,"line_end":702,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613726,"byte_end":613795,"line_start":703,"line_end":703,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613933,"byte_end":613943,"line_start":707,"line_end":707,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"::ops::arith::SubAssign::sub_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1808},"children":[],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613646,"byte_end":613668,"line_start":701,"line_end":701,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613669,"byte_end":613725,"line_start":702,"line_end":702,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":613726,"byte_end":613795,"line_start":703,"line_end":703,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1814},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":615048,"byte_end":615057,"line_start":748,"line_end":748,"column_start":11,"column_end":20},"name":"MulAssign","qualname":"::ops::arith::MulAssign","value":"MulAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1816}],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614888,"byte_end":614910,"line_start":745,"line_end":745,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614911,"byte_end":614967,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614968,"byte_end":615037,"line_start":747,"line_end":747,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":615175,"byte_end":615185,"line_start":751,"line_end":751,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"::ops::arith::MulAssign::mul_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1814},"children":[],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614888,"byte_end":614910,"line_start":745,"line_end":745,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614911,"byte_end":614967,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":614968,"byte_end":615037,"line_start":747,"line_end":747,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1820},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616284,"byte_end":616293,"line_start":792,"line_end":792,"column_start":11,"column_end":20},"name":"DivAssign","qualname":"::ops::arith::DivAssign","value":"DivAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1822}],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616124,"byte_end":616146,"line_start":789,"line_end":789,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616147,"byte_end":616203,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616204,"byte_end":616273,"line_start":791,"line_end":791,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616411,"byte_end":616421,"line_start":795,"line_end":795,"column_start":8,"column_end":18},"name":"div_assign","qualname":"::ops::arith::DivAssign::div_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1820},"children":[],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616124,"byte_end":616146,"line_start":789,"line_end":789,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616147,"byte_end":616203,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":616204,"byte_end":616273,"line_start":791,"line_end":791,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1826},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617566,"byte_end":617575,"line_start":839,"line_end":839,"column_start":11,"column_end":20},"name":"RemAssign","qualname":"::ops::arith::RemAssign","value":"RemAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1828}],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617406,"byte_end":617428,"line_start":836,"line_end":836,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617429,"byte_end":617485,"line_start":837,"line_end":837,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617486,"byte_end":617555,"line_start":838,"line_end":838,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617693,"byte_end":617703,"line_start":842,"line_end":842,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"::ops::arith::RemAssign::rem_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617406,"byte_end":617428,"line_start":836,"line_end":836,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617429,"byte_end":617485,"line_start":837,"line_end":837,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":617486,"byte_end":617555,"line_start":838,"line_end":838,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1834},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619305,"byte_end":619308,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"Not","qualname":"::ops::bit::Not","value":"Not","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1838}],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619233,"byte_end":619248,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619249,"byte_end":619294,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1836},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619430,"byte_end":619436,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Not::Output","value":"type Output;","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" The resulting type after applying the `!` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619375,"byte_end":619420,"line_start":45,"line_end":45,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619538,"byte_end":619541,"line_start":50,"line_end":50,"column_start":8,"column_end":11},"name":"not","qualname":"::ops::bit::Not::not","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619233,"byte_end":619248,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619249,"byte_end":619294,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1842},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621597,"byte_end":621603,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"BitAnd","qualname":"::ops::bit::BitAnd","value":"BitAnd<RHS = Self>","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1846}],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621453,"byte_end":621471,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621472,"byte_end":621517,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621518,"byte_end":621586,"line_start":123,"line_end":123,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1844},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621735,"byte_end":621741,"line_start":127,"line_end":127,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitAnd::Output","value":"type Output;","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" The resulting type after applying the `&` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621680,"byte_end":621725,"line_start":126,"line_end":126,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621837,"byte_end":621843,"line_start":131,"line_end":131,"column_start":8,"column_end":14},"name":"bitand","qualname":"::ops::bit::BitAnd::bitand","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621453,"byte_end":621471,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621472,"byte_end":621517,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":621518,"byte_end":621586,"line_start":123,"line_end":123,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1850},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623932,"byte_end":623937,"line_start":205,"line_end":205,"column_start":11,"column_end":16},"name":"BitOr","qualname":"::ops::bit::BitOr","value":"BitOr<RHS = Self>","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1854}],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623789,"byte_end":623806,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623807,"byte_end":623852,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623853,"byte_end":623921,"line_start":204,"line_end":204,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1852},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":624069,"byte_end":624075,"line_start":208,"line_end":208,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitOr::Output","value":"type Output;","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" The resulting type after applying the `|` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":624014,"byte_end":624059,"line_start":207,"line_end":207,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":624171,"byte_end":624176,"line_start":212,"line_end":212,"column_start":8,"column_end":13},"name":"bitor","qualname":"::ops::bit::BitOr::bitor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623789,"byte_end":623806,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623807,"byte_end":623852,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":623853,"byte_end":623921,"line_start":204,"line_end":204,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1858},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626398,"byte_end":626404,"line_start":289,"line_end":289,"column_start":11,"column_end":17},"name":"BitXor","qualname":"::ops::bit::BitXor","value":"BitXor<RHS = Self>","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1862}],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626254,"byte_end":626272,"line_start":286,"line_end":286,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626273,"byte_end":626318,"line_start":287,"line_end":287,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626319,"byte_end":626387,"line_start":288,"line_end":288,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1860},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626536,"byte_end":626542,"line_start":292,"line_end":292,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitXor::Output","value":"type Output;","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" The resulting type after applying the `^` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626481,"byte_end":626526,"line_start":291,"line_end":291,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626638,"byte_end":626644,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"bitxor","qualname":"::ops::bit::BitXor::bitxor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626254,"byte_end":626272,"line_start":286,"line_end":286,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626273,"byte_end":626318,"line_start":287,"line_end":287,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":626319,"byte_end":626387,"line_start":288,"line_end":288,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1866},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628543,"byte_end":628546,"line_start":369,"line_end":369,"column_start":11,"column_end":14},"name":"Shl","qualname":"::ops::bit::Shl","value":"Shl<RHS>","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1870}],"decl_id":null,"docs":" The left shift operator `<<`.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628401,"byte_end":628416,"line_start":366,"line_end":366,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628417,"byte_end":628462,"line_start":367,"line_end":367,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628463,"byte_end":628532,"line_start":368,"line_end":368,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":1868},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628674,"byte_end":628680,"line_start":372,"line_end":372,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shl::Output","value":"type Output;","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" The resulting type after applying the `<<` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628619,"byte_end":628664,"line_start":371,"line_end":371,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628777,"byte_end":628780,"line_start":376,"line_end":376,"column_start":8,"column_end":11},"name":"shl","qualname":"::ops::bit::Shl::shl","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" The left shift operator `<<`.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628401,"byte_end":628416,"line_start":366,"line_end":366,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628417,"byte_end":628462,"line_start":367,"line_end":367,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":628463,"byte_end":628532,"line_start":368,"line_end":368,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1876},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631183,"byte_end":631186,"line_start":470,"line_end":470,"column_start":11,"column_end":14},"name":"Shr","qualname":"::ops::bit::Shr","value":"Shr<RHS>","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1880}],"decl_id":null,"docs":" The right shift operator `>>`.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631041,"byte_end":631056,"line_start":467,"line_end":467,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631057,"byte_end":631102,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631103,"byte_end":631172,"line_start":469,"line_end":469,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":1878},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631314,"byte_end":631320,"line_start":473,"line_end":473,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shr::Output","value":"type Output;","parent":{"krate":0,"index":1876},"children":[],"decl_id":null,"docs":" The resulting type after applying the `>>` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631259,"byte_end":631304,"line_start":472,"line_end":472,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631417,"byte_end":631420,"line_start":477,"line_end":477,"column_start":8,"column_end":11},"name":"shr","qualname":"::ops::bit::Shr::shr","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1876},"children":[],"decl_id":null,"docs":" The right shift operator `>>`.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631041,"byte_end":631056,"line_start":467,"line_end":467,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631057,"byte_end":631102,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":631103,"byte_end":631172,"line_start":469,"line_end":469,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1886},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634364,"byte_end":634376,"line_start":583,"line_end":583,"column_start":11,"column_end":23},"name":"BitAndAssign","qualname":"::ops::bit::BitAndAssign","value":"BitAndAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1888}],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634201,"byte_end":634226,"line_start":580,"line_end":580,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634227,"byte_end":634283,"line_start":581,"line_end":581,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634284,"byte_end":634353,"line_start":582,"line_end":582,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634494,"byte_end":634507,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"bitand_assign","qualname":"::ops::bit::BitAndAssign::bitand_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1886},"children":[],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634201,"byte_end":634226,"line_start":580,"line_end":580,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634227,"byte_end":634283,"line_start":581,"line_end":581,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":634284,"byte_end":634353,"line_start":582,"line_end":582,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1892},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635820,"byte_end":635831,"line_start":630,"line_end":630,"column_start":11,"column_end":22},"name":"BitOrAssign","qualname":"::ops::bit::BitOrAssign","value":"BitOrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1894}],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635658,"byte_end":635682,"line_start":627,"line_end":627,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635683,"byte_end":635739,"line_start":628,"line_end":628,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635740,"byte_end":635809,"line_start":629,"line_end":629,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635949,"byte_end":635961,"line_start":633,"line_end":633,"column_start":8,"column_end":20},"name":"bitor_assign","qualname":"::ops::bit::BitOrAssign::bitor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1892},"children":[],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635658,"byte_end":635682,"line_start":627,"line_end":627,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635683,"byte_end":635739,"line_start":628,"line_end":628,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":635740,"byte_end":635809,"line_start":629,"line_end":629,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1898},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637262,"byte_end":637274,"line_start":677,"line_end":677,"column_start":11,"column_end":23},"name":"BitXorAssign","qualname":"::ops::bit::BitXorAssign","value":"BitXorAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1900}],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637099,"byte_end":637124,"line_start":674,"line_end":674,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637125,"byte_end":637181,"line_start":675,"line_end":675,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637182,"byte_end":637251,"line_start":676,"line_end":676,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637392,"byte_end":637405,"line_start":680,"line_end":680,"column_start":8,"column_end":21},"name":"bitxor_assign","qualname":"::ops::bit::BitXorAssign::bitxor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637099,"byte_end":637124,"line_start":674,"line_end":674,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637125,"byte_end":637181,"line_start":675,"line_end":675,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":637182,"byte_end":637251,"line_start":676,"line_end":676,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1904},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638495,"byte_end":638504,"line_start":722,"line_end":722,"column_start":11,"column_end":20},"name":"ShlAssign","qualname":"::ops::bit::ShlAssign","value":"ShlAssign<Rhs>","parent":null,"children":[{"krate":0,"index":1906}],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638334,"byte_end":638356,"line_start":719,"line_end":719,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638357,"byte_end":638413,"line_start":720,"line_end":720,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638414,"byte_end":638484,"line_start":721,"line_end":721,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638618,"byte_end":638628,"line_start":725,"line_end":725,"column_start":8,"column_end":18},"name":"shl_assign","qualname":"::ops::bit::ShlAssign::shl_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638334,"byte_end":638356,"line_start":719,"line_end":719,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638357,"byte_end":638413,"line_start":720,"line_end":720,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":638414,"byte_end":638484,"line_start":721,"line_end":721,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":1912},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640295,"byte_end":640304,"line_start":788,"line_end":788,"column_start":11,"column_end":20},"name":"ShrAssign","qualname":"::ops::bit::ShrAssign","value":"ShrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1914}],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640134,"byte_end":640156,"line_start":785,"line_end":785,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640157,"byte_end":640213,"line_start":786,"line_end":786,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640214,"byte_end":640284,"line_start":787,"line_end":787,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640423,"byte_end":640433,"line_start":791,"line_end":791,"column_start":8,"column_end":18},"name":"shr_assign","qualname":"::ops::bit::ShrAssign::shr_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640134,"byte_end":640156,"line_start":785,"line_end":785,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640157,"byte_end":640213,"line_start":786,"line_end":786,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":640214,"byte_end":640284,"line_start":787,"line_end":787,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":1922},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644262,"byte_end":644267,"line_start":72,"line_end":72,"column_start":11,"column_end":16},"name":"Deref","qualname":"::ops::deref::Deref","value":"Deref","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1926}],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644188,"byte_end":644205,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644206,"byte_end":644251,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1924},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644377,"byte_end":644383,"line_start":75,"line_end":75,"column_start":10,"column_end":16},"name":"Target","qualname":"::ops::deref::Deref::Target","value":"type Target: ?Sized;","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" The resulting type after dereferencing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644322,"byte_end":644367,"line_start":74,"line_end":74,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644483,"byte_end":644488,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"deref","qualname":"::ops::deref::Deref::deref","value":"fn (&self) -> &Self::Target","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644188,"byte_end":644205,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":644206,"byte_end":644251,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1940},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647346,"byte_end":647354,"line_start":166,"line_end":166,"column_start":11,"column_end":19},"name":"DerefMut","qualname":"::ops::deref::DerefMut","value":"DerefMut: Deref","parent":null,"children":[{"krate":0,"index":1942}],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647268,"byte_end":647289,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647290,"byte_end":647335,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647461,"byte_end":647470,"line_start":169,"line_end":169,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"::ops::deref::DerefMut::deref_mut","value":"fn (&mut self) -> &mut Self::Target","parent":{"krate":0,"index":1940},"children":[],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647268,"byte_end":647289,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647290,"byte_end":647335,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1950},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":650249,"byte_end":650253,"line_start":95,"line_end":95,"column_start":11,"column_end":15},"name":"Drop","qualname":"::ops::drop::Drop","value":"Drop","parent":null,"children":[{"krate":0,"index":1952}],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":650176,"byte_end":650192,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":650193,"byte_end":650238,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":651173,"byte_end":651177,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"drop","qualname":"::ops::drop::Drop::drop","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":1950},"children":[],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":650176,"byte_end":650192,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":650193,"byte_end":650238,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1956},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653764,"byte_end":653766,"line_start":70,"line_end":70,"column_start":11,"column_end":13},"name":"Fn","qualname":"::ops::function::Fn","value":"Fn<Args>: FnMut<Args>","parent":null,"children":[{"krate":0,"index":1958}],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653611,"byte_end":653625,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653626,"byte_end":653671,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653672,"byte_end":653692,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653693,"byte_end":653707,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653908,"byte_end":653912,"line_start":73,"line_end":73,"column_start":27,"column_end":31},"name":"call","qualname":"::ops::function::Fn::call","value":"fn (&self, args: Args) -> Self::Output","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653611,"byte_end":653625,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653626,"byte_end":653671,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653672,"byte_end":653692,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653693,"byte_end":653707,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1960},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656175,"byte_end":656180,"line_start":143,"line_end":143,"column_start":11,"column_end":16},"name":"FnMut","qualname":"::ops::function::FnMut","value":"FnMut<Args>: FnOnce<Args>","parent":null,"children":[{"krate":0,"index":1962}],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656018,"byte_end":656036,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656037,"byte_end":656082,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656083,"byte_end":656103,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656104,"byte_end":656118,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656323,"byte_end":656331,"line_start":146,"line_end":146,"column_start":27,"column_end":35},"name":"call_mut","qualname":"::ops::function::FnMut::call_mut","value":"fn (&mut self, args: Args) -> Self::Output","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656018,"byte_end":656036,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656037,"byte_end":656082,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656083,"byte_end":656103,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656104,"byte_end":656118,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1964},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658798,"byte_end":658804,"line_start":216,"line_end":216,"column_start":11,"column_end":17},"name":"FnOnce","qualname":"::ops::function::FnOnce","value":"FnOnce<Args>","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1968}],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658640,"byte_end":658659,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658660,"byte_end":658705,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658706,"byte_end":658726,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658727,"byte_end":658741,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1966},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658941,"byte_end":658947,"line_start":219,"line_end":219,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::function::FnOnce::Output","value":"type Output;","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" The returned type after the call operator is used.\n","sig":null,"attributes":[{"value":"stable(feature = \"fn_once_output\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658876,"byte_end":658931,"line_start":218,"line_end":218,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":659069,"byte_end":659078,"line_start":223,"line_end":223,"column_start":27,"column_end":36},"name":"call_once","qualname":"::ops::function::FnOnce::call_once","value":"fn (self, args: Args) -> Self::Output","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658640,"byte_end":658659,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658660,"byte_end":658705,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658706,"byte_end":658726,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":658727,"byte_end":658741,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":17753},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661705,"byte_end":661712,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Yielded","qualname":"::ops::generator::GeneratorState::Yielded","value":"GeneratorState::Yielded(Y)","parent":{"krate":0,"index":29082},"children":[],"decl_id":null,"docs":" The generator suspended with a value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":17757},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661994,"byte_end":662002,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Complete","qualname":"::ops::generator::GeneratorState::Complete","value":"GeneratorState::Complete(R)","parent":{"krate":0,"index":29082},"children":[],"decl_id":null,"docs":" The generator completed with a return value.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":29082},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661338,"byte_end":661352,"line_start":19,"line_end":19,"column_start":10,"column_end":24},"name":"GeneratorState","qualname":"::ops::generator::GeneratorState","value":"GeneratorState::{Yielded, Complete}","parent":null,"children":[{"krate":0,"index":17753},{"krate":0,"index":17757}],"decl_id":null,"docs":" The result of a generator resumption.","sig":null,"attributes":[{"value":"lang = \"generator_state\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661243,"byte_end":661270,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661271,"byte_end":661328,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661329,"byte_end":662008,"line_start":19,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":661329,"byte_end":662008,"line_start":19,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":1998},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663367,"byte_end":663376,"line_start":76,"line_end":76,"column_start":11,"column_end":20},"name":"Generator","qualname":"::ops::generator::Generator","value":"Generator","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2004}],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663262,"byte_end":663283,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663284,"byte_end":663341,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663342,"byte_end":663356,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":2000},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663719,"byte_end":663724,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Yield","qualname":"::ops::generator::Generator::Yield","value":"type Yield;","parent":{"krate":0,"index":1998},"children":[],"decl_id":null,"docs":" The type of value this generator yields.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2002},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":664065,"byte_end":664071,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"name":"Return","qualname":"::ops::generator::Generator::Return","value":"type Return;","parent":{"krate":0,"index":1998},"children":[],"decl_id":null,"docs":" The type of value this generator returns.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":665396,"byte_end":665402,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"resume","qualname":"::ops::generator::Generator::resume","value":"fn (&mut self) -> GeneratorState<Self::Yield, Self::Return>","parent":{"krate":0,"index":1998},"children":[],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663262,"byte_end":663283,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663284,"byte_end":663341,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":663342,"byte_end":663356,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":2016},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667926,"byte_end":667931,"line_start":65,"line_end":65,"column_start":11,"column_end":16},"name":"Index","qualname":"::ops::index::Index","value":"Index<Idx: ?Sized>","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2020}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667775,"byte_end":667792,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667793,"byte_end":667869,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667870,"byte_end":667915,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2018},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":668048,"byte_end":668054,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::index::Index::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" The returned type after indexing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667993,"byte_end":668038,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":668184,"byte_end":668189,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"index","qualname":"::ops::index::Index::index","value":"fn (&self, index: Idx) -> &Self::Output","parent":{"krate":0,"index":2016},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667775,"byte_end":667792,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667793,"byte_end":667869,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":667870,"byte_end":667915,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2022},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670496,"byte_end":670504,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"IndexMut","qualname":"::ops::index::IndexMut","value":"IndexMut<Idx: ?Sized>: Index<Idx>","parent":null,"children":[{"krate":0,"index":2024}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670333,"byte_end":670354,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670355,"byte_end":670439,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670440,"byte_end":670485,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670659,"byte_end":670668,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::ops::index::IndexMut::index_mut","value":"fn (&mut self, index: Idx) -> &mut Self::Output","parent":{"krate":0,"index":2022},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670333,"byte_end":670354,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670355,"byte_end":670439,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670440,"byte_end":670485,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2028},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":672203,"byte_end":672208,"line_start":30,"line_end":30,"column_start":18,"column_end":23},"name":"Place","qualname":"::ops::place::Place","value":"Place<Data: ?Sized>","parent":null,"children":[{"krate":0,"index":2030}],"decl_id":null,"docs":" Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n that allocate an intermediate \"place\" that holds uninitialized\n state.  The desugaring evaluates EXPR, and writes the result at\n the address returned by the `pointer` method of this trait.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":672121,"byte_end":672185,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":672549,"byte_end":672556,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"pointer","qualname":"::ops::place::Place::pointer","value":"fn (&mut self) -> *mut Data","parent":{"krate":0,"index":2028},"children":[],"decl_id":null,"docs":" Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n that allocate an intermediate \"place\" that holds uninitialized\n state.  The desugaring evaluates EXPR, and writes the result at\n the address returned by the `pointer` method of this trait.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":672121,"byte_end":672185,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":2032},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673656,"byte_end":673662,"line_start":71,"line_end":71,"column_start":11,"column_end":17},"name":"Placer","qualname":"::ops::place::Placer","value":"Placer<Data: ?Sized>","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":2036}],"decl_id":null,"docs":" Interface to implementations of  `PLACE <- EXPR`.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673581,"byte_end":673645,"line_start":70,"line_end":70,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":2034},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673783,"byte_end":673788,"line_start":74,"line_end":74,"column_start":10,"column_end":15},"name":"Place","qualname":"::ops::place::Placer::Place","value":"type Place: InPlace<Data>;","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" `Place` is the intermediate agent guarding the\n uninitialized state for `Data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673856,"byte_end":673866,"line_start":77,"line_end":77,"column_start":8,"column_end":18},"name":"make_place","qualname":"::ops::place::Placer::make_place","value":"fn (self) -> Self::Place","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" Interface to implementations of  `PLACE <- EXPR`.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673581,"byte_end":673645,"line_start":70,"line_end":70,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":2038},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":674031,"byte_end":674038,"line_start":82,"line_end":82,"column_start":11,"column_end":18},"name":"InPlace","qualname":"::ops::place::InPlace","value":"InPlace<Data: ?Sized>: Place<Data>","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2042}],"decl_id":null,"docs":" Specialization of `Place` trait supporting `PLACE <- EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673956,"byte_end":674020,"line_start":81,"line_end":81,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":2040},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":674409,"byte_end":674414,"line_start":90,"line_end":90,"column_start":10,"column_end":15},"name":"Owner","qualname":"::ops::place::InPlace::Owner","value":"type Owner;","parent":{"krate":0,"index":2038},"children":[],"decl_id":null,"docs":" `Owner` is the type of the end value of `PLACE <- EXPR`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":674617,"byte_end":674625,"line_start":95,"line_end":95,"column_start":15,"column_end":23},"name":"finalize","qualname":"::ops::place::InPlace::finalize","value":"fn (self) -> Self::Owner","parent":{"krate":0,"index":2038},"children":[],"decl_id":null,"docs":" Specialization of `Place` trait supporting `PLACE <- EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":673956,"byte_end":674020,"line_start":81,"line_end":81,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":2044},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":675568,"byte_end":675573,"line_start":126,"line_end":126,"column_start":11,"column_end":16},"name":"Boxed","qualname":"::ops::place::Boxed","value":"Boxed","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050}],"decl_id":null,"docs":" Core trait for the `box EXPR` form.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":675493,"byte_end":675557,"line_start":125,"line_end":125,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":2046},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":675646,"byte_end":675650,"line_start":128,"line_end":128,"column_start":10,"column_end":14},"name":"Data","qualname":"::ops::place::Boxed::Data","value":"type Data;","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The kind of data that is stored in this kind of box.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2048},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":675783,"byte_end":675788,"line_start":130,"line_end":130,"column_start":10,"column_end":15},"name":"Place","qualname":"::ops::place::Boxed::Place","value":"type Place: BoxPlace<Self::Data>;","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The place that will negotiate the storage of the data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676023,"byte_end":676031,"line_start":135,"line_end":135,"column_start":15,"column_end":23},"name":"finalize","qualname":"::ops::place::Boxed::finalize","value":"fn (filled: Self::Place) -> Self","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" Core trait for the `box EXPR` form.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":675493,"byte_end":675557,"line_start":125,"line_end":125,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":2052},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676199,"byte_end":676207,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"name":"BoxPlace","qualname":"::ops::place::BoxPlace","value":"BoxPlace<Data: ?Sized>: Place<Data>","parent":null,"children":[{"krate":0,"index":2054}],"decl_id":null,"docs":" Specialization of `Place` trait supporting `box EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676124,"byte_end":676188,"line_start":139,"line_end":139,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676285,"byte_end":676295,"line_start":142,"line_end":142,"column_start":8,"column_end":18},"name":"make_place","qualname":"::ops::place::BoxPlace::make_place","value":"fn () -> Self","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":" Specialization of `Place` trait supporting `box EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676124,"byte_end":676188,"line_start":139,"line_end":139,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":29124},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":677867,"byte_end":677876,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"RangeFull","qualname":"::ops::range::RangeFull","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unbounded range (`..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":677810,"byte_end":677855,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":677856,"byte_end":677877,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":677856,"byte_end":677877,"line_start":50,"line_end":50,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":29144},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678693,"byte_end":678698,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"Range","qualname":"::ops::range::Range","value":"Range { start, end }","parent":null,"children":[{"krate":0,"index":17803},{"krate":0,"index":17805}],"decl_id":null,"docs":" A (half-open) range bounded inclusively below and exclusively above\n (`start..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678636,"byte_end":678681,"line_start":78,"line_end":78,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678682,"byte_end":678945,"line_start":79,"line_end":86,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":17803},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678814,"byte_end":678819,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::Range::start","value":"Idx","parent":{"krate":0,"index":29144},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678760,"byte_end":678805,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":17805},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678934,"byte_end":678937,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::Range::end","value":"Idx","parent":{"krate":0,"index":29144},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":678880,"byte_end":678925,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":679714,"byte_end":679722,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"contains","qualname":"<Range<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":679169,"byte_end":679263,"line_start":95,"line_end":95,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":29164},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680744,"byte_end":680753,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"RangeFrom","qualname":"::ops::range::RangeFrom","value":"RangeFrom { start }","parent":null,"children":[{"krate":0,"index":17819}],"decl_id":null,"docs":" A range only bounded inclusively below (`start..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680687,"byte_end":680732,"line_start":141,"line_end":141,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680733,"byte_end":680882,"line_start":142,"line_end":146,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":17819},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680869,"byte_end":680874,"line_start":145,"line_end":145,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeFrom::start","value":"Idx","parent":{"krate":0,"index":29164},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680815,"byte_end":680860,"line_start":144,"line_end":144,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":681532,"byte_end":681540,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeFrom<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":681096,"byte_end":681190,"line_start":155,"line_end":155,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":29184},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682864,"byte_end":682871,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"RangeTo","qualname":"::ops::range::RangeTo","value":"RangeTo { end }","parent":null,"children":[{"krate":0,"index":17833}],"decl_id":null,"docs":" A range only bounded exclusively above (`..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682807,"byte_end":682852,"line_start":212,"line_end":212,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682853,"byte_end":682998,"line_start":213,"line_end":217,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682853,"byte_end":682998,"line_start":213,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":17833},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682987,"byte_end":682990,"line_start":216,"line_end":216,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeTo::end","value":"Idx","parent":{"krate":0,"index":29184},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":682933,"byte_end":682978,"line_start":215,"line_end":215,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":683643,"byte_end":683651,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeTo<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":683208,"byte_end":683302,"line_start":226,"line_end":226,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":29206},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684398,"byte_end":684412,"line_start":263,"line_end":263,"column_start":12,"column_end":26},"name":"RangeInclusive","qualname":"::ops::range::RangeInclusive","value":"RangeInclusive { start, end }","parent":null,"children":[{"krate":0,"index":17849},{"krate":0,"index":17851}],"decl_id":null,"docs":" An range bounded inclusively below and above (`start..=end`).","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684289,"byte_end":684386,"line_start":262,"line_end":262,"column_start":1,"column_end":98}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684387,"byte_end":684823,"line_start":263,"line_end":274,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":17849},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684610,"byte_end":684615,"line_start":268,"line_end":268,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeInclusive::start","value":"Idx","parent":{"krate":0,"index":29206},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684474,"byte_end":684601,"line_start":265,"line_end":267,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":17851},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684812,"byte_end":684815,"line_start":273,"line_end":273,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeInclusive::end","value":"Idx","parent":{"krate":0,"index":29206},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684676,"byte_end":684803,"line_start":270,"line_end":272,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":685731,"byte_end":685739,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":685109,"byte_end":685203,"line_start":283,"line_end":283,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":29226},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687275,"byte_end":687291,"line_start":349,"line_end":349,"column_start":12,"column_end":28},"name":"RangeToInclusive","qualname":"::ops::range::RangeToInclusive","value":"RangeToInclusive { end }","parent":null,"children":[{"krate":0,"index":17865}],"decl_id":null,"docs":" A range only bounded inclusively above (`..=end`).","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687166,"byte_end":687263,"line_start":348,"line_end":348,"column_start":1,"column_end":98}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687264,"byte_end":687499,"line_start":349,"line_end":355,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687264,"byte_end":687499,"line_start":349,"line_end":355,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":17865},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687488,"byte_end":687491,"line_start":354,"line_end":354,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeToInclusive::end","value":"Idx","parent":{"krate":0,"index":29226},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive)\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687352,"byte_end":687479,"line_start":351,"line_end":353,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":688241,"byte_end":688249,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeToInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687771,"byte_end":687865,"line_start":364,"line_end":364,"column_start":1,"column_end":95}}]},{"kind":"Trait","id":{"krate":0,"index":2106},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689906,"byte_end":689909,"line_start":31,"line_end":31,"column_start":11,"column_end":14},"name":"Try","qualname":"::ops::try::Try","value":"Try","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116}],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689241,"byte_end":689292,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689293,"byte_end":689895,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":2108},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":690035,"byte_end":690037,"line_start":34,"line_end":34,"column_start":10,"column_end":12},"name":"Ok","qualname":"::ops::try::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" The type of this value when viewed as successful.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689974,"byte_end":690025,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":2110},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":690158,"byte_end":690163,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::ops::try::Try::Error","value":"type Error;","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" The type of this value when viewed as failed.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":690097,"byte_end":690148,"line_start":36,"line_end":36,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":690829,"byte_end":690840,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"into_result","qualname":"::ops::try::Try::into_result","value":"fn (self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689241,"byte_end":689292,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689293,"byte_end":689895,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":691090,"byte_end":691100,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"from_error","qualname":"::ops::try::Try::from_error","value":"fn (v: Self::Error) -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689241,"byte_end":689292,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689293,"byte_end":689895,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":691328,"byte_end":691335,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"from_ok","qualname":"::ops::try::Try::from_ok","value":"fn (v: Self::Ok) -> Self","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689241,"byte_end":689292,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":689293,"byte_end":689895,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":2122},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":693687,"byte_end":693700,"line_start":46,"line_end":46,"column_start":11,"column_end":24},"name":"CoerceUnsized","qualname":"::ops::unsize::CoerceUnsized","value":"CoerceUnsized<T>","parent":null,"children":[],"decl_id":null,"docs":" Trait that indicates that this is a pointer or a wrapper for one,\n where unsizing can be performed on the pointee.","sig":null,"attributes":[{"value":"unstable(feature = \"coerce_unsized\", issue = \"27732\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":693593,"byte_end":693649,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"lang = \"coerce_unsized\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":693650,"byte_end":693676,"line_start":45,"line_end":45,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":2254},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cmp","qualname":"::cmp","value":"libcore/cmp.rs","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2264},{"krate":0,"index":2268},{"krate":0,"index":29248},{"krate":0,"index":29264},{"krate":0,"index":29262},{"krate":0,"index":29258},{"krate":0,"index":29254},{"krate":0,"index":29250},{"krate":0,"index":2270},{"krate":0,"index":29268},{"krate":0,"index":29278},{"krate":0,"index":29274},{"krate":0,"index":29270},{"krate":0,"index":2278},{"krate":0,"index":2290},{"krate":0,"index":2294},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2308},{"krate":0,"index":2312},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328}],"decl_id":null,"docs":" Functionality for ordering and comparison.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696350,"byte_end":696396,"line_start":36,"line_end":36,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2258},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698939,"byte_end":698948,"line_start":110,"line_end":110,"column_start":11,"column_end":20},"name":"PartialEq","qualname":"::cmp::PartialEq","value":"PartialEq<Rhs: ?Sized = Self>","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2262}],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698802,"byte_end":698816,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698817,"byte_end":698862,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698863,"byte_end":698928,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":699142,"byte_end":699144,"line_start":115,"line_end":115,"column_start":8,"column_end":10},"name":"eq","qualname":"::cmp::PartialEq::eq","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2258},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698802,"byte_end":698816,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698817,"byte_end":698862,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698863,"byte_end":698928,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":699298,"byte_end":699300,"line_start":121,"line_end":121,"column_start":8,"column_end":10},"name":"ne","qualname":"::cmp::PartialEq::ne","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2258},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698802,"byte_end":698816,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698817,"byte_end":698862,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":698863,"byte_end":698928,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":2264},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":700724,"byte_end":700726,"line_start":164,"line_end":164,"column_start":11,"column_end":13},"name":"Eq","qualname":"::cmp::Eq","value":"Eq: PartialEq<Self>","parent":null,"children":[{"krate":0,"index":2266}],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":700668,"byte_end":700713,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":701163,"byte_end":701190,"line_start":175,"line_end":175,"column_start":8,"column_end":35},"name":"assert_receiver_is_total_eq","qualname":"::cmp::Eq::assert_receiver_is_total_eq","value":"fn (&self) -> ()","parent":{"krate":0,"index":2264},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":700668,"byte_end":700713,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2268},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":701549,"byte_end":701564,"line_start":187,"line_end":187,"column_start":12,"column_end":27},"name":"AssertParamIsEq","qualname":"::cmp::AssertParamIsEq","value":"AssertParamIsEq {  }","parent":null,"children":[{"krate":0,"index":1291}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":701380,"byte_end":701419,"line_start":183,"line_end":183,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_eq\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":701420,"byte_end":701537,"line_start":184,"line_end":186,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":17881},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702208,"byte_end":702212,"line_start":210,"line_end":210,"column_start":5,"column_end":9},"name":"Less","qualname":"::cmp::Ordering::Less","value":"Ordering::Less","parent":{"krate":0,"index":29248},"children":[],"decl_id":null,"docs":" An ordering where a compared value is less [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702158,"byte_end":702203,"line_start":209,"line_end":209,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":17885},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702339,"byte_end":702344,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"Equal","qualname":"::cmp::Ordering::Equal","value":"Ordering::Equal","parent":{"krate":0,"index":29248},"children":[],"decl_id":null,"docs":" An ordering where a compared value is equal [to another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702289,"byte_end":702334,"line_start":212,"line_end":212,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":17889},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702474,"byte_end":702481,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"Greater","qualname":"::cmp::Ordering::Greater","value":"Ordering::Greater","parent":{"krate":0,"index":29248},"children":[],"decl_id":null,"docs":" An ordering where a compared value is greater [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702424,"byte_end":702469,"line_start":215,"line_end":215,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":29248},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702076,"byte_end":702084,"line_start":207,"line_end":207,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::cmp::Ordering","value":"Ordering::{Less, Equal, Greater}","parent":null,"children":[{"krate":0,"index":17881},{"krate":0,"index":17885},{"krate":0,"index":17889}],"decl_id":null,"docs":" An `Ordering` is the result of a comparison between two values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702021,"byte_end":702066,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702067,"byte_end":702488,"line_start":207,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":703395,"byte_end":703402,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Ordering>::reverse","value":"fn (self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":704501,"byte_end":704505,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"then","qualname":"<Ordering>::then","value":"fn (self, other: Ordering) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":705691,"byte_end":705700,"line_start":324,"line_end":324,"column_start":12,"column_end":21},"name":"then_with","qualname":"<Ordering>::then_with","value":"fn <F> (self, f: F) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":29268},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":706327,"byte_end":706334,"line_start":348,"line_end":348,"column_start":12,"column_end":19},"name":"Reverse","qualname":"::cmp::Reverse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper struct for reverse ordering.","sig":null,"attributes":[{"value":"stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":706259,"byte_end":706315,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":706316,"byte_end":706402,"line_start":348,"line_end":348,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":2294},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":709010,"byte_end":709013,"line_start":431,"line_end":431,"column_start":11,"column_end":14},"name":"Ord","qualname":"::cmp::Ord","value":"Ord: Eq + PartialOrd<Self>","parent":null,"children":[{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2300}],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":708954,"byte_end":708999,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":709548,"byte_end":709551,"line_start":447,"line_end":447,"column_start":8,"column_end":11},"name":"cmp","qualname":"::cmp::Ord::cmp","value":"fn (&self, other: &Self) -> Ordering","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":708954,"byte_end":708999,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":709923,"byte_end":709926,"line_start":460,"line_end":460,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::Ord::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":708954,"byte_end":708999,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":710369,"byte_end":710372,"line_start":476,"line_end":476,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::Ord::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":708954,"byte_end":708999,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2312},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714116,"byte_end":714126,"line_start":602,"line_end":602,"column_start":11,"column_end":21},"name":"PartialOrd","qualname":"::cmp::PartialOrd","value":"PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs>","parent":null,"children":[{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322}],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714895,"byte_end":714906,"line_start":628,"line_end":628,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::cmp::PartialOrd::partial_cmp","value":"fn (&self, other: &Rhs) -> Option<Ordering>","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":715330,"byte_end":715332,"line_start":644,"line_end":644,"column_start":8,"column_end":10},"name":"lt","qualname":"::cmp::PartialOrd::lt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":715879,"byte_end":715881,"line_start":666,"line_end":666,"column_start":8,"column_end":10},"name":"le","qualname":"::cmp::PartialOrd::le","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":716424,"byte_end":716426,"line_start":687,"line_end":687,"column_start":8,"column_end":10},"name":"gt","qualname":"::cmp::PartialOrd::gt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":716979,"byte_end":716981,"line_start":709,"line_end":709,"column_start":8,"column_end":10},"name":"ge","qualname":"::cmp::PartialOrd::ge","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2312},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713978,"byte_end":713993,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":713994,"byte_end":714039,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714040,"byte_end":714105,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2324},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717520,"byte_end":717523,"line_start":733,"line_end":733,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::min","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the minimum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717457,"byte_end":717466,"line_start":731,"line_end":731,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717467,"byte_end":717512,"line_start":732,"line_end":732,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2326},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717948,"byte_end":717951,"line_start":753,"line_end":753,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::max","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the maximum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717885,"byte_end":717894,"line_start":751,"line_end":751,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":717895,"byte_end":717940,"line_start":752,"line_end":752,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2444},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"clone","qualname":"::clone","value":"libcore/clone.rs","parent":null,"children":[{"krate":0,"index":2446},{"krate":0,"index":2452},{"krate":0,"index":2454}],"decl_id":null,"docs":" The `Clone` trait for types that cannot be 'implicitly copied'.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":727836,"byte_end":727882,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2446},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729545,"byte_end":729550,"line_start":92,"line_end":92,"column_start":11,"column_end":16},"name":"Clone","qualname":"::clone::Clone","value":"Clone: Sized","parent":null,"children":[{"krate":0,"index":2448},{"krate":0,"index":2450}],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729471,"byte_end":729516,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729517,"byte_end":729534,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729820,"byte_end":729825,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"clone","qualname":"::clone::Clone::clone","value":"fn (&self) -> Self","parent":{"krate":0,"index":2446},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729471,"byte_end":729516,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729517,"byte_end":729534,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730150,"byte_end":730160,"line_start":112,"line_end":112,"column_start":8,"column_end":18},"name":"clone_from","qualname":"::clone::Clone::clone_from","value":"fn (&mut self, source: &Self) -> ()","parent":{"krate":0,"index":2446},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729471,"byte_end":729516,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729517,"byte_end":729534,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2452},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730606,"byte_end":730624,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"AssertParamIsClone","qualname":"::clone::AssertParamIsClone","value":"AssertParamIsClone {  }","parent":null,"children":[{"krate":0,"index":1371}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730429,"byte_end":730468,"line_start":122,"line_end":122,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730469,"byte_end":730594,"line_start":123,"line_end":125,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2454},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730873,"byte_end":730890,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"AssertParamIsCopy","qualname":"::clone::AssertParamIsCopy","value":"AssertParamIsCopy {  }","parent":null,"children":[{"krate":0,"index":1375}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730696,"byte_end":730735,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":730736,"byte_end":730861,"line_start":129,"line_end":131,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":2456},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"default","qualname":"::default","value":"libcore/default.rs","parent":null,"children":[{"krate":0,"index":2458},{"krate":0,"index":2462},{"krate":0,"index":29642},{"krate":0,"index":29646},{"krate":0,"index":29650},{"krate":0,"index":29654},{"krate":0,"index":29658},{"krate":0,"index":29662},{"krate":0,"index":29666},{"krate":0,"index":29670},{"krate":0,"index":29674},{"krate":0,"index":29678},{"krate":0,"index":29682},{"krate":0,"index":29686},{"krate":0,"index":29690},{"krate":0,"index":29694},{"krate":0,"index":29698},{"krate":0,"index":29702},{"krate":0,"index":29706}],"decl_id":null,"docs":" The `Default` trait for types which may have meaningful default values.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":731491,"byte_end":731537,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2458},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":733363,"byte_end":733370,"line_start":94,"line_end":94,"column_start":11,"column_end":18},"name":"Default","qualname":"::default::Default","value":"Default: Sized","parent":null,"children":[{"krate":0,"index":2460}],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":733307,"byte_end":733352,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":734179,"byte_end":734186,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"default","qualname":"::default::Default::default","value":"fn () -> Self","parent":{"krate":0,"index":2458},"children":[],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":733307,"byte_end":733352,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2464},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"convert","qualname":"::convert","value":"libcore/convert.rs","parent":null,"children":[{"krate":0,"index":2466},{"krate":0,"index":29710},{"krate":0,"index":29738},{"krate":0,"index":29736},{"krate":0,"index":29732},{"krate":0,"index":29728},{"krate":0,"index":29724},{"krate":0,"index":29720},{"krate":0,"index":29716},{"krate":0,"index":29712},{"krate":0,"index":2468},{"krate":0,"index":2472},{"krate":0,"index":2476},{"krate":0,"index":2480},{"krate":0,"index":2484},{"krate":0,"index":2488},{"krate":0,"index":2494},{"krate":0,"index":2500},{"krate":0,"index":2504},{"krate":0,"index":2508},{"krate":0,"index":2512},{"krate":0,"index":2516},{"krate":0,"index":2520},{"krate":0,"index":2526},{"krate":0,"index":2532},{"krate":0,"index":2536},{"krate":0,"index":2540}],"decl_id":null,"docs":" Traits for conversions between types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":737695,"byte_end":737741,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":29710},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":738262,"byte_end":738272,"line_start":61,"line_end":61,"column_start":10,"column_end":20},"name":"Infallible","qualname":"::convert::Infallible","value":"Infallible::{}","parent":null,"children":[],"decl_id":null,"docs":" A type used as the error type for implementations of fallible conversion\n traits in cases where conversions cannot actually fail.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":738134,"byte_end":738184,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":738253,"byte_end":738275,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":738253,"byte_end":738275,"line_start":61,"line_end":61,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2472},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":740335,"byte_end":740340,"line_start":125,"line_end":125,"column_start":11,"column_end":16},"name":"AsRef","qualname":"::convert::AsRef","value":"AsRef<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2474}],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":740279,"byte_end":740324,"line_start":124,"line_end":124,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":740444,"byte_end":740450,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_ref","qualname":"::convert::AsRef::as_ref","value":"fn (&self) -> &T","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":740279,"byte_end":740324,"line_start":124,"line_end":124,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2476},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":741496,"byte_end":741501,"line_start":166,"line_end":166,"column_start":11,"column_end":16},"name":"AsMut","qualname":"::convert::AsMut","value":"AsMut<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2478}],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":741440,"byte_end":741485,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":741605,"byte_end":741611,"line_start":169,"line_end":169,"column_start":8,"column_end":14},"name":"as_mut","qualname":"::convert::AsMut::as_mut","value":"fn (&mut self) -> &mut T","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":741440,"byte_end":741485,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2480},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":743975,"byte_end":743979,"line_start":244,"line_end":244,"column_start":11,"column_end":15},"name":"Into","qualname":"::convert::Into","value":"Into<T>: Sized","parent":null,"children":[{"krate":0,"index":2482}],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":743919,"byte_end":743964,"line_start":243,"line_end":243,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":744082,"byte_end":744086,"line_start":247,"line_end":247,"column_start":8,"column_end":12},"name":"into","qualname":"::convert::Into::into","value":"fn (self) -> T","parent":{"krate":0,"index":2480},"children":[],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":743919,"byte_end":743964,"line_start":243,"line_end":243,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2484},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":746578,"byte_end":746582,"line_start":327,"line_end":327,"column_start":11,"column_end":15},"name":"From","qualname":"::convert::From","value":"From<T>: Sized","parent":null,"children":[{"krate":0,"index":2486}],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":746522,"byte_end":746567,"line_start":326,"line_end":326,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":746685,"byte_end":746689,"line_start":330,"line_end":330,"column_start":8,"column_end":12},"name":"from","qualname":"::convert::From::from","value":"fn (_: T) -> Self","parent":{"krate":0,"index":2484},"children":[],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":746522,"byte_end":746567,"line_start":326,"line_end":326,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2488},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747285,"byte_end":747292,"line_start":345,"line_end":345,"column_start":11,"column_end":18},"name":"TryInto","qualname":"::convert::TryInto","value":"TryInto<T>: Sized","parent":null,"children":[{"krate":0,"index":2490},{"krate":0,"index":2492}],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747224,"byte_end":747274,"line_start":344,"line_end":344,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2490},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747376,"byte_end":747381,"line_start":347,"line_end":347,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryInto::Error","value":"type Error;","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747424,"byte_end":747432,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"try_into","qualname":"::convert::TryInto::try_into","value":"fn (self) -> Result<T, Self::Error>","parent":{"krate":0,"index":2488},"children":[],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747224,"byte_end":747274,"line_start":344,"line_end":344,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":2494},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747580,"byte_end":747587,"line_start":355,"line_end":355,"column_start":11,"column_end":18},"name":"TryFrom","qualname":"::convert::TryFrom","value":"TryFrom<T>: Sized","parent":null,"children":[{"krate":0,"index":2496},{"krate":0,"index":2498}],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747519,"byte_end":747569,"line_start":354,"line_end":354,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2496},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747671,"byte_end":747676,"line_start":357,"line_end":357,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryFrom::Error","value":"type Error;","parent":{"krate":0,"index":2494},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747719,"byte_end":747727,"line_start":360,"line_end":360,"column_start":8,"column_end":16},"name":"try_from","qualname":"::convert::TryFrom::try_from","value":"fn (value: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":2494},"children":[],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747519,"byte_end":747569,"line_start":354,"line_end":354,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2544},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"borrow","qualname":"::borrow","value":"libcore/borrow.rs","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2550},{"krate":0,"index":2554},{"krate":0,"index":2558},{"krate":0,"index":2562},{"krate":0,"index":2566},{"krate":0,"index":2570}],"decl_id":null,"docs":" A module for working with borrowed data.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":751145,"byte_end":751191,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2546},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752245,"byte_end":752251,"line_start":36,"line_end":36,"column_start":11,"column_end":17},"name":"Borrow","qualname":"::borrow::Borrow","value":"Borrow<Borrowed: ?Sized>","parent":null,"children":[{"krate":0,"index":2548}],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752189,"byte_end":752234,"line_start":35,"line_end":35,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752702,"byte_end":752708,"line_start":57,"line_end":57,"column_start":8,"column_end":14},"name":"borrow","qualname":"::borrow::Borrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":2546},"children":[],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752189,"byte_end":752234,"line_start":35,"line_end":35,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2550},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752883,"byte_end":752892,"line_start":64,"line_end":64,"column_start":11,"column_end":20},"name":"BorrowMut","qualname":"::borrow::BorrowMut","value":"BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed>","parent":null,"children":[{"krate":0,"index":2552}],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752827,"byte_end":752872,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":753318,"byte_end":753328,"line_start":81,"line_end":81,"column_start":8,"column_end":18},"name":"borrow_mut","qualname":"::borrow::BorrowMut::borrow_mut","value":"fn (&mut self) -> &mut Borrowed","parent":{"krate":0,"index":2550},"children":[],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752827,"byte_end":752872,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2574},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"any","qualname":"::any","value":"libcore/any.rs","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2584},{"krate":0,"index":2588},{"krate":0,"index":2592},{"krate":0,"index":2596},{"krate":0,"index":2604},{"krate":0,"index":29742},{"krate":0,"index":29780},{"krate":0,"index":29778},{"krate":0,"index":29772},{"krate":0,"index":29768},{"krate":0,"index":29756},{"krate":0,"index":29752},{"krate":0,"index":29748},{"krate":0,"index":29744},{"krate":0,"index":2612}],"decl_id":null,"docs":" This module implements the `Any` trait, which enables dynamic typing\n of any `'static` type through runtime reflection.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":756884,"byte_end":756930,"line_start":72,"line_end":72,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2580},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":757421,"byte_end":757424,"line_start":88,"line_end":88,"column_start":11,"column_end":14},"name":"Any","qualname":"::any::Any","value":"Any: 'static","parent":null,"children":[{"krate":0,"index":2582}],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":757365,"byte_end":757410,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":758045,"byte_end":758056,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"get_type_id","qualname":"::any::Any::get_type_id","value":"fn (&self) -> TypeId","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":757365,"byte_end":757410,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":759489,"byte_end":759491,"line_start":162,"line_end":162,"column_start":12,"column_end":14},"name":"is","qualname":"<Any>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2600},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":760456,"byte_end":760468,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"<Any>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2602},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":761373,"byte_end":761385,"line_start":233,"line_end":233,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"<Any>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":762169,"byte_end":762171,"line_start":267,"line_end":267,"column_start":12,"column_end":14},"name":"is","qualname":"<Any + Send>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":762864,"byte_end":762876,"line_start":293,"line_end":293,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"<Any + Send>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":763609,"byte_end":763621,"line_start":323,"line_end":323,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"<Any + Send>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":29742},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":764613,"byte_end":764619,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"TypeId","qualname":"::any::TypeId","value":"TypeId {  }","parent":null,"children":[{"krate":0,"index":17909}],"decl_id":null,"docs":" A `TypeId` represents a globally unique identifier for a type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":764556,"byte_end":764601,"line_start":346,"line_end":346,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":764602,"byte_end":764635,"line_start":347,"line_end":349,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":764602,"byte_end":764635,"line_start":347,"line_end":349,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":765963,"byte_end":765965,"line_start":397,"line_end":397,"column_start":18,"column_end":20},"name":"of","qualname":"<TypeId>::of","value":"fn <T> () -> TypeId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2616},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"libcore/array.rs","parent":null,"children":[{"krate":0,"index":2618},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":2644},{"krate":0,"index":2650},{"krate":0,"index":29784},{"krate":0,"index":29792},{"krate":0,"index":29790},{"krate":0,"index":29786},{"krate":0,"index":2656},{"krate":0,"index":2660},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":29796},{"krate":0,"index":29800},{"krate":0,"index":29804},{"krate":0,"index":29808},{"krate":0,"index":29812},{"krate":0,"index":29818},{"krate":0,"index":29824},{"krate":0,"index":29828},{"krate":0,"index":29832},{"krate":0,"index":29840},{"krate":0,"index":32106},{"krate":0,"index":32118},{"krate":0,"index":32112},{"krate":0,"index":32130},{"krate":0,"index":32124},{"krate":0,"index":32142},{"krate":0,"index":32136},{"krate":0,"index":29848},{"krate":0,"index":29850},{"krate":0,"index":29862},{"krate":0,"index":29866},{"krate":0,"index":29870},{"krate":0,"index":29874},{"krate":0,"index":29878},{"krate":0,"index":29882},{"krate":0,"index":29888},{"krate":0,"index":29894},{"krate":0,"index":29898},{"krate":0,"index":29902},{"krate":0,"index":29910},{"krate":0,"index":32148},{"krate":0,"index":32160},{"krate":0,"index":32154},{"krate":0,"index":32172},{"krate":0,"index":32166},{"krate":0,"index":32184},{"krate":0,"index":32178},{"krate":0,"index":29918},{"krate":0,"index":29920},{"krate":0,"index":29932},{"krate":0,"index":29936},{"krate":0,"index":29940},{"krate":0,"index":29944},{"krate":0,"index":29948},{"krate":0,"index":29952},{"krate":0,"index":29958},{"krate":0,"index":29964},{"krate":0,"index":29968},{"krate":0,"index":29972},{"krate":0,"index":29980},{"krate":0,"index":32190},{"krate":0,"index":32202},{"krate":0,"index":32196},{"krate":0,"index":32214},{"krate":0,"index":32208},{"krate":0,"index":32226},{"krate":0,"index":32220},{"krate":0,"index":29988},{"krate":0,"index":29990},{"krate":0,"index":30002},{"krate":0,"index":30006},{"krate":0,"index":30010},{"krate":0,"index":30014},{"krate":0,"index":30018},{"krate":0,"index":30022},{"krate":0,"index":30028},{"krate":0,"index":30034},{"krate":0,"index":30038},{"krate":0,"index":30042},{"krate":0,"index":30050},{"krate":0,"index":32232},{"krate":0,"index":32244},{"krate":0,"index":32238},{"krate":0,"index":32256},{"krate":0,"index":32250},{"krate":0,"index":32268},{"krate":0,"index":32262},{"krate":0,"index":30058},{"krate":0,"index":30060},{"krate":0,"index":30072},{"krate":0,"index":30076},{"krate":0,"index":30080},{"krate":0,"index":30084},{"krate":0,"index":30088},{"krate":0,"index":30092},{"krate":0,"index":30098},{"krate":0,"index":30104},{"krate":0,"index":30108},{"krate":0,"index":30112},{"krate":0,"index":30120},{"krate":0,"index":32274},{"krate":0,"index":32286},{"krate":0,"index":32280},{"krate":0,"index":32298},{"krate":0,"index":32292},{"krate":0,"index":32310},{"krate":0,"index":32304},{"krate":0,"index":30128},{"krate":0,"index":30130},{"krate":0,"index":30142},{"krate":0,"index":30146},{"krate":0,"index":30150},{"krate":0,"index":30154},{"krate":0,"index":30158},{"krate":0,"index":30162},{"krate":0,"index":30168},{"krate":0,"index":30174},{"krate":0,"index":30178},{"krate":0,"index":30182},{"krate":0,"index":30190},{"krate":0,"index":32316},{"krate":0,"index":32328},{"krate":0,"index":32322},{"krate":0,"index":32340},{"krate":0,"index":32334},{"krate":0,"index":32352},{"krate":0,"index":32346},{"krate":0,"index":30198},{"krate":0,"index":30200},{"krate":0,"index":30212},{"krate":0,"index":30216},{"krate":0,"index":30220},{"krate":0,"index":30224},{"krate":0,"index":30228},{"krate":0,"index":30232},{"krate":0,"index":30238},{"krate":0,"index":30244},{"krate":0,"index":30248},{"krate":0,"index":30252},{"krate":0,"index":30260},{"krate":0,"index":32358},{"krate":0,"index":32370},{"krate":0,"index":32364},{"krate":0,"index":32382},{"krate":0,"index":32376},{"krate":0,"index":32394},{"krate":0,"index":32388},{"krate":0,"index":30268},{"krate":0,"index":30270},{"krate":0,"index":30282},{"krate":0,"index":30286},{"krate":0,"index":30290},{"krate":0,"index":30294},{"krate":0,"index":30298},{"krate":0,"index":30302},{"krate":0,"index":30308},{"krate":0,"index":30314},{"krate":0,"index":30318},{"krate":0,"index":30322},{"krate":0,"index":30330},{"krate":0,"index":32400},{"krate":0,"index":32412},{"krate":0,"index":32406},{"krate":0,"index":32424},{"krate":0,"index":32418},{"krate":0,"index":32436},{"krate":0,"index":32430},{"krate":0,"index":30338},{"krate":0,"index":30340},{"krate":0,"index":30352},{"krate":0,"index":30356},{"krate":0,"index":30360},{"krate":0,"index":30364},{"krate":0,"index":30368},{"krate":0,"index":30372},{"krate":0,"index":30378},{"krate":0,"index":30384},{"krate":0,"index":30388},{"krate":0,"index":30392},{"krate":0,"index":30400},{"krate":0,"index":32442},{"krate":0,"index":32454},{"krate":0,"index":32448},{"krate":0,"index":32466},{"krate":0,"index":32460},{"krate":0,"index":32478},{"krate":0,"index":32472},{"krate":0,"index":30408},{"krate":0,"index":30410},{"krate":0,"index":30422},{"krate":0,"index":30426},{"krate":0,"index":30430},{"krate":0,"index":30434},{"krate":0,"index":30438},{"krate":0,"index":30442},{"krate":0,"index":30448},{"krate":0,"index":30454},{"krate":0,"index":30458},{"krate":0,"index":30462},{"krate":0,"index":30470},{"krate":0,"index":32484},{"krate":0,"index":32496},{"krate":0,"index":32490},{"krate":0,"index":32508},{"krate":0,"index":32502},{"krate":0,"index":32520},{"krate":0,"index":32514},{"krate":0,"index":30478},{"krate":0,"index":30480},{"krate":0,"index":30492},{"krate":0,"index":30496},{"krate":0,"index":30500},{"krate":0,"index":30504},{"krate":0,"index":30508},{"krate":0,"index":30512},{"krate":0,"index":30518},{"krate":0,"index":30524},{"krate":0,"index":30528},{"krate":0,"index":30532},{"krate":0,"index":30540},{"krate":0,"index":32526},{"krate":0,"index":32538},{"krate":0,"index":32532},{"krate":0,"index":32550},{"krate":0,"index":32544},{"krate":0,"index":32562},{"krate":0,"index":32556},{"krate":0,"index":30548},{"krate":0,"index":30550},{"krate":0,"index":30562},{"krate":0,"index":30566},{"krate":0,"index":30570},{"krate":0,"index":30574},{"krate":0,"index":30578},{"krate":0,"index":30582},{"krate":0,"index":30588},{"krate":0,"index":30594},{"krate":0,"index":30598},{"krate":0,"index":30602},{"krate":0,"index":30610},{"krate":0,"index":32568},{"krate":0,"index":32580},{"krate":0,"index":32574},{"krate":0,"index":32592},{"krate":0,"index":32586},{"krate":0,"index":32604},{"krate":0,"index":32598},{"krate":0,"index":30618},{"krate":0,"index":30620},{"krate":0,"index":30632},{"krate":0,"index":30636},{"krate":0,"index":30640},{"krate":0,"index":30644},{"krate":0,"index":30648},{"krate":0,"index":30652},{"krate":0,"index":30658},{"krate":0,"index":30664},{"krate":0,"index":30668},{"krate":0,"index":30672},{"krate":0,"index":30680},{"krate":0,"index":32610},{"krate":0,"index":32622},{"krate":0,"index":32616},{"krate":0,"index":32634},{"krate":0,"index":32628},{"krate":0,"index":32646},{"krate":0,"index":32640},{"krate":0,"index":30688},{"krate":0,"index":30690},{"krate":0,"index":30702},{"krate":0,"index":30706},{"krate":0,"index":30710},{"krate":0,"index":30714},{"krate":0,"index":30718},{"krate":0,"index":30722},{"krate":0,"index":30728},{"krate":0,"index":30734},{"krate":0,"index":30738},{"krate":0,"index":30742},{"krate":0,"index":30750},{"krate":0,"index":32652},{"krate":0,"index":32664},{"krate":0,"index":32658},{"krate":0,"index":32676},{"krate":0,"index":32670},{"krate":0,"index":32688},{"krate":0,"index":32682},{"krate":0,"index":30758},{"krate":0,"index":30760},{"krate":0,"index":30772},{"krate":0,"index":30776},{"krate":0,"index":30780},{"krate":0,"index":30784},{"krate":0,"index":30788},{"krate":0,"index":30792},{"krate":0,"index":30798},{"krate":0,"index":30804},{"krate":0,"index":30808},{"krate":0,"index":30812},{"krate":0,"index":30820},{"krate":0,"index":32694},{"krate":0,"index":32706},{"krate":0,"index":32700},{"krate":0,"index":32718},{"krate":0,"index":32712},{"krate":0,"index":32730},{"krate":0,"index":32724},{"krate":0,"index":30828},{"krate":0,"index":30830},{"krate":0,"index":30842},{"krate":0,"index":30846},{"krate":0,"index":30850},{"krate":0,"index":30854},{"krate":0,"index":30858},{"krate":0,"index":30862},{"krate":0,"index":30868},{"krate":0,"index":30874},{"krate":0,"index":30878},{"krate":0,"index":30882},{"krate":0,"index":30890},{"krate":0,"index":32736},{"krate":0,"index":32748},{"krate":0,"index":32742},{"krate":0,"index":32760},{"krate":0,"index":32754},{"krate":0,"index":32772},{"krate":0,"index":32766},{"krate":0,"index":30898},{"krate":0,"index":30900},{"krate":0,"index":30912},{"krate":0,"index":30916},{"krate":0,"index":30920},{"krate":0,"index":30924},{"krate":0,"index":30928},{"krate":0,"index":30932},{"krate":0,"index":30938},{"krate":0,"index":30944},{"krate":0,"index":30948},{"krate":0,"index":30952},{"krate":0,"index":30960},{"krate":0,"index":32778},{"krate":0,"index":32790},{"krate":0,"index":32784},{"krate":0,"index":32802},{"krate":0,"index":32796},{"krate":0,"index":32814},{"krate":0,"index":32808},{"krate":0,"index":30968},{"krate":0,"index":30970},{"krate":0,"index":30982},{"krate":0,"index":30986},{"krate":0,"index":30990},{"krate":0,"index":30994},{"krate":0,"index":30998},{"krate":0,"index":31002},{"krate":0,"index":31008},{"krate":0,"index":31014},{"krate":0,"index":31018},{"krate":0,"index":31022},{"krate":0,"index":31030},{"krate":0,"index":32820},{"krate":0,"index":32832},{"krate":0,"index":32826},{"krate":0,"index":32844},{"krate":0,"index":32838},{"krate":0,"index":32856},{"krate":0,"index":32850},{"krate":0,"index":31038},{"krate":0,"index":31040},{"krate":0,"index":31052},{"krate":0,"index":31056},{"krate":0,"index":31060},{"krate":0,"index":31064},{"krate":0,"index":31068},{"krate":0,"index":31072},{"krate":0,"index":31078},{"krate":0,"index":31084},{"krate":0,"index":31088},{"krate":0,"index":31092},{"krate":0,"index":31100},{"krate":0,"index":32862},{"krate":0,"index":32874},{"krate":0,"index":32868},{"krate":0,"index":32886},{"krate":0,"index":32880},{"krate":0,"index":32898},{"krate":0,"index":32892},{"krate":0,"index":31108},{"krate":0,"index":31110},{"krate":0,"index":31122},{"krate":0,"index":31126},{"krate":0,"index":31130},{"krate":0,"index":31134},{"krate":0,"index":31138},{"krate":0,"index":31142},{"krate":0,"index":31148},{"krate":0,"index":31154},{"krate":0,"index":31158},{"krate":0,"index":31162},{"krate":0,"index":31170},{"krate":0,"index":32904},{"krate":0,"index":32916},{"krate":0,"index":32910},{"krate":0,"index":32928},{"krate":0,"index":32922},{"krate":0,"index":32940},{"krate":0,"index":32934},{"krate":0,"index":31178},{"krate":0,"index":31180},{"krate":0,"index":31192},{"krate":0,"index":31196},{"krate":0,"index":31200},{"krate":0,"index":31204},{"krate":0,"index":31208},{"krate":0,"index":31212},{"krate":0,"index":31218},{"krate":0,"index":31224},{"krate":0,"index":31228},{"krate":0,"index":31232},{"krate":0,"index":31240},{"krate":0,"index":32946},{"krate":0,"index":32958},{"krate":0,"index":32952},{"krate":0,"index":32970},{"krate":0,"index":32964},{"krate":0,"index":32982},{"krate":0,"index":32976},{"krate":0,"index":31248},{"krate":0,"index":31250},{"krate":0,"index":31262},{"krate":0,"index":31266},{"krate":0,"index":31270},{"krate":0,"index":31274},{"krate":0,"index":31278},{"krate":0,"index":31282},{"krate":0,"index":31288},{"krate":0,"index":31294},{"krate":0,"index":31298},{"krate":0,"index":31302},{"krate":0,"index":31310},{"krate":0,"index":32988},{"krate":0,"index":33000},{"krate":0,"index":32994},{"krate":0,"index":33012},{"krate":0,"index":33006},{"krate":0,"index":33024},{"krate":0,"index":33018},{"krate":0,"index":31318},{"krate":0,"index":31320},{"krate":0,"index":31332},{"krate":0,"index":31336},{"krate":0,"index":31340},{"krate":0,"index":31344},{"krate":0,"index":31348},{"krate":0,"index":31352},{"krate":0,"index":31358},{"krate":0,"index":31364},{"krate":0,"index":31368},{"krate":0,"index":31372},{"krate":0,"index":31380},{"krate":0,"index":33030},{"krate":0,"index":33042},{"krate":0,"index":33036},{"krate":0,"index":33054},{"krate":0,"index":33048},{"krate":0,"index":33066},{"krate":0,"index":33060},{"krate":0,"index":31388},{"krate":0,"index":31390},{"krate":0,"index":31402},{"krate":0,"index":31406},{"krate":0,"index":31410},{"krate":0,"index":31414},{"krate":0,"index":31418},{"krate":0,"index":31422},{"krate":0,"index":31428},{"krate":0,"index":31434},{"krate":0,"index":31438},{"krate":0,"index":31442},{"krate":0,"index":31450},{"krate":0,"index":33072},{"krate":0,"index":33084},{"krate":0,"index":33078},{"krate":0,"index":33096},{"krate":0,"index":33090},{"krate":0,"index":33108},{"krate":0,"index":33102},{"krate":0,"index":31458},{"krate":0,"index":31460},{"krate":0,"index":31472},{"krate":0,"index":31476},{"krate":0,"index":31480},{"krate":0,"index":31484},{"krate":0,"index":31488},{"krate":0,"index":31492},{"krate":0,"index":31498},{"krate":0,"index":31504},{"krate":0,"index":31508},{"krate":0,"index":31512},{"krate":0,"index":31520},{"krate":0,"index":33114},{"krate":0,"index":33126},{"krate":0,"index":33120},{"krate":0,"index":33138},{"krate":0,"index":33132},{"krate":0,"index":33150},{"krate":0,"index":33144},{"krate":0,"index":31528},{"krate":0,"index":31530},{"krate":0,"index":31542},{"krate":0,"index":31546},{"krate":0,"index":31550},{"krate":0,"index":31554},{"krate":0,"index":31558},{"krate":0,"index":31562},{"krate":0,"index":31568},{"krate":0,"index":31574},{"krate":0,"index":31578},{"krate":0,"index":31582},{"krate":0,"index":31590},{"krate":0,"index":33156},{"krate":0,"index":33168},{"krate":0,"index":33162},{"krate":0,"index":33180},{"krate":0,"index":33174},{"krate":0,"index":33192},{"krate":0,"index":33186},{"krate":0,"index":31598},{"krate":0,"index":31600},{"krate":0,"index":31612},{"krate":0,"index":31616},{"krate":0,"index":31620},{"krate":0,"index":31624},{"krate":0,"index":31628},{"krate":0,"index":31632},{"krate":0,"index":31638},{"krate":0,"index":31644},{"krate":0,"index":31648},{"krate":0,"index":31652},{"krate":0,"index":31660},{"krate":0,"index":33198},{"krate":0,"index":33210},{"krate":0,"index":33204},{"krate":0,"index":33222},{"krate":0,"index":33216},{"krate":0,"index":33234},{"krate":0,"index":33228},{"krate":0,"index":31668},{"krate":0,"index":31670},{"krate":0,"index":31682},{"krate":0,"index":31686},{"krate":0,"index":31690},{"krate":0,"index":31694},{"krate":0,"index":31698},{"krate":0,"index":31702},{"krate":0,"index":31708},{"krate":0,"index":31714},{"krate":0,"index":31718},{"krate":0,"index":31722},{"krate":0,"index":31730},{"krate":0,"index":33240},{"krate":0,"index":33252},{"krate":0,"index":33246},{"krate":0,"index":33264},{"krate":0,"index":33258},{"krate":0,"index":33276},{"krate":0,"index":33270},{"krate":0,"index":31738},{"krate":0,"index":31740},{"krate":0,"index":31752},{"krate":0,"index":31756},{"krate":0,"index":31760},{"krate":0,"index":31764},{"krate":0,"index":31768},{"krate":0,"index":31772},{"krate":0,"index":31778},{"krate":0,"index":31784},{"krate":0,"index":31788},{"krate":0,"index":31792},{"krate":0,"index":31800},{"krate":0,"index":33282},{"krate":0,"index":33294},{"krate":0,"index":33288},{"krate":0,"index":33306},{"krate":0,"index":33300},{"krate":0,"index":33318},{"krate":0,"index":33312},{"krate":0,"index":31808},{"krate":0,"index":31810},{"krate":0,"index":31822},{"krate":0,"index":31826},{"krate":0,"index":31830},{"krate":0,"index":31834},{"krate":0,"index":31838},{"krate":0,"index":31842},{"krate":0,"index":31848},{"krate":0,"index":31854},{"krate":0,"index":31858},{"krate":0,"index":31862},{"krate":0,"index":31870},{"krate":0,"index":33324},{"krate":0,"index":33336},{"krate":0,"index":33330},{"krate":0,"index":33348},{"krate":0,"index":33342},{"krate":0,"index":33360},{"krate":0,"index":33354},{"krate":0,"index":31878},{"krate":0,"index":31880},{"krate":0,"index":31892},{"krate":0,"index":31896},{"krate":0,"index":31900},{"krate":0,"index":31904},{"krate":0,"index":31908},{"krate":0,"index":31912},{"krate":0,"index":31918},{"krate":0,"index":31924},{"krate":0,"index":31928},{"krate":0,"index":31932},{"krate":0,"index":31940},{"krate":0,"index":33366},{"krate":0,"index":33378},{"krate":0,"index":33372},{"krate":0,"index":33390},{"krate":0,"index":33384},{"krate":0,"index":33402},{"krate":0,"index":33396},{"krate":0,"index":31948},{"krate":0,"index":31950},{"krate":0,"index":31962},{"krate":0,"index":31966},{"krate":0,"index":31970},{"krate":0,"index":31974},{"krate":0,"index":31978},{"krate":0,"index":31982},{"krate":0,"index":31988},{"krate":0,"index":31994},{"krate":0,"index":31998},{"krate":0,"index":32002},{"krate":0,"index":32010},{"krate":0,"index":33408},{"krate":0,"index":33420},{"krate":0,"index":33414},{"krate":0,"index":33432},{"krate":0,"index":33426},{"krate":0,"index":33444},{"krate":0,"index":33438},{"krate":0,"index":32018},{"krate":0,"index":32020},{"krate":0,"index":32032},{"krate":0,"index":32036},{"krate":0,"index":32040},{"krate":0,"index":32044},{"krate":0,"index":32048},{"krate":0,"index":32052},{"krate":0,"index":32058},{"krate":0,"index":32064},{"krate":0,"index":32068},{"krate":0,"index":32072},{"krate":0,"index":32080},{"krate":0,"index":33450},{"krate":0,"index":33462},{"krate":0,"index":33456},{"krate":0,"index":33474},{"krate":0,"index":33468},{"krate":0,"index":33486},{"krate":0,"index":33480},{"krate":0,"index":32088},{"krate":0,"index":32090},{"krate":0,"index":32102},{"krate":0,"index":2670},{"krate":0,"index":33492},{"krate":0,"index":33496},{"krate":0,"index":33500},{"krate":0,"index":33504},{"krate":0,"index":33508},{"krate":0,"index":33512},{"krate":0,"index":33516},{"krate":0,"index":33520},{"krate":0,"index":33524},{"krate":0,"index":33528},{"krate":0,"index":33532},{"krate":0,"index":33536},{"krate":0,"index":33540},{"krate":0,"index":33544},{"krate":0,"index":33548},{"krate":0,"index":33552},{"krate":0,"index":33556},{"krate":0,"index":33560},{"krate":0,"index":33564},{"krate":0,"index":33568},{"krate":0,"index":33572},{"krate":0,"index":33576},{"krate":0,"index":33580},{"krate":0,"index":33584},{"krate":0,"index":33588},{"krate":0,"index":33592},{"krate":0,"index":33596},{"krate":0,"index":33600},{"krate":0,"index":33604},{"krate":0,"index":33608},{"krate":0,"index":33612},{"krate":0,"index":33616},{"krate":0,"index":33620}],"decl_id":null,"docs":" Implementations of things like `Eq` for fixed-length arrays\n up to a certain length. Eventually we should able to generalize\n to all lengths.","sig":null,"attributes":[{"value":"unstable(feature = \"fixed_size_array\",\n           reason =\n               \"traits and impls are better expressed through generic integer constants\",\n           issue = \"27778\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":766790,"byte_end":766981,"line_start":17,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":2644},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":767752,"byte_end":767766,"line_start":43,"line_end":43,"column_start":18,"column_end":32},"name":"FixedSizeArray","qualname":"::array::FixedSizeArray","value":"FixedSizeArray<T>","parent":null,"children":[{"krate":0,"index":2646},{"krate":0,"index":2648}],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":767825,"byte_end":767833,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::array::FixedSizeArray::as_slice","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":2644},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":767901,"byte_end":767913,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::array::FixedSizeArray::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":{"krate":0,"index":2644},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":29784},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768315,"byte_end":768332,"line_start":64,"line_end":64,"column_start":12,"column_end":29},"name":"TryFromSliceError","qualname":"::array::TryFromSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from a slice to an array fails.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768223,"byte_end":768273,"line_start":62,"line_end":62,"column_start":1,"column_end":51}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768304,"byte_end":768337,"line_start":64,"line_end":64,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768781,"byte_end":768794,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"name":"__description","qualname":"<TryFromSliceError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2672},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"libcore/sync/mod.rs","parent":null,"children":[{"krate":0,"index":2674}],"decl_id":null,"docs":" Synchronization primitives\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":776386,"byte_end":776432,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":2674},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"atomic","qualname":"::sync::atomic","value":"libcore/sync/atomic.rs","parent":null,"children":[{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":33624},{"krate":0,"index":33634},{"krate":0,"index":33630},{"krate":0,"index":33626},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2734},{"krate":0,"index":2754},{"krate":0,"index":2758},{"krate":0,"index":2762},{"krate":0,"index":33636},{"krate":0,"index":33638},{"krate":0,"index":33640},{"krate":0,"index":33644},{"krate":0,"index":33648},{"krate":0,"index":33652},{"krate":0,"index":33654},{"krate":0,"index":33684},{"krate":0,"index":33686},{"krate":0,"index":33688},{"krate":0,"index":33692},{"krate":0,"index":33696},{"krate":0,"index":33700},{"krate":0,"index":33702},{"krate":0,"index":33732},{"krate":0,"index":33734},{"krate":0,"index":33736},{"krate":0,"index":33740},{"krate":0,"index":33744},{"krate":0,"index":33748},{"krate":0,"index":33750},{"krate":0,"index":33780},{"krate":0,"index":33782},{"krate":0,"index":33784},{"krate":0,"index":33788},{"krate":0,"index":33792},{"krate":0,"index":33796},{"krate":0,"index":33798},{"krate":0,"index":33828},{"krate":0,"index":33830},{"krate":0,"index":33832},{"krate":0,"index":33836},{"krate":0,"index":33840},{"krate":0,"index":33844},{"krate":0,"index":33846},{"krate":0,"index":33876},{"krate":0,"index":33878},{"krate":0,"index":33880},{"krate":0,"index":33884},{"krate":0,"index":33888},{"krate":0,"index":33892},{"krate":0,"index":33894},{"krate":0,"index":33924},{"krate":0,"index":33926},{"krate":0,"index":33928},{"krate":0,"index":33932},{"krate":0,"index":33936},{"krate":0,"index":33940},{"krate":0,"index":33942},{"krate":0,"index":33972},{"krate":0,"index":33974},{"krate":0,"index":33976},{"krate":0,"index":33980},{"krate":0,"index":33984},{"krate":0,"index":33988},{"krate":0,"index":33990},{"krate":0,"index":34020},{"krate":0,"index":34022},{"krate":0,"index":34024},{"krate":0,"index":34028},{"krate":0,"index":34032},{"krate":0,"index":34036},{"krate":0,"index":34038},{"krate":0,"index":34068},{"krate":0,"index":34070},{"krate":0,"index":34072},{"krate":0,"index":34076},{"krate":0,"index":34080},{"krate":0,"index":34084},{"krate":0,"index":34086},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":2784},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2794},{"krate":0,"index":2798}],"decl_id":null,"docs":" Atomic types","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":779601,"byte_end":779647,"line_start":87,"line_end":87,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2684},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780311,"byte_end":780325,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"spin_loop_hint","qualname":"::sync::atomic::spin_loop_hint","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Save power or switch hyperthreads in a busy-wait spin-loop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780238,"byte_end":780247,"line_start":105,"line_end":105,"column_start":1,"column_end":10}},{"value":"stable(feature = \"spin_loop_hint\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780248,"byte_end":780303,"line_start":106,"line_end":106,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2686},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780841,"byte_end":780851,"line_start":126,"line_end":126,"column_start":12,"column_end":22},"name":"AtomicBool","qualname":"::sync::atomic::AtomicBool","value":"AtomicBool {  }","parent":null,"children":[{"krate":0,"index":1469}],"decl_id":null,"docs":" A boolean type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780752,"byte_end":780783,"line_start":124,"line_end":124,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780784,"byte_end":780829,"line_start":125,"line_end":125,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2694},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781498,"byte_end":781507,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"AtomicPtr","qualname":"::sync::atomic::AtomicPtr","value":"AtomicPtr {  }","parent":null,"children":[{"krate":0,"index":1471}],"decl_id":null,"docs":" A raw pointer type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781407,"byte_end":781440,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781441,"byte_end":781486,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23725},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782972,"byte_end":782979,"line_start":192,"line_end":192,"column_start":5,"column_end":12},"name":"Relaxed","qualname":"::sync::atomic::Ordering::Relaxed","value":"Ordering::Relaxed","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":" No ordering constraints, only atomic operations.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782922,"byte_end":782967,"line_start":191,"line_end":191,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23727},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783278,"byte_end":783285,"line_start":199,"line_end":199,"column_start":5,"column_end":12},"name":"Release","qualname":"::sync::atomic::Ordering::Release","value":"Ordering::Release","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":" When coupled with a store, all previous writes become visible\n to the other threads that perform a load with [`Acquire`] ordering\n on the same value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783228,"byte_end":783273,"line_start":198,"line_end":198,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23729},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783582,"byte_end":783589,"line_start":206,"line_end":206,"column_start":5,"column_end":12},"name":"Acquire","qualname":"::sync::atomic::Ordering::Acquire","value":"Ordering::Acquire","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":" When coupled with a load, all subsequent loads will see data\n written before a store with [`Release`] ordering on the same value\n in other threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783532,"byte_end":783577,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23731},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783887,"byte_end":783893,"line_start":213,"line_end":213,"column_start":5,"column_end":11},"name":"AcqRel","qualname":"::sync::atomic::Ordering::AcqRel","value":"Ordering::AcqRel","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":" When coupled with a load, uses [`Acquire`] ordering, and with a store\n [`Release`] ordering.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":783837,"byte_end":783882,"line_start":212,"line_end":212,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23733},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784088,"byte_end":784094,"line_start":217,"line_end":217,"column_start":5,"column_end":11},"name":"SeqCst","qualname":"::sync::atomic::Ordering::SeqCst","value":"Ordering::SeqCst","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":" Like `AcqRel` with the additional guarantee that all threads see all\n sequentially consistent operations in the same order.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784038,"byte_end":784083,"line_start":216,"line_end":216,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":23735},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784250,"byte_end":784265,"line_start":221,"line_end":221,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sync::atomic::Ordering::__Nonexhaustive","value":"Ordering::__Nonexhaustive","parent":{"krate":0,"index":33624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"future_atomic_orderings\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784184,"byte_end":784245,"line_start":220,"line_end":220,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":33624},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782713,"byte_end":782721,"line_start":185,"line_end":185,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::sync::atomic::Ordering","value":"Ordering::{Relaxed, Release, Acquire, AcqRel, SeqCst, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":23725},{"krate":0,"index":23727},{"krate":0,"index":23729},{"krate":0,"index":23731},{"krate":0,"index":23733},{"krate":0,"index":23735}],"decl_id":null,"docs":" Atomic memory orderings","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782628,"byte_end":782673,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782704,"byte_end":784268,"line_start":185,"line_end":222,"column_start":1,"column_end":2}}]},{"kind":"Const","id":{"krate":0,"index":2704},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784451,"byte_end":784467,"line_start":229,"line_end":229,"column_start":11,"column_end":27},"name":"ATOMIC_BOOL_INIT","qualname":"::sync::atomic::ATOMIC_BOOL_INIT","value":"AtomicBool","parent":null,"children":[],"decl_id":null,"docs":" An [`AtomicBool`] initialized to `false`.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784363,"byte_end":784394,"line_start":227,"line_end":227,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784395,"byte_end":784440,"line_start":228,"line_end":228,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784885,"byte_end":784888,"line_start":245,"line_end":245,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicBool>::new","value":"fn (v: bool) -> AtomicBool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":785643,"byte_end":785650,"line_start":268,"line_end":268,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicBool>::get_mut","value":"fn (&mut self) -> &mut bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":786235,"byte_end":786245,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicBool>::into_inner","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":787017,"byte_end":787021,"line_start":315,"line_end":315,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicBool>::load","value":"fn (&self, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2716},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":787897,"byte_end":787902,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicBool>::store","value":"fn (&self, val: bool, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2718},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":788648,"byte_end":788652,"line_start":370,"line_end":370,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicBool>::swap","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":789789,"byte_end":789805,"line_start":400,"line_end":400,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicBool>::compare_and_swap","value":"fn (&self, current: bool, new: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2722},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":791831,"byte_end":791847,"line_start":445,"line_end":445,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicBool>::compare_exchange","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2724},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":793934,"byte_end":793955,"line_start":496,"line_end":496,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicBool>::compare_exchange_weak","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2726},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":795364,"byte_end":795373,"line_start":536,"line_end":536,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<AtomicBool>::fetch_and","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":796486,"byte_end":796496,"line_start":567,"line_end":567,"column_start":12,"column_end":22},"name":"fetch_nand","qualname":"<AtomicBool>::fetch_nand","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":798034,"byte_end":798042,"line_start":609,"line_end":609,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<AtomicBool>::fetch_or","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799090,"byte_end":799099,"line_start":639,"line_end":639,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<AtomicBool>::fetch_xor","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784507,"byte_end":784538,"line_start":231,"line_end":231,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799576,"byte_end":799579,"line_start":658,"line_end":658,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicPtr<T>>::new","value":"fn (p: *mut T) -> AtomicPtr<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":800236,"byte_end":800243,"line_start":678,"line_end":678,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicPtr<T>>::get_mut","value":"fn (&mut self) -> &mut *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":800826,"byte_end":800836,"line_start":697,"line_end":697,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicPtr<T>>::into_inner","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":801624,"byte_end":801628,"line_start":726,"line_end":726,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicPtr<T>>::load","value":"fn (&self, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":802533,"byte_end":802538,"line_start":758,"line_end":758,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicPtr<T>>::store","value":"fn (&self, ptr: *mut T, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":803305,"byte_end":803309,"line_start":785,"line_end":785,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicPtr<T>>::swap","value":"fn (&self, ptr: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":804307,"byte_end":804323,"line_start":814,"line_end":814,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicPtr<T>>::compare_and_swap","value":"fn (&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":805939,"byte_end":805955,"line_start":852,"line_end":852,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicPtr<T>>::compare_exchange","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":808267,"byte_end":808288,"line_start":907,"line_end":907,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicPtr<T>>::compare_exchange_weak","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799221,"byte_end":799254,"line_start":644,"line_end":644,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2786},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":840863,"byte_end":840868,"line_start":1714,"line_end":1714,"column_start":8,"column_end":13},"name":"fence","qualname":"::sync::atomic::fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" An atomic fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":840800,"byte_end":840809,"line_start":1712,"line_end":1712,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":840810,"byte_end":840855,"line_start":1713,"line_end":1713,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2788},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":844855,"byte_end":844869,"line_start":1804,"line_end":1804,"column_start":8,"column_end":22},"name":"compiler_fence","qualname":"::sync::atomic::compiler_fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler memory fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":844781,"byte_end":844790,"line_start":1802,"line_end":1802,"column_start":1,"column_end":10}},{"value":"stable(feature = \"compiler_fences\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":844791,"byte_end":844847,"line_start":1803,"line_end":1803,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2802},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cell","qualname":"::cell","value":"libcore/cell.rs","parent":null,"children":[{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2814},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2838},{"krate":0,"index":2842},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2864},{"krate":0,"index":2868},{"krate":0,"index":2872},{"krate":0,"index":2888},{"krate":0,"index":2892},{"krate":0,"index":2894},{"krate":0,"index":2896},{"krate":0,"index":2898},{"krate":0,"index":2902},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2912},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2934},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2952},{"krate":0,"index":2956},{"krate":0,"index":2960},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2978},{"krate":0,"index":2982},{"krate":0,"index":2986},{"krate":0,"index":2988},{"krate":0,"index":2990},{"krate":0,"index":2994},{"krate":0,"index":2998},{"krate":0,"index":3002},{"krate":0,"index":3004},{"krate":0,"index":3010},{"krate":0,"index":3016},{"krate":0,"index":3018},{"krate":0,"index":3022},{"krate":0,"index":3026},{"krate":0,"index":3028},{"krate":0,"index":3032},{"krate":0,"index":3036},{"krate":0,"index":3038},{"krate":0,"index":3044},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3054},{"krate":0,"index":3056},{"krate":0,"index":3058},{"krate":0,"index":3064},{"krate":0,"index":3068},{"krate":0,"index":3072},{"krate":0,"index":3076},{"krate":0,"index":3078}],"decl_id":null,"docs":" Shareable mutable containers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":853535,"byte_end":853581,"line_start":180,"line_end":180,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2828},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854613,"byte_end":854617,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"Cell","qualname":"::cell::Cell","value":"Cell {  }","parent":null,"children":[{"krate":0,"index":1509}],"decl_id":null,"docs":" A mutable memory location.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854556,"byte_end":854601,"line_start":220,"line_end":220,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854959,"byte_end":854962,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"get","qualname":"<Cell<T>>::get","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":857124,"byte_end":857127,"line_start":333,"line_end":333,"column_start":18,"column_end":21},"name":"new","qualname":"<Cell<T>>::new","value":"fn (value: T) -> Cell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":857539,"byte_end":857545,"line_start":352,"line_end":352,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Cell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858065,"byte_end":858072,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Cell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858427,"byte_end":858430,"line_start":392,"line_end":392,"column_start":12,"column_end":15},"name":"set","qualname":"<Cell<T>>::set","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858981,"byte_end":858985,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"swap","qualname":"<Cell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":859528,"byte_end":859535,"line_start":435,"line_end":435,"column_start":12,"column_end":19},"name":"replace","qualname":"<Cell<T>>::replace","value":"fn (&self, val: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":859917,"byte_end":859927,"line_start":452,"line_end":452,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Cell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":860386,"byte_end":860390,"line_start":472,"line_end":472,"column_start":12,"column_end":16},"name":"take","qualname":"<Cell<T>>::take","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2894},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":860772,"byte_end":860779,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"RefCell","qualname":"::cell::RefCell","value":"RefCell {  }","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1543}],"decl_id":null,"docs":" A mutable memory location with dynamically checked borrow rules","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":860715,"byte_end":860760,"line_start":483,"line_end":483,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2896},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861004,"byte_end":861015,"line_start":491,"line_end":491,"column_start":12,"column_end":23},"name":"BorrowError","qualname":"::cell::BorrowError","value":"BorrowError {  }","parent":null,"children":[{"krate":0,"index":1547}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":860941,"byte_end":860992,"line_start":490,"line_end":490,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":2906},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861598,"byte_end":861612,"line_start":511,"line_end":511,"column_start":12,"column_end":26},"name":"BorrowMutError","qualname":"::cell::BorrowMutError","value":"BorrowMutError {  }","parent":null,"children":[{"krate":0,"index":1549}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861535,"byte_end":861586,"line_start":510,"line_end":510,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":862547,"byte_end":862550,"line_start":547,"line_end":547,"column_start":18,"column_end":21},"name":"new","qualname":"<RefCell<T>>::new","value":"fn (value: T) -> RefCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":863005,"byte_end":863015,"line_start":567,"line_end":567,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RefCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":863965,"byte_end":863972,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"replace","qualname":"<RefCell<T>>::replace","value":"fn (&self, t: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":864761,"byte_end":864773,"line_start":620,"line_end":620,"column_start":12,"column_end":24},"name":"replace_with","qualname":"<RefCell<T>>::replace_with","value":"fn <F> (&self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2932},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":865610,"byte_end":865614,"line_start":647,"line_end":647,"column_start":12,"column_end":16},"name":"swap","qualname":"<RefCell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":866769,"byte_end":866775,"line_start":691,"line_end":691,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RefCell<T>>::borrow","value":"fn (&self) -> Ref<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":867629,"byte_end":867639,"line_start":722,"line_end":722,"column_start":12,"column_end":22},"name":"try_borrow","qualname":"<RefCell<T>>::try_borrow","value":"fn (&self) -> Result<Ref<T>, BorrowError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":868939,"byte_end":868949,"line_start":771,"line_end":771,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<RefCell<T>>::borrow_mut","value":"fn (&self) -> RefMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":869739,"byte_end":869753,"line_start":798,"line_end":798,"column_start":12,"column_end":26},"name":"try_borrow_mut","qualname":"<RefCell<T>>::try_borrow_mut","value":"fn (&self) -> Result<RefMut<T>, BorrowMutError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":870378,"byte_end":870384,"line_start":821,"line_end":821,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<RefCell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":871361,"byte_end":871368,"line_start":851,"line_end":851,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RefCell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3002},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":874862,"byte_end":874865,"line_start":983,"line_end":983,"column_start":12,"column_end":15},"name":"Ref","qualname":"::cell::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1591}],"decl_id":null,"docs":" Wraps a borrowed reference to a value in a `RefCell` box.\n A wrapper type for an immutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":874805,"byte_end":874850,"line_start":982,"line_end":982,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3012},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":875593,"byte_end":875598,"line_start":1009,"line_end":1009,"column_start":12,"column_end":17},"name":"clone","qualname":"<Ref<'b, T>>::clone","value":"fn (orig: &Ref<'b, T>) -> Ref<'b, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3014},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":876444,"byte_end":876447,"line_start":1036,"line_end":1036,"column_start":12,"column_end":15},"name":"map","qualname":"<Ref<'b, T>>::map","value":"fn <U, F> (orig: Ref<'b, T>, f: F) -> Ref<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3024},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":877902,"byte_end":877905,"line_start":1082,"line_end":1082,"column_start":12,"column_end":15},"name":"map","qualname":"<RefMut<'b, T>>::map","value":"fn <U, F> (orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3036},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":878967,"byte_end":878973,"line_start":1124,"line_end":1124,"column_start":12,"column_end":18},"name":"RefMut","qualname":"::cell::RefMut","value":"RefMut {  }","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1637}],"decl_id":null,"docs":" A wrapper type for a mutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":878910,"byte_end":878955,"line_start":1123,"line_end":1123,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3054},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":881628,"byte_end":881638,"line_start":1195,"line_end":1195,"column_start":12,"column_end":22},"name":"UnsafeCell","qualname":"::cell::UnsafeCell","value":"UnsafeCell {  }","parent":null,"children":[{"krate":0,"index":1661}],"decl_id":null,"docs":" The core primitive for interior mutability in Rust.","sig":null,"attributes":[{"value":"lang = \"unsafe_cell\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":881547,"byte_end":881570,"line_start":1193,"line_end":1193,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":881571,"byte_end":881616,"line_start":1194,"line_end":1194,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3060},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":882173,"byte_end":882176,"line_start":1217,"line_end":1217,"column_start":18,"column_end":21},"name":"new","qualname":"<UnsafeCell<T>>::new","value":"fn (value: T) -> UnsafeCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":882534,"byte_end":882544,"line_start":1234,"line_end":1234,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<UnsafeCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":883152,"byte_end":883155,"line_start":1258,"line_end":1258,"column_start":12,"column_end":15},"name":"get","qualname":"<UnsafeCell<T>>::get","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3080},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"libcore/char.rs","parent":null,"children":[{"krate":0,"index":3082},{"krate":0,"index":3084},{"krate":0,"index":3086},{"krate":0,"index":3092},{"krate":0,"index":3094},{"krate":0,"index":3100},{"krate":0,"index":3102},{"krate":0,"index":3104},{"krate":0,"index":3106},{"krate":0,"index":3108},{"krate":0,"index":3110},{"krate":0,"index":3112},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3120},{"krate":0,"index":3122},{"krate":0,"index":3124},{"krate":0,"index":3128},{"krate":0,"index":34116},{"krate":0,"index":34122},{"krate":0,"index":34118},{"krate":0,"index":3132},{"krate":0,"index":34126},{"krate":0,"index":34144},{"krate":0,"index":34140},{"krate":0,"index":34136},{"krate":0,"index":34132},{"krate":0,"index":34128},{"krate":0,"index":3136},{"krate":0,"index":3140},{"krate":0,"index":3146},{"krate":0,"index":34146},{"krate":0,"index":34166},{"krate":0,"index":34162},{"krate":0,"index":34158},{"krate":0,"index":34152},{"krate":0,"index":34148},{"krate":0,"index":3152},{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3178},{"krate":0,"index":34168},{"krate":0,"index":34174},{"krate":0,"index":34170},{"krate":0,"index":34178},{"krate":0,"index":34184},{"krate":0,"index":34180},{"krate":0,"index":3198},{"krate":0,"index":3210},{"krate":0,"index":3214},{"krate":0,"index":3216},{"krate":0,"index":34188},{"krate":0,"index":34194},{"krate":0,"index":34190},{"krate":0,"index":34198},{"krate":0,"index":34204},{"krate":0,"index":34200},{"krate":0,"index":3220},{"krate":0,"index":3234},{"krate":0,"index":3238},{"krate":0,"index":3240},{"krate":0,"index":34208},{"krate":0,"index":34214},{"krate":0,"index":34210},{"krate":0,"index":3244},{"krate":0,"index":3252},{"krate":0,"index":3254},{"krate":0,"index":3256},{"krate":0,"index":34218},{"krate":0,"index":34224},{"krate":0,"index":34220},{"krate":0,"index":3260},{"krate":0,"index":34228},{"krate":0,"index":34238},{"krate":0,"index":34234},{"krate":0,"index":34230},{"krate":0,"index":3262},{"krate":0,"index":3272}],"decl_id":null,"docs":" Character manipulation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884547,"byte_end":884572,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"stable(feature = \"core_char\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884573,"byte_end":884623,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":3118},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":887552,"byte_end":887555,"line_start":78,"line_end":78,"column_start":11,"column_end":14},"name":"MAX","qualname":"::char::MAX","value":"char","parent":null,"children":[],"decl_id":null,"docs":" The highest valid code point a `char` can have.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":887496,"byte_end":887541,"line_start":77,"line_end":77,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3120},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":888692,"byte_end":888700,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::char::from_u32","value":"fn (i: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":888629,"byte_end":888638,"line_start":126,"line_end":126,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":888639,"byte_end":888684,"line_start":127,"line_end":127,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3122},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":889815,"byte_end":889833,"line_start":173,"line_end":173,"column_start":15,"column_end":33},"name":"from_u32_unchecked","qualname":"::char::from_u32_unchecked","value":"fn (i: u32) -> char","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`, ignoring validity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":889731,"byte_end":889740,"line_start":171,"line_end":171,"column_start":1,"column_end":10}},{"value":"stable(feature = \"char_from_unchecked\", since = \"1.5.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":889741,"byte_end":889800,"line_start":172,"line_end":172,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":34116},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":891318,"byte_end":891332,"line_start":215,"line_end":215,"column_start":12,"column_end":26},"name":"ParseCharError","qualname":"::char::ParseCharError","value":"ParseCharError {  }","parent":null,"children":[{"krate":0,"index":23757}],"decl_id":null,"docs":" An error which can be returned when parsing a char.\n","sig":null,"attributes":[{"value":"stable(feature = \"char_from_str\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":891228,"byte_end":891282,"line_start":213,"line_end":213,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3134},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":891565,"byte_end":891578,"line_start":224,"line_end":224,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseCharError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34146},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":893218,"byte_end":893234,"line_start":285,"line_end":285,"column_start":12,"column_end":28},"name":"CharTryFromError","qualname":"::char::CharTryFromError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from u32 to char fails.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":893111,"byte_end":893161,"line_start":283,"line_end":283,"column_start":1,"column_end":51}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":893207,"byte_end":893239,"line_start":285,"line_end":285,"column_start":1,"column_end":33}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":893207,"byte_end":893239,"line_start":285,"line_end":285,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":3156},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":894674,"byte_end":894684,"line_start":350,"line_end":350,"column_start":8,"column_end":18},"name":"from_digit","qualname":"::char::from_digit","value":"fn (num: u32, radix: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a digit in the given radix to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":894611,"byte_end":894620,"line_start":348,"line_end":348,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":894621,"byte_end":894666,"line_start":349,"line_end":349,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3158},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895344,"byte_end":895351,"line_start":373,"line_end":373,"column_start":11,"column_end":18},"name":"CharExt","qualname":"::char::CharExt","value":"CharExt","parent":null,"children":[{"krate":0,"index":3160},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3166},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3176}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895410,"byte_end":895418,"line_start":375,"line_end":375,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::char::CharExt::is_digit","value":"fn (self, radix: u32) -> bool","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895502,"byte_end":895510,"line_start":377,"line_end":377,"column_start":8,"column_end":16},"name":"to_digit","qualname":"::char::CharExt::to_digit","value":"fn (self, radix: u32) -> Option<u32>","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3164},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895601,"byte_end":895615,"line_start":379,"line_end":379,"column_start":8,"column_end":22},"name":"escape_unicode","qualname":"::char::CharExt::escape_unicode","value":"fn (self) -> EscapeUnicode","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3166},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895696,"byte_end":895710,"line_start":381,"line_end":381,"column_start":8,"column_end":22},"name":"escape_default","qualname":"::char::CharExt::escape_default","value":"fn (self) -> EscapeDefault","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895805,"byte_end":895817,"line_start":383,"line_end":383,"column_start":8,"column_end":20},"name":"escape_debug","qualname":"::char::CharExt::escape_debug","value":"fn (self) -> EscapeDebug","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3170},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895896,"byte_end":895904,"line_start":385,"line_end":385,"column_start":8,"column_end":16},"name":"len_utf8","qualname":"::char::CharExt::len_utf8","value":"fn (self) -> usize","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3172},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895977,"byte_end":895986,"line_start":387,"line_end":387,"column_start":8,"column_end":17},"name":"len_utf16","qualname":"::char::CharExt::len_utf16","value":"fn (self) -> usize","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3174},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":896075,"byte_end":896086,"line_start":389,"line_end":389,"column_start":8,"column_end":19},"name":"encode_utf8","qualname":"::char::CharExt::encode_utf8","value":"fn (self, dst: &mut [u8]) -> &mut str","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3176},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":896194,"byte_end":896206,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"encode_utf16","qualname":"::char::CharExt::encode_utf16","value":"fn (self, dst: &mut [u16]) -> &mut [u16]","parent":{"krate":0,"index":3158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895123,"byte_end":895145,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":895193,"byte_end":895333,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":34168},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":901878,"byte_end":901891,"line_start":547,"line_end":547,"column_start":12,"column_end":25},"name":"EscapeUnicode","qualname":"::char::EscapeUnicode","value":"EscapeUnicode {  }","parent":null,"children":[{"krate":0,"index":23767},{"krate":0,"index":23769},{"krate":0,"index":23771}],"decl_id":null,"docs":" Returns an iterator that yields the hexadecimal Unicode escape of a\n character, as `char`s.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":901821,"byte_end":901866,"line_start":546,"line_end":546,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34188},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":905548,"byte_end":905561,"line_start":668,"line_end":668,"column_start":12,"column_end":25},"name":"EscapeDefault","qualname":"::char::EscapeDefault","value":"EscapeDefault {  }","parent":null,"children":[{"krate":0,"index":23785}],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":905491,"byte_end":905536,"line_start":667,"line_end":667,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34208},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":908815,"byte_end":908826,"line_start":781,"line_end":781,"column_start":12,"column_end":23},"name":"EscapeDebug","qualname":"::char::EscapeDebug","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"char_escape_debug\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":908721,"byte_end":908779,"line_start":779,"line_end":779,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":34218},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909665,"byte_end":909675,"line_start":809,"line_end":809,"column_start":12,"column_end":22},"name":"DecodeUtf8","qualname":"::char::DecodeUtf8","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over an iterator of bytes of the characters the bytes represent\n as UTF-8\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909576,"byte_end":909629,"line_start":807,"line_end":807,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":3260},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909839,"byte_end":909850,"line_start":814,"line_end":814,"column_start":8,"column_end":19},"name":"decode_utf8","qualname":"::char::decode_utf8","value":"fn <I> (i: I) -> DecodeUtf8<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an `Iterator` of bytes as UTF-8.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909768,"byte_end":909821,"line_start":812,"line_end":812,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909822,"byte_end":909831,"line_start":813,"line_end":813,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":34228},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":910136,"byte_end":910151,"line_start":821,"line_end":821,"column_start":12,"column_end":27},"name":"InvalidSequence","qualname":"::char::InvalidSequence","value":"","parent":null,"children":[],"decl_id":null,"docs":" `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":910039,"byte_end":910092,"line_start":819,"line_end":819,"column_start":1,"column_end":54}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":910125,"byte_end":910156,"line_start":821,"line_end":821,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":3274},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"panicking","qualname":"::panicking","value":"libcore/panicking.rs","parent":null,"children":[{"krate":0,"index":3276},{"krate":0,"index":3278},{"krate":0,"index":3280},{"krate":0,"index":3282}],"decl_id":null,"docs":" Panic support for libcore","sig":null,"attributes":[{"value":"allow(dead_code, missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":914975,"byte_end":915009,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"unstable(feature = \"core_panic\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":915010,"byte_end":915193,"line_start":34,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":3278},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":915288,"byte_end":915293,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"panic","qualname":"::panicking::panic","value":"fn (expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":915205,"byte_end":915212,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":915213,"byte_end":915229,"line_start":41,"line_end":41,"column_start":9,"column_end":25}},{"value":"lang = \"panic\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":915263,"byte_end":915280,"line_start":42,"line_end":42,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":3282},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":916279,"byte_end":916288,"line_start":63,"line_end":63,"column_start":8,"column_end":17},"name":"panic_fmt","qualname":"::panicking::panic_fmt","value":"fn (fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":916247,"byte_end":916254,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":916255,"byte_end":916271,"line_start":62,"line_end":62,"column_start":9,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3286},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"libcore/iter/mod.rs","parent":null,"children":[{"krate":0,"index":3288},{"krate":0,"index":3290},{"krate":0,"index":3292},{"krate":0,"index":3294},{"krate":0,"index":3296},{"krate":0,"index":3298},{"krate":0,"index":3300},{"krate":0,"index":3302},{"krate":0,"index":3304},{"krate":0,"index":3310},{"krate":0,"index":3316},{"krate":0,"index":3322},{"krate":0,"index":3332},{"krate":0,"index":3340},{"krate":0,"index":3342},{"krate":0,"index":3344},{"krate":0,"index":3534},{"krate":0,"index":3648},{"krate":0,"index":3736},{"krate":0,"index":3848},{"krate":0,"index":3850},{"krate":0,"index":34912},{"krate":0,"index":34914},{"krate":0,"index":3862},{"krate":0,"index":3874},{"krate":0,"index":3878},{"krate":0,"index":34920},{"krate":0,"index":34926},{"krate":0,"index":34922},{"krate":0,"index":3884},{"krate":0,"index":3900},{"krate":0,"index":3910},{"krate":0,"index":3916},{"krate":0,"index":3918},{"krate":0,"index":34930},{"krate":0,"index":34936},{"krate":0,"index":34932},{"krate":0,"index":3920},{"krate":0,"index":3932},{"krate":0,"index":3940},{"krate":0,"index":3946},{"krate":0,"index":3948},{"krate":0,"index":3954},{"krate":0,"index":3960},{"krate":0,"index":34940},{"krate":0,"index":34946},{"krate":0,"index":34942},{"krate":0,"index":3962},{"krate":0,"index":3970},{"krate":0,"index":34950},{"krate":0,"index":34956},{"krate":0,"index":34952},{"krate":0,"index":3972},{"krate":0,"index":3982},{"krate":0,"index":34960},{"krate":0,"index":34966},{"krate":0,"index":34962},{"krate":0,"index":34970},{"krate":0,"index":34976},{"krate":0,"index":34972},{"krate":0,"index":3984},{"krate":0,"index":4004},{"krate":0,"index":4012},{"krate":0,"index":4014},{"krate":0,"index":34980},{"krate":0,"index":34986},{"krate":0,"index":34982},{"krate":0,"index":4016},{"krate":0,"index":4024},{"krate":0,"index":4028},{"krate":0,"index":4040},{"krate":0,"index":4052},{"krate":0,"index":4062},{"krate":0,"index":4064},{"krate":0,"index":4070},{"krate":0,"index":4072},{"krate":0,"index":34990},{"krate":0,"index":34992},{"krate":0,"index":4074},{"krate":0,"index":4078},{"krate":0,"index":4090},{"krate":0,"index":4098},{"krate":0,"index":4104},{"krate":0,"index":4106},{"krate":0,"index":4108},{"krate":0,"index":34996},{"krate":0,"index":34998},{"krate":0,"index":4114},{"krate":0,"index":4118},{"krate":0,"index":4132},{"krate":0,"index":4140},{"krate":0,"index":35002},{"krate":0,"index":35004},{"krate":0,"index":4142},{"krate":0,"index":4146},{"krate":0,"index":4158},{"krate":0,"index":4166},{"krate":0,"index":35008},{"krate":0,"index":35014},{"krate":0,"index":35010},{"krate":0,"index":4168},{"krate":0,"index":4184},{"krate":0,"index":4192},{"krate":0,"index":4198},{"krate":0,"index":4204},{"krate":0,"index":4206},{"krate":0,"index":35018},{"krate":0,"index":35024},{"krate":0,"index":35020},{"krate":0,"index":4208},{"krate":0,"index":4226},{"krate":0,"index":4228},{"krate":0,"index":4230},{"krate":0,"index":35028},{"krate":0,"index":35030},{"krate":0,"index":4234},{"krate":0,"index":4238},{"krate":0,"index":4250},{"krate":0,"index":35034},{"krate":0,"index":35036},{"krate":0,"index":4252},{"krate":0,"index":4256},{"krate":0,"index":4266},{"krate":0,"index":35040},{"krate":0,"index":35046},{"krate":0,"index":35042},{"krate":0,"index":4268},{"krate":0,"index":4286},{"krate":0,"index":4288},{"krate":0,"index":4294},{"krate":0,"index":35050},{"krate":0,"index":35056},{"krate":0,"index":35052},{"krate":0,"index":4296},{"krate":0,"index":4308},{"krate":0,"index":4310},{"krate":0,"index":35060},{"krate":0,"index":35062},{"krate":0,"index":4312},{"krate":0,"index":4316},{"krate":0,"index":35066},{"krate":0,"index":35068},{"krate":0,"index":4326},{"krate":0,"index":4330},{"krate":0,"index":4342},{"krate":0,"index":4350},{"krate":0,"index":35072},{"krate":0,"index":35078},{"krate":0,"index":35074},{"krate":0,"index":4352},{"krate":0,"index":4354},{"krate":0,"index":4372},{"krate":0,"index":4380},{"krate":0,"index":4386},{"krate":0,"index":4402},{"krate":0,"index":4410},{"krate":0,"index":35082},{"krate":0,"index":35084},{"krate":0,"index":4416},{"krate":0,"index":4420},{"krate":0,"index":4424},{"krate":0,"index":4436},{"krate":0,"index":4444},{"krate":0,"index":4450}],"decl_id":null,"docs":" Composable external iteration.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926487,"byte_end":926533,"line_start":303,"line_end":303,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":3414},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002466,"byte_end":1002474,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"Iterator","qualname":"::iter::iterator::Iterator","value":"Iterator","parent":null,"children":[{"krate":0,"index":3416},{"krate":0,"index":3418},{"krate":0,"index":3420},{"krate":0,"index":3422},{"krate":0,"index":3424},{"krate":0,"index":3426},{"krate":0,"index":3428},{"krate":0,"index":3430},{"krate":0,"index":3432},{"krate":0,"index":3434},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3440},{"krate":0,"index":3442},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3450},{"krate":0,"index":3452},{"krate":0,"index":3454},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3460},{"krate":0,"index":3462},{"krate":0,"index":3464},{"krate":0,"index":3466},{"krate":0,"index":3468},{"krate":0,"index":3470},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3476},{"krate":0,"index":3478},{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3484},{"krate":0,"index":3486},{"krate":0,"index":3488},{"krate":0,"index":3490},{"krate":0,"index":3492},{"krate":0,"index":3494},{"krate":0,"index":3496},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3502},{"krate":0,"index":3504},{"krate":0,"index":3506},{"krate":0,"index":3508},{"krate":0,"index":3510},{"krate":0,"index":3512},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3520}],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":3416},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002590,"byte_end":1002594,"line_start":37,"line_end":37,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::iterator::Iterator::Item","value":"type Item;","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002535,"byte_end":1002580,"line_start":36,"line_end":36,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1003716,"byte_end":1003720,"line_start":71,"line_end":71,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::iterator::Iterator::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1006391,"byte_end":1006400,"line_start":143,"line_end":143,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::iterator::Iterator::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1007674,"byte_end":1007679,"line_start":182,"line_end":182,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::iterator::Iterator::count","value":"fn (self) -> usize","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1008473,"byte_end":1008477,"line_start":208,"line_end":208,"column_start":8,"column_end":12},"name":"last","qualname":"::iter::iterator::Iterator::last","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1009985,"byte_end":1009988,"line_start":257,"line_end":257,"column_start":8,"column_end":11},"name":"nth","qualname":"::iter::iterator::Iterator::nth","value":"fn (&mut self, mut n: usize) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1011031,"byte_end":1011038,"line_start":293,"line_end":293,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::iterator::Iterator::step_by","value":"fn (self, step: usize) -> StepBy<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1012947,"byte_end":1012952,"line_start":349,"line_end":349,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::iterator::Iterator::chain","value":"fn <U> (self, other: U) -> Chain<Self, U::IntoIter>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1015731,"byte_end":1015734,"line_start":426,"line_end":426,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::iterator::Iterator::zip","value":"fn <U> (self, other: U) -> Zip<Self, U::IntoIter>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1017714,"byte_end":1017717,"line_start":482,"line_end":482,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::iterator::Iterator::map","value":"fn <B, F> (self, f: F) -> Map<Self, F>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1019240,"byte_end":1019248,"line_start":525,"line_end":525,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::iterator::Iterator::for_each","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1021305,"byte_end":1021311,"line_start":593,"line_end":593,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::iterator::Iterator::filter","value":"fn <P> (self, predicate: P) -> Filter<Self, P>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1023472,"byte_end":1023482,"line_start":650,"line_end":650,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::iterator::Iterator::filter_map","value":"fn <B, F> (self, f: F) -> FilterMap<Self, F>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1025055,"byte_end":1025064,"line_start":696,"line_end":696,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::iterator::Iterator::enumerate","value":"fn (self) -> Enumerate<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1026644,"byte_end":1026652,"line_start":742,"line_end":742,"column_start":8,"column_end":16},"name":"peekable","qualname":"::iter::iterator::Iterator::peekable","value":"fn (self) -> Peekable<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1028583,"byte_end":1028593,"line_start":803,"line_end":803,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::iter::iterator::Iterator::skip_while","value":"fn <P> (self, predicate: P) -> SkipWhile<Self, P>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1031237,"byte_end":1031247,"line_start":883,"line_end":883,"column_start":8,"column_end":18},"name":"take_while","qualname":"::iter::iterator::Iterator::take_while","value":"fn <P> (self, predicate: P) -> TakeWhile<Self, P>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1031902,"byte_end":1031906,"line_start":907,"line_end":907,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::iterator::Iterator::skip","value":"fn (self, n: usize) -> Skip<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1032755,"byte_end":1032759,"line_start":939,"line_end":939,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::iterator::Iterator::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3454},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1034211,"byte_end":1034215,"line_start":982,"line_end":982,"column_start":8,"column_end":12},"name":"scan","qualname":"::iter::iterator::Iterator::scan","value":"fn <St, B, F> (self, initial_state: St, f: F) -> Scan<Self, St, F>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3456},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1035430,"byte_end":1035438,"line_start":1016,"line_end":1016,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::iterator::Iterator::flat_map","value":"fn <U, F> (self, f: F) -> FlatMap<Self, U, F>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3458},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1037421,"byte_end":1037425,"line_start":1078,"line_end":1078,"column_start":8,"column_end":12},"name":"fuse","qualname":"::iter::iterator::Iterator::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3460},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1039091,"byte_end":1039098,"line_start":1131,"line_end":1131,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::iterator::Iterator::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1040399,"byte_end":1040405,"line_start":1177,"line_end":1177,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::iter::iterator::Iterator::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3464},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1044588,"byte_end":1044595,"line_start":1297,"line_end":1297,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::iterator::Iterator::collect","value":"fn <B> (self) -> B","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1045401,"byte_end":1045410,"line_start":1321,"line_end":1321,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::iterator::Iterator::partition","value":"fn <B, F> (self, mut f: F) -> (B, B)","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1048430,"byte_end":1048438,"line_start":1402,"line_end":1402,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::iterator::Iterator::try_fold","value":"fn <B, F, R> (&mut self, init: B, mut f: F) -> R","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1050794,"byte_end":1050798,"line_start":1478,"line_end":1478,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::iterator::Iterator::fold","value":"fn <B, F> (mut self, init: B, mut f: F) -> B","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1052154,"byte_end":1052157,"line_start":1523,"line_end":1523,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::iterator::Iterator::all","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1053603,"byte_end":1053606,"line_start":1571,"line_end":1571,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::iterator::Iterator::any","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1055421,"byte_end":1055425,"line_start":1625,"line_end":1625,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::iterator::Iterator::find","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3478},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1057658,"byte_end":1057666,"line_start":1692,"line_end":1692,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::iterator::Iterator::position","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1059335,"byte_end":1059344,"line_start":1743,"line_end":1743,"column_start":8,"column_end":17},"name":"rposition","qualname":"::iter::iterator::Iterator::rposition","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1060460,"byte_end":1060463,"line_start":1777,"line_end":1777,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::iterator::Iterator::max","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1061367,"byte_end":1061370,"line_start":1807,"line_end":1807,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::iterator::Iterator::min","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1062249,"byte_end":1062259,"line_start":1833,"line_end":1833,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::iterator::Iterator::max_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3488},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1063188,"byte_end":1063194,"line_start":1860,"line_end":1860,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::iterator::Iterator::max_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1064138,"byte_end":1064148,"line_start":1886,"line_end":1886,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::iterator::Iterator::min_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1065085,"byte_end":1065091,"line_start":1913,"line_end":1913,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::iterator::Iterator::min_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1066270,"byte_end":1066273,"line_start":1950,"line_end":1950,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::iterator::Iterator::rev","value":"fn (self) -> Rev<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1067060,"byte_end":1067065,"line_start":1977,"line_end":1977,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::iterator::Iterator::unzip","value":"fn <A, B, FromA, FromB> (self) -> (FromA, FromB)","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3498},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1068185,"byte_end":1068191,"line_start":2016,"line_end":2016,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::iterator::Iterator::cloned","value":"fn <'a, T> (self) -> Cloned<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3500},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1069181,"byte_end":1069186,"line_start":2049,"line_end":2049,"column_start":8,"column_end":13},"name":"cycle","qualname":"::iter::iterator::Iterator::cycle","value":"fn (self) -> Cycle<Self>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3502},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1069946,"byte_end":1069949,"line_start":2076,"line_end":2076,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::iterator::Iterator::sum","value":"fn <S> (self) -> S","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3504},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1070748,"byte_end":1070755,"line_start":2104,"line_end":2104,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::iterator::Iterator::product","value":"fn <P> (self) -> P","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3506},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1071039,"byte_end":1071042,"line_start":2114,"line_end":2114,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::iterator::Iterator::cmp","value":"fn <I> (mut self, other: I) -> Ordering","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3508},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1071952,"byte_end":1071963,"line_start":2146,"line_end":2146,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::iterator::Iterator::partial_cmp","value":"fn <I> (mut self, other: I) -> Option<Ordering>","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3510},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1072905,"byte_end":1072907,"line_start":2178,"line_end":2178,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::iterator::Iterator::eq","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1073583,"byte_end":1073585,"line_start":2203,"line_end":2203,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::iterator::Iterator::ne","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3514},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1074276,"byte_end":1074278,"line_start":2228,"line_end":2228,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::iterator::Iterator::lt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3516},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1075185,"byte_end":1075187,"line_start":2258,"line_end":2258,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::iterator::Iterator::le","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1076091,"byte_end":1076093,"line_start":2288,"line_end":2288,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::iterator::Iterator::gt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3520},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1077009,"byte_end":1077011,"line_start":2318,"line_end":2318,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::iterator::Iterator::ge","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3414},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002255,"byte_end":1002300,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1002301,"byte_end":1002437,"line_start":31,"line_end":32,"column_start":1,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":3556},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080060,"byte_end":1080064,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Step","qualname":"::iter::range::Step","value":"Step: Clone + PartialOrd + Sized","parent":null,"children":[{"krate":0,"index":3558},{"krate":0,"index":3560},{"krate":0,"index":3562},{"krate":0,"index":3564},{"krate":0,"index":3566},{"krate":0,"index":3568}],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3558},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080338,"byte_end":1080351,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"steps_between","qualname":"::iter::range::Step::steps_between","value":"fn (start: &Self, end: &Self) -> Option<usize>","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3560},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080458,"byte_end":1080469,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"replace_one","qualname":"::iter::range::Step::replace_one","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3562},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080552,"byte_end":1080564,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"replace_zero","qualname":"::iter::range::Step::replace_zero","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3564},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080645,"byte_end":1080652,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"add_one","qualname":"::iter::range::Step::add_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3566},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080734,"byte_end":1080741,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"sub_one","qualname":"::iter::range::Step::sub_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3568},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080815,"byte_end":1080824,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"add_usize","qualname":"::iter::range::Step::add_usize","value":"fn (&self, n: usize) -> Option<Self>","parent":{"krate":0,"index":3556},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1079917,"byte_end":1080049,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":34476},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1092774,"byte_end":1092780,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::sources::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":23819}],"decl_id":null,"docs":" An iterator that repeats an element endlessly.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1092717,"byte_end":1092762,"line_start":23,"line_end":23,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3676},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1094646,"byte_end":1094652,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::sources::repeat","value":"fn <T> (elt: T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that endlessly repeats a single element.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1094583,"byte_end":1094592,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1094593,"byte_end":1094638,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3678},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1094938,"byte_end":1094943,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::sources::Empty","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1094876,"byte_end":1094926,"line_start":104,"line_end":104,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":3712},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1096699,"byte_end":1096704,"line_start":180,"line_end":180,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::sources::empty","value":"fn <T> () -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1096641,"byte_end":1096691,"line_start":179,"line_end":179,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":34486},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097018,"byte_end":1097022,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::sources::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":23827}],"decl_id":null,"docs":" An iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1096957,"byte_end":1097006,"line_start":190,"line_end":190,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":3734},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1099385,"byte_end":1099389,"line_start":280,"line_end":280,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::sources::once","value":"fn <T> (value: T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1099328,"byte_end":1099377,"line_start":279,"line_end":279,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":3754},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102492,"byte_end":1102504,"line_start":109,"line_end":109,"column_start":11,"column_end":23},"name":"FromIterator","qualname":"::iter::traits::FromIterator","value":"FromIterator<A>: Sized","parent":null,"children":[{"krate":0,"index":3756}],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102289,"byte_end":1102334,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102335,"byte_end":1102481,"line_start":107,"line_end":108,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1103028,"byte_end":1103037,"line_start":130,"line_end":130,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::iter::traits::FromIterator::from_iter","value":"fn <T> (iter: T) -> Self","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102289,"byte_end":1102334,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102335,"byte_end":1102481,"line_start":107,"line_end":108,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":3758},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105397,"byte_end":1105409,"line_start":219,"line_end":219,"column_start":11,"column_end":23},"name":"IntoIterator","qualname":"::iter::traits::IntoIterator","value":"IntoIterator","parent":null,"children":[{"krate":0,"index":3760},{"krate":0,"index":3762},{"krate":0,"index":3764}],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105341,"byte_end":1105386,"line_start":218,"line_end":218,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3760},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105525,"byte_end":1105529,"line_start":222,"line_end":222,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::traits::IntoIterator::Item","value":"type Item;","parent":{"krate":0,"index":3758},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105470,"byte_end":1105515,"line_start":221,"line_end":221,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":3762},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105648,"byte_end":1105656,"line_start":226,"line_end":226,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::traits::IntoIterator::IntoIter","value":"type IntoIter: Iterator<Item=Self::Item>;","parent":{"krate":0,"index":3758},"children":[],"decl_id":null,"docs":" Which kind of iterator are we turning this into?\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105593,"byte_end":1105638,"line_start":225,"line_end":225,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3764},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1106235,"byte_end":1106244,"line_start":248,"line_end":248,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::traits::IntoIterator::into_iter","value":"fn (self) -> Self::IntoIter","parent":{"krate":0,"index":3758},"children":[],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1105341,"byte_end":1105386,"line_start":218,"line_end":218,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3774},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1108667,"byte_end":1108673,"line_start":331,"line_end":331,"column_start":11,"column_end":17},"name":"Extend","qualname":"::iter::traits::Extend","value":"Extend<A>","parent":null,"children":[{"krate":0,"index":3776}],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1108611,"byte_end":1108656,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3776},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1109251,"byte_end":1109257,"line_start":352,"line_end":352,"column_start":8,"column_end":14},"name":"extend","qualname":"::iter::traits::Extend::extend","value":"fn <T> (&mut self, iter: T) -> ()","parent":{"krate":0,"index":3774},"children":[],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1108611,"byte_end":1108656,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3778},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110539,"byte_end":1110558,"line_start":390,"line_end":390,"column_start":11,"column_end":30},"name":"DoubleEndedIterator","qualname":"::iter::traits::DoubleEndedIterator","value":"DoubleEndedIterator: Iterator","parent":null,"children":[{"krate":0,"index":3780},{"krate":0,"index":3782},{"krate":0,"index":3784},{"krate":0,"index":3786}],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110483,"byte_end":1110528,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1111424,"byte_end":1111433,"line_start":418,"line_end":418,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::traits::DoubleEndedIterator::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110483,"byte_end":1110528,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3782},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1112589,"byte_end":1112598,"line_start":456,"line_end":456,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"::iter::traits::DoubleEndedIterator::try_rfold","value":"fn <B, F, R> (&mut self, init: B, mut f: F) -> R","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110483,"byte_end":1110528,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1114723,"byte_end":1114728,"line_start":521,"line_end":521,"column_start":8,"column_end":13},"name":"rfold","qualname":"::iter::traits::DoubleEndedIterator::rfold","value":"fn <B, F> (mut self, accum: B, mut f: F) -> B","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110483,"byte_end":1110528,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3786},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1116581,"byte_end":1116586,"line_start":575,"line_end":575,"column_start":8,"column_end":13},"name":"rfind","qualname":"::iter::traits::DoubleEndedIterator::rfind","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110483,"byte_end":1110528,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3792},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1119161,"byte_end":1119178,"line_start":661,"line_end":661,"column_start":11,"column_end":28},"name":"ExactSizeIterator","qualname":"::iter::traits::ExactSizeIterator","value":"ExactSizeIterator: Iterator","parent":null,"children":[{"krate":0,"index":3794},{"krate":0,"index":3796}],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1119105,"byte_end":1119150,"line_start":660,"line_end":660,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3794},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1120028,"byte_end":1120031,"line_start":687,"line_end":687,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::traits::ExactSizeIterator::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1119105,"byte_end":1119150,"line_start":660,"line_end":660,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3796},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1121046,"byte_end":1121054,"line_start":719,"line_end":719,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::iter::traits::ExactSizeIterator::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1119105,"byte_end":1119150,"line_start":660,"line_end":660,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3804},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1121966,"byte_end":1121969,"line_start":745,"line_end":745,"column_start":11,"column_end":14},"name":"Sum","qualname":"::iter::traits::Sum","value":"Sum<A = Self>: Sized","parent":null,"children":[{"krate":0,"index":3806}],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1121897,"byte_end":1121955,"line_start":744,"line_end":744,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1122172,"byte_end":1122175,"line_start":749,"line_end":749,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::traits::Sum::sum","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":3804},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1121897,"byte_end":1121955,"line_start":744,"line_end":744,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":3808},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1122880,"byte_end":1122887,"line_start":764,"line_end":764,"column_start":11,"column_end":18},"name":"Product","qualname":"::iter::traits::Product","value":"Product<A = Self>: Sized","parent":null,"children":[{"krate":0,"index":3810}],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1122811,"byte_end":1122869,"line_start":763,"line_end":763,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1123089,"byte_end":1123096,"line_start":768,"line_end":768,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::traits::Product::product","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":3808},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1122811,"byte_end":1122869,"line_start":763,"line_end":763,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3820},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1126086,"byte_end":1126093,"line_start":863,"line_end":863,"column_start":12,"column_end":19},"name":"process","qualname":"<ResultShunt<I, E>>::process","value":"fn <F, U> (iter: I, mut f: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3840},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1129353,"byte_end":1129366,"line_start":963,"line_end":963,"column_start":11,"column_end":24},"name":"FusedIterator","qualname":"::iter::traits::FusedIterator","value":"FusedIterator: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that always continues to yield `None` when exhausted.","sig":null,"attributes":[{"value":"unstable(feature = \"fused\", issue = \"35602\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1129295,"byte_end":1129342,"line_start":962,"line_end":962,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3844},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1130313,"byte_end":1130323,"line_start":986,"line_end":986,"column_start":18,"column_end":28},"name":"TrustedLen","qualname":"::iter::traits::TrustedLen","value":"TrustedLen: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that reports an accurate length using size_hint.","sig":null,"attributes":[{"value":"unstable(feature = \"trusted_len\", issue = \"37572\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1130242,"byte_end":1130295,"line_start":985,"line_end":985,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":34920},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":929663,"byte_end":929666,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":24179}],"decl_id":null,"docs":" A double-ended iterator with the direction inverted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":929532,"byte_end":929605,"line_start":414,"line_end":414,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":929606,"byte_end":929651,"line_start":415,"line_end":415,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34930},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932344,"byte_end":932350,"line_start":511,"line_end":511,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":24187}],"decl_id":null,"docs":" An iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_cloned\", since = \"1.1.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932183,"byte_end":932234,"line_start":508,"line_end":508,"column_start":1,"column_end":52}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932235,"byte_end":932308,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":34940},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":935343,"byte_end":935348,"line_start":621,"line_end":621,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::iter::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":24195},{"krate":0,"index":24197}],"decl_id":null,"docs":" An iterator that repeats endlessly.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":935212,"byte_end":935285,"line_start":619,"line_end":619,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":935286,"byte_end":935331,"line_start":620,"line_end":620,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34950},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936646,"byte_end":936652,"line_start":664,"line_end":664,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":24205},{"krate":0,"index":24207},{"krate":0,"index":24209}],"decl_id":null,"docs":" An iterator for stepping iterators by a custom amount.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936405,"byte_end":936478,"line_start":659,"line_end":659,"column_start":1,"column_end":74}},{"value":"unstable(feature = \"iterator_step_by\",\n           reason = \"unstable replacement of Range::step_by\",\n           issue = \"27741\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936479,"byte_end":936610,"line_start":660,"line_end":662,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":34960},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939661,"byte_end":939666,"line_start":759,"line_end":759,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":24217},{"krate":0,"index":24219},{"krate":0,"index":24221}],"decl_id":null,"docs":" An iterator that strings two iterators together.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939530,"byte_end":939603,"line_start":757,"line_end":757,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939604,"byte_end":939649,"line_start":758,"line_end":758,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34980},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947003,"byte_end":947006,"line_start":1010,"line_end":1010,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":24241},{"krate":0,"index":24243},{"krate":0,"index":24245},{"krate":0,"index":24247}],"decl_id":null,"docs":" An iterator that iterates two other iterators simultaneously.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":946872,"byte_end":946945,"line_start":1008,"line_end":1008,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":946946,"byte_end":946991,"line_start":1009,"line_end":1009,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":4030},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947880,"byte_end":947884,"line_start":1048,"line_end":1048,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ZipImpl::Item","value":"type Item;","parent":{"krate":0,"index":4028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4032},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947893,"byte_end":947896,"line_start":1049,"line_end":1049,"column_start":8,"column_end":11},"name":"new","qualname":"::iter::ZipImpl::new","value":"fn (a: A, b: B) -> Self","parent":{"krate":0,"index":4028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4034},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947925,"byte_end":947929,"line_start":1050,"line_end":1050,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::ZipImpl::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":4028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4036},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947971,"byte_end":947980,"line_start":1051,"line_end":1051,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::ZipImpl::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":4028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4038},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948022,"byte_end":948031,"line_start":1052,"line_end":1052,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::ZipImpl::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":4028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34990},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954551,"byte_end":954554,"line_start":1275,"line_end":1275,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":24261},{"krate":0,"index":24263}],"decl_id":null,"docs":" An iterator that maps the values of `iter` with `f`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954403,"byte_end":954476,"line_start":1272,"line_end":1272,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954477,"byte_end":954522,"line_start":1273,"line_end":1273,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34996},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957692,"byte_end":957698,"line_start":1386,"line_end":1386,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":24273},{"krate":0,"index":24275}],"decl_id":null,"docs":" An iterator that filters the elements of `iter` with `predicate`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957544,"byte_end":957617,"line_start":1383,"line_end":1383,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957618,"byte_end":957663,"line_start":1384,"line_end":1384,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35002},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961823,"byte_end":961832,"line_start":1518,"line_end":1518,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":24285},{"krate":0,"index":24287}],"decl_id":null,"docs":" An iterator that uses `f` to both filter and map elements from `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961675,"byte_end":961748,"line_start":1515,"line_end":1515,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961749,"byte_end":961794,"line_start":1516,"line_end":1516,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35008},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":965028,"byte_end":965037,"line_start":1628,"line_end":1628,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":24297},{"krate":0,"index":24299}],"decl_id":null,"docs":" An iterator that yields the current count and the element during iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":964897,"byte_end":964970,"line_start":1626,"line_end":1626,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":964971,"byte_end":965016,"line_start":1627,"line_end":1627,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35018},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":969790,"byte_end":969798,"line_start":1789,"line_end":1789,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::iter::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":24307},{"krate":0,"index":24309}],"decl_id":null,"docs":" An iterator with a `peek()` that returns an optional reference to the next\n element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":969659,"byte_end":969732,"line_start":1787,"line_end":1787,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":969733,"byte_end":969778,"line_start":1788,"line_end":1788,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4232},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":974159,"byte_end":974163,"line_start":1932,"line_end":1932,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35028},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":974882,"byte_end":974891,"line_start":1954,"line_end":1954,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::iter::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":24317},{"krate":0,"index":24319},{"krate":0,"index":24321}],"decl_id":null,"docs":" An iterator that rejects elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":974734,"byte_end":974807,"line_start":1951,"line_end":1951,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":974808,"byte_end":974853,"line_start":1952,"line_end":1952,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35034},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":977283,"byte_end":977292,"line_start":2037,"line_end":2037,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::iter::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":24331},{"krate":0,"index":24333},{"krate":0,"index":24335}],"decl_id":null,"docs":" An iterator that only accepts elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":977135,"byte_end":977208,"line_start":2034,"line_end":2034,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":977209,"byte_end":977254,"line_start":2035,"line_end":2035,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35040},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":979577,"byte_end":979581,"line_start":2116,"line_end":2116,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":24345},{"krate":0,"index":24347}],"decl_id":null,"docs":" An iterator that skips over `n` elements of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":979446,"byte_end":979519,"line_start":2114,"line_end":2114,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":979520,"byte_end":979565,"line_start":2115,"line_end":2115,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35050},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":983372,"byte_end":983376,"line_start":2254,"line_end":2254,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":24355},{"krate":0,"index":24357}],"decl_id":null,"docs":" An iterator that only iterates over the first `n` iterations of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":983241,"byte_end":983314,"line_start":2252,"line_end":2252,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":983315,"byte_end":983360,"line_start":2253,"line_end":2253,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35060},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":985550,"byte_end":985554,"line_start":2335,"line_end":2335,"column_start":12,"column_end":16},"name":"Scan","qualname":"::iter::Scan","value":"Scan {  }","parent":null,"children":[{"krate":0,"index":24365},{"krate":0,"index":24367},{"krate":0,"index":24369}],"decl_id":null,"docs":" An iterator to maintain state while iterating another iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":985402,"byte_end":985475,"line_start":2332,"line_end":2332,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":985476,"byte_end":985521,"line_start":2333,"line_end":2333,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35066},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":987391,"byte_end":987398,"line_start":2395,"line_end":2395,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":24383},{"krate":0,"index":24385},{"krate":0,"index":24387},{"krate":0,"index":24389}],"decl_id":null,"docs":" An iterator that maps each element to an iterator, and yields the elements\n of the produced iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":987243,"byte_end":987316,"line_start":2392,"line_end":2392,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":987317,"byte_end":987362,"line_start":2393,"line_end":2393,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35072},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":992824,"byte_end":992828,"line_start":2563,"line_end":2563,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::iter::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":24403},{"krate":0,"index":24405}],"decl_id":null,"docs":" An iterator that yields `None` forever after the underlying iterator\n yields `None` once.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":992693,"byte_end":992766,"line_start":2561,"line_end":2561,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":992767,"byte_end":992812,"line_start":2562,"line_end":2562,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35082},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998340,"byte_end":998347,"line_start":2788,"line_end":2788,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":24413},{"krate":0,"index":24415}],"decl_id":null,"docs":" An iterator that calls a function with a reference to each element before\n yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998192,"byte_end":998265,"line_start":2785,"line_end":2785,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998266,"byte_end":998311,"line_start":2786,"line_end":2786,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":4452},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"libcore/option.rs","parent":null,"children":[{"krate":0,"index":4454},{"krate":0,"index":4462},{"krate":0,"index":35088},{"krate":0,"index":35126},{"krate":0,"index":35124},{"krate":0,"index":35118},{"krate":0,"index":35106},{"krate":0,"index":35102},{"krate":0,"index":35098},{"krate":0,"index":35094},{"krate":0,"index":35090},{"krate":0,"index":4468},{"krate":0,"index":4516},{"krate":0,"index":4520},{"krate":0,"index":4524},{"krate":0,"index":4528},{"krate":0,"index":4532},{"krate":0,"index":4534},{"krate":0,"index":4538},{"krate":0,"index":4546},{"krate":0,"index":4554},{"krate":0,"index":4562},{"krate":0,"index":35130},{"krate":0,"index":35136},{"krate":0,"index":35132},{"krate":0,"index":4566},{"krate":0,"index":4574},{"krate":0,"index":4578},{"krate":0,"index":4580},{"krate":0,"index":4582},{"krate":0,"index":35140},{"krate":0,"index":35142},{"krate":0,"index":4584},{"krate":0,"index":4592},{"krate":0,"index":4596},{"krate":0,"index":4598},{"krate":0,"index":4600},{"krate":0,"index":4602},{"krate":0,"index":35146},{"krate":0,"index":35148},{"krate":0,"index":4606},{"krate":0,"index":4614},{"krate":0,"index":4618},{"krate":0,"index":4620},{"krate":0,"index":4622},{"krate":0,"index":35152},{"krate":0,"index":35158},{"krate":0,"index":35154},{"krate":0,"index":4624},{"krate":0,"index":4632},{"krate":0,"index":4636},{"krate":0,"index":4638},{"krate":0,"index":4640},{"krate":0,"index":4642},{"krate":0,"index":35162},{"krate":0,"index":35190},{"krate":0,"index":35188},{"krate":0,"index":35184},{"krate":0,"index":35180},{"krate":0,"index":35176},{"krate":0,"index":35172},{"krate":0,"index":35168},{"krate":0,"index":35164},{"krate":0,"index":4654}],"decl_id":null,"docs":" Optional values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1135408,"byte_end":1135454,"line_start":146,"line_end":146,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":24425},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136090,"byte_end":1136094,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"None","qualname":"::option::Option::None","value":"Option::None","parent":{"krate":0,"index":35088},"children":[],"decl_id":null,"docs":" No value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136040,"byte_end":1136085,"line_start":161,"line_end":161,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":24427},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136173,"byte_end":1136177,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Some","qualname":"::option::Option::Some","value":"Option::Some(T)","parent":{"krate":0,"index":35088},"children":[],"decl_id":null,"docs":" Some value `T`\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136123,"byte_end":1136168,"line_start":164,"line_end":164,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":35088},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136007,"byte_end":1136013,"line_start":159,"line_end":159,"column_start":10,"column_end":16},"name":"Option","qualname":"::option::Option","value":"Option::{None, Some}","parent":null,"children":[{"krate":0,"index":24425},{"krate":0,"index":24427}],"decl_id":null,"docs":" The `Option` type. See [the module level documentation](index.html) for more.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1135952,"byte_end":1135997,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1135998,"byte_end":1136229,"line_start":159,"line_end":166,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1135998,"byte_end":1136229,"line_start":159,"line_end":166,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":4470},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1137017,"byte_end":1137024,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_some","qualname":"<Option<T>>::is_some","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4472},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1137529,"byte_end":1137536,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Option<T>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4474},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1138808,"byte_end":1138814,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Option<T>>::as_ref","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1139283,"byte_end":1139289,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Option<T>>::as_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4478},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1140271,"byte_end":1140277,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"expect","qualname":"<Option<T>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4480},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1141156,"byte_end":1141162,"line_start":332,"line_end":332,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Option<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4482},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1141881,"byte_end":1141890,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Option<T>>::unwrap_or","value":"fn (self, def: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4484},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1142334,"byte_end":1142348,"line_start":373,"line_end":373,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Option<T>>::unwrap_or_else","value":"fn <F> (self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4486},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1143376,"byte_end":1143379,"line_start":402,"line_end":402,"column_start":12,"column_end":15},"name":"map","qualname":"<Option<T>>::map","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4488},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1143946,"byte_end":1143952,"line_start":423,"line_end":423,"column_start":12,"column_end":18},"name":"map_or","qualname":"<Option<T>>::map_or","value":"fn <U, F> (self, default: U, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4490},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1144560,"byte_end":1144571,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"map_or_else","qualname":"<Option<T>>::map_or_else","value":"fn <U, D, F> (self, default: D, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4492},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1145673,"byte_end":1145678,"line_start":478,"line_end":478,"column_start":12,"column_end":17},"name":"ok_or","qualname":"<Option<T>>::ok_or","value":"fn <E> (self, err: E) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1146520,"byte_end":1146530,"line_start":505,"line_end":505,"column_start":12,"column_end":22},"name":"ok_or_else","qualname":"<Option<T>>::ok_or_else","value":"fn <E, F> (self, err: F) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1147225,"byte_end":1147229,"line_start":529,"line_end":529,"column_start":12,"column_end":16},"name":"iter","qualname":"<Option<T>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4498},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1147771,"byte_end":1147779,"line_start":550,"line_end":550,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Option<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4500},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1148759,"byte_end":1148762,"line_start":583,"line_end":583,"column_start":12,"column_end":15},"name":"and","qualname":"<Option<T>>::and","value":"fn <U> (self, optb: Option<U>) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1149616,"byte_end":1149624,"line_start":610,"line_end":610,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Option<T>>::and_then","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4504},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1150686,"byte_end":1150692,"line_start":643,"line_end":643,"column_start":12,"column_end":18},"name":"filter","qualname":"<Option<T>>::filter","value":"fn <P> (self, predicate: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1151715,"byte_end":1151717,"line_start":681,"line_end":681,"column_start":12,"column_end":14},"name":"or","qualname":"<Option<T>>::or","value":"fn (self, optb: Option<T>) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4508},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1152397,"byte_end":1152404,"line_start":703,"line_end":703,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Option<T>>::or_else","value":"fn <F> (self, f: F) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4510},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1153282,"byte_end":1153295,"line_start":735,"line_end":735,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<Option<T>>::get_or_insert","value":"fn (&mut self, v: T) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4512},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1154057,"byte_end":1154075,"line_start":768,"line_end":768,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<Option<T>>::get_or_insert_with","value":"fn <F> (&mut self, f: F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4514},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1154911,"byte_end":1154915,"line_start":801,"line_end":801,"column_start":12,"column_end":16},"name":"take","qualname":"<Option<T>>::take","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4518},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1155396,"byte_end":1155402,"line_start":820,"line_end":820,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4522},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1155958,"byte_end":1155964,"line_start":840,"line_end":840,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a mut T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4526},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1157243,"byte_end":1157260,"line_start":876,"line_end":876,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Option<T>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4530},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1158052,"byte_end":1158061,"line_start":904,"line_end":904,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Option<Result<T, E>>>::transpose","value":"fn (self) -> Result<Option<T>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35140},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161250,"byte_end":1161254,"line_start":1033,"line_end":1033,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":24459}],"decl_id":null,"docs":" An iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161176,"byte_end":1161221,"line_start":1031,"line_end":1031,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35146},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1162674,"byte_end":1162681,"line_start":1078,"line_end":1078,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":24469}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1162600,"byte_end":1162645,"line_start":1076,"line_end":1076,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35152},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163956,"byte_end":1163964,"line_start":1115,"line_end":1115,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":24479}],"decl_id":null,"docs":" An iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163899,"byte_end":1163944,"line_start":1114,"line_end":1114,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35162},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1167276,"byte_end":1167285,"line_start":1211,"line_end":1211,"column_start":12,"column_end":21},"name":"NoneError","qualname":"::option::NoneError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1167145,"byte_end":1167196,"line_start":1209,"line_end":1209,"column_start":1,"column_end":52}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1167265,"byte_end":1167286,"line_start":1211,"line_end":1211,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1167265,"byte_end":1167286,"line_start":1211,"line_end":1211,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4666},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"libcore/raw.rs","parent":null,"children":[{"krate":0,"index":35194},{"krate":0,"index":35200},{"krate":0,"index":35196}],"decl_id":null,"docs":" Contains struct definitions for the layout of compiler built-in types.","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1168092,"byte_end":1168115,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"raw\", issue = \"27751\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1168116,"byte_end":1168162,"line_start":12,"line_end":12,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":35194},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170941,"byte_end":1170952,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"TraitObject","qualname":"::raw::TraitObject","value":"TraitObject { data, vtable }","parent":null,"children":[{"krate":0,"index":24491},{"krate":0,"index":24493}],"decl_id":null,"docs":" The representation of a trait object like `&SomeTrait`.","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170856,"byte_end":1170866,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170890,"byte_end":1170929,"line_start":95,"line_end":95,"column_start":1,"column_end":40}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170930,"byte_end":1171004,"line_start":96,"line_end":99,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":24491},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170963,"byte_end":1170967,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"name":"data","qualname":"::raw::TraitObject::data","value":"*mut ()","parent":{"krate":0,"index":35194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":24493},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1170986,"byte_end":1170992,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"vtable","qualname":"::raw::TraitObject::vtable","value":"*mut ()","parent":{"krate":0,"index":35194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4668},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"libcore/result.rs","parent":null,"children":[{"krate":0,"index":4670},{"krate":0,"index":4672},{"krate":0,"index":4680},{"krate":0,"index":35202},{"krate":0,"index":35240},{"krate":0,"index":35238},{"krate":0,"index":35232},{"krate":0,"index":35220},{"krate":0,"index":35216},{"krate":0,"index":35212},{"krate":0,"index":35208},{"krate":0,"index":35204},{"krate":0,"index":4682},{"krate":0,"index":4716},{"krate":0,"index":4722},{"krate":0,"index":4728},{"krate":0,"index":4732},{"krate":0,"index":4736},{"krate":0,"index":4738},{"krate":0,"index":4746},{"krate":0,"index":4754},{"krate":0,"index":35244},{"krate":0,"index":35246},{"krate":0,"index":4762},{"krate":0,"index":4770},{"krate":0,"index":4774},{"krate":0,"index":4776},{"krate":0,"index":4778},{"krate":0,"index":4780},{"krate":0,"index":35250},{"krate":0,"index":35252},{"krate":0,"index":4784},{"krate":0,"index":4792},{"krate":0,"index":4796},{"krate":0,"index":4798},{"krate":0,"index":4800},{"krate":0,"index":35256},{"krate":0,"index":35262},{"krate":0,"index":35258},{"krate":0,"index":4802},{"krate":0,"index":4810},{"krate":0,"index":4814},{"krate":0,"index":4816},{"krate":0,"index":4818},{"krate":0,"index":4820},{"krate":0,"index":4834}],"decl_id":null,"docs":" Error handling with the `Result` type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1178877,"byte_end":1178923,"line_start":241,"line_end":241,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":24495},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179485,"byte_end":1179487,"line_start":259,"line_end":259,"column_start":5,"column_end":7},"name":"Ok","qualname":"::result::Result::Ok","value":"Result::Ok(T)","parent":{"krate":0,"index":35202},"children":[],"decl_id":null,"docs":" Contains the success value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179435,"byte_end":1179480,"line_start":258,"line_end":258,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":24499},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179626,"byte_end":1179629,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Err","qualname":"::result::Result::Err","value":"Result::Err(E)","parent":{"krate":0,"index":35202},"children":[],"decl_id":null,"docs":" Contains the error value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179576,"byte_end":1179621,"line_start":262,"line_end":262,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":35202},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179381,"byte_end":1179387,"line_start":256,"line_end":256,"column_start":10,"column_end":16},"name":"Result","qualname":"::result::Result","value":"Result::{Ok, Err}","parent":null,"children":[{"krate":0,"index":24495},{"krate":0,"index":24499}],"decl_id":null,"docs":" `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179314,"byte_end":1179325,"line_start":254,"line_end":254,"column_start":1,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179326,"byte_end":1179371,"line_start":255,"line_end":255,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179372,"byte_end":1179681,"line_start":256,"line_end":264,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179372,"byte_end":1179681,"line_start":256,"line_end":264,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":4684},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1180534,"byte_end":1180539,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"is_ok","qualname":"<Result<T, E>>::is_ok","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4686},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1181107,"byte_end":1181113,"line_start":316,"line_end":316,"column_start":12,"column_end":18},"name":"is_err","qualname":"<Result<T, E>>::is_err","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1181924,"byte_end":1181926,"line_start":344,"line_end":344,"column_start":12,"column_end":14},"name":"ok","qualname":"<Result<T, E>>::ok","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4690},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1182643,"byte_end":1182646,"line_start":371,"line_end":371,"column_start":12,"column_end":15},"name":"err","qualname":"<Result<T, E>>::err","value":"fn (self) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4692},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1183494,"byte_end":1183500,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Result<T, E>>::as_ref","value":"fn (&self) -> Result<&T, &E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1184262,"byte_end":1184268,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Result<T, E>>::as_mut","value":"fn (&mut self) -> Result<&mut T, &mut E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1185381,"byte_end":1185384,"line_start":466,"line_end":466,"column_start":12,"column_end":15},"name":"map","qualname":"<Result<T, E>>::map","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4698},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1186350,"byte_end":1186357,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"map_err","qualname":"<Result<T, E>>::map_err","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4700},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1187252,"byte_end":1187256,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"iter","qualname":"<Result<T, E>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4702},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1187989,"byte_end":1187997,"line_start":554,"line_end":554,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Result<T, E>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4704},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1189285,"byte_end":1189288,"line_start":590,"line_end":590,"column_start":12,"column_end":15},"name":"and","qualname":"<Result<T, E>>::and","value":"fn <U> (self, res: Result<U, E>) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4706},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1190231,"byte_end":1190239,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Result<T, E>>::and_then","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4708},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1191551,"byte_end":1191553,"line_start":659,"line_end":659,"column_start":12,"column_end":14},"name":"or","qualname":"<Result<T, E>>::or","value":"fn <F> (self, res: Result<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4710},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1192485,"byte_end":1192492,"line_start":688,"line_end":688,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Result<T, E>>::or_else","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4712},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1193475,"byte_end":1193484,"line_start":720,"line_end":720,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Result<T, E>>::unwrap_or","value":"fn (self, optb: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4714},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1194152,"byte_end":1194166,"line_start":745,"line_end":745,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Result<T, E>>::unwrap_or_else","value":"fn <F> (self, op: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4718},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1195036,"byte_end":1195042,"line_start":779,"line_end":779,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Result<T, E>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4720},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1195865,"byte_end":1195871,"line_start":806,"line_end":806,"column_start":12,"column_end":18},"name":"expect","qualname":"<Result<T, E>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4724},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1196738,"byte_end":1196748,"line_start":839,"line_end":839,"column_start":12,"column_end":22},"name":"unwrap_err","qualname":"<Result<T, E>>::unwrap_err","value":"fn (self) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4726},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1197557,"byte_end":1197567,"line_start":866,"line_end":866,"column_start":12,"column_end":22},"name":"expect_err","qualname":"<Result<T, E>>::expect_err","value":"fn (self, msg: &str) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4730},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1198884,"byte_end":1198901,"line_start":904,"line_end":904,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Result<T, E>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4734},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1199693,"byte_end":1199702,"line_start":932,"line_end":932,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Result<Option<T>, E>>::transpose","value":"fn (self) -> Option<Result<T, E>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35244},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202104,"byte_end":1202108,"line_start":1017,"line_end":1017,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":24541}],"decl_id":null,"docs":" An iterator over a reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202047,"byte_end":1202092,"line_start":1016,"line_end":1016,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35250},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1203437,"byte_end":1203444,"line_start":1061,"line_end":1061,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":24551}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1203380,"byte_end":1203425,"line_start":1060,"line_end":1060,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35256},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204880,"byte_end":1204888,"line_start":1104,"line_end":1104,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":24561}],"decl_id":null,"docs":" An iterator over the value in a [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204823,"byte_end":1204868,"line_start":1103,"line_end":1103,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":4846},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"libcore/slice/mod.rs","parent":null,"children":[{"krate":0,"index":4848},{"krate":0,"index":4858},{"krate":0,"index":4860},{"krate":0,"index":4862},{"krate":0,"index":4864},{"krate":0,"index":4866},{"krate":0,"index":4874},{"krate":0,"index":4876},{"krate":0,"index":4882},{"krate":0,"index":4884},{"krate":0,"index":4890},{"krate":0,"index":4892},{"krate":0,"index":4894},{"krate":0,"index":4906},{"krate":0,"index":4908},{"krate":0,"index":4930},{"krate":0,"index":4950},{"krate":0,"index":5006},{"krate":0,"index":5008},{"krate":0,"index":5110},{"krate":0,"index":5112},{"krate":0,"index":5114},{"krate":0,"index":5116},{"krate":0,"index":5216},{"krate":0,"index":5222},{"krate":0,"index":5226},{"krate":0,"index":5228},{"krate":0,"index":5230},{"krate":0,"index":5246},{"krate":0,"index":5262},{"krate":0,"index":5278},{"krate":0,"index":5294},{"krate":0,"index":5310},{"krate":0,"index":5326},{"krate":0,"index":5342},{"krate":0,"index":5358},{"krate":0,"index":5362},{"krate":0,"index":5366},{"krate":0,"index":5374},{"krate":0,"index":5382},{"krate":0,"index":5384},{"krate":0,"index":5386},{"krate":0,"index":5388},{"krate":0,"index":5390},{"krate":0,"index":5392},{"krate":0,"index":5396},{"krate":0,"index":5398},{"krate":0,"index":5400},{"krate":0,"index":35266},{"krate":0,"index":35288},{"krate":0,"index":5406},{"krate":0,"index":5410},{"krate":0,"index":5412},{"krate":0,"index":5414},{"krate":0,"index":5418},{"krate":0,"index":5422},{"krate":0,"index":5424},{"krate":0,"index":5428},{"krate":0,"index":5430},{"krate":0,"index":5432},{"krate":0,"index":35296},{"krate":0,"index":35318},{"krate":0,"index":5438},{"krate":0,"index":5442},{"krate":0,"index":5444},{"krate":0,"index":5446},{"krate":0,"index":5448},{"krate":0,"index":5456},{"krate":0,"index":5460},{"krate":0,"index":5464},{"krate":0,"index":5468},{"krate":0,"index":5470},{"krate":0,"index":5474},{"krate":0,"index":5478},{"krate":0,"index":5486},{"krate":0,"index":5490},{"krate":0,"index":5494},{"krate":0,"index":5496},{"krate":0,"index":5498},{"krate":0,"index":5502},{"krate":0,"index":5506},{"krate":0,"index":5514},{"krate":0,"index":5518},{"krate":0,"index":35326},{"krate":0,"index":35328},{"krate":0,"index":5520},{"krate":0,"index":5524},{"krate":0,"index":5532},{"krate":0,"index":5536},{"krate":0,"index":5540},{"krate":0,"index":5542},{"krate":0,"index":5544},{"krate":0,"index":5548},{"krate":0,"index":5552},{"krate":0,"index":5560},{"krate":0,"index":5564},{"krate":0,"index":35332},{"krate":0,"index":35334},{"krate":0,"index":5566},{"krate":0,"index":5574},{"krate":0,"index":5576},{"krate":0,"index":5580},{"krate":0,"index":5582},{"krate":0,"index":5586},{"krate":0,"index":5588},{"krate":0,"index":5592},{"krate":0,"index":5594},{"krate":0,"index":5598},{"krate":0,"index":35338},{"krate":0,"index":35346},{"krate":0,"index":35348},{"krate":0,"index":35356},{"krate":0,"index":35358},{"krate":0,"index":35366},{"krate":0,"index":35368},{"krate":0,"index":35376},{"krate":0,"index":35378},{"krate":0,"index":35380},{"krate":0,"index":5600},{"krate":0,"index":5604},{"krate":0,"index":5618},{"krate":0,"index":5622},{"krate":0,"index":5624},{"krate":0,"index":5626},{"krate":0,"index":35384},{"krate":0,"index":35386},{"krate":0,"index":5632},{"krate":0,"index":5636},{"krate":0,"index":5650},{"krate":0,"index":5654},{"krate":0,"index":5656},{"krate":0,"index":5658},{"krate":0,"index":35390},{"krate":0,"index":35392},{"krate":0,"index":5664},{"krate":0,"index":5678},{"krate":0,"index":5682},{"krate":0,"index":5684},{"krate":0,"index":5686},{"krate":0,"index":35396},{"krate":0,"index":35398},{"krate":0,"index":5692},{"krate":0,"index":5696},{"krate":0,"index":5710},{"krate":0,"index":5714},{"krate":0,"index":5718},{"krate":0,"index":5720},{"krate":0,"index":35402},{"krate":0,"index":35404},{"krate":0,"index":5726},{"krate":0,"index":5740},{"krate":0,"index":5744},{"krate":0,"index":5748},{"krate":0,"index":5750},{"krate":0,"index":5756},{"krate":0,"index":5758},{"krate":0,"index":5760},{"krate":0,"index":5762},{"krate":0,"index":5764},{"krate":0,"index":5766},{"krate":0,"index":5768},{"krate":0,"index":5774},{"krate":0,"index":5776},{"krate":0,"index":5780},{"krate":0,"index":5784},{"krate":0,"index":5790},{"krate":0,"index":5794},{"krate":0,"index":5798},{"krate":0,"index":5802},{"krate":0,"index":5806},{"krate":0,"index":5810},{"krate":0,"index":5814},{"krate":0,"index":5818},{"krate":0,"index":5822},{"krate":0,"index":5824},{"krate":0,"index":35408},{"krate":0,"index":35410},{"krate":0,"index":35412},{"krate":0,"index":35414},{"krate":0,"index":35416},{"krate":0,"index":35418},{"krate":0,"index":35420},{"krate":0,"index":35422},{"krate":0,"index":35424},{"krate":0,"index":35426},{"krate":0,"index":35428},{"krate":0,"index":35430},{"krate":0,"index":5826},{"krate":0,"index":5832},{"krate":0,"index":5838},{"krate":0,"index":5842},{"krate":0,"index":5846},{"krate":0,"index":5850}],"decl_id":null,"docs":" Slice management and manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208659,"byte_end":1208705,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":4908},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memchr","qualname":"::slice::memchr","value":"libcore/slice/memchr.rs","parent":null,"children":[{"krate":0,"index":4910},{"krate":0,"index":4912},{"krate":0,"index":4914},{"krate":0,"index":4916},{"krate":0,"index":4918},{"krate":0,"index":4920},{"krate":0,"index":4922},{"krate":0,"index":4924},{"krate":0,"index":4926},{"krate":0,"index":4928}],"decl_id":null,"docs":" Pure rust memchr implementation, taken from rust-memchr\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_internals\",\n           issue = \"0\",\n           reason =\n               \"exposed from core to be reused in std; use the memchr crate\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1209773,"byte_end":1209909,"line_start":53,"line_end":54,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":4926},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":1298679,"byte_end":1298685,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"memchr","qualname":"::slice::memchr::memchr","value":"fn (x: u8, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the first index matching the byte `x` in `text`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4928},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":1300249,"byte_end":1300256,"line_start":105,"line_end":105,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::slice::memchr::memrchr","value":"fn (x: u8, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the last index matching the byte `x` in `text`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4948},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1305832,"byte_end":1305842,"line_start":72,"line_end":72,"column_start":15,"column_end":25},"name":"ptr_rotate","qualname":"::slice::rotate::ptr_rotate","value":"fn <T> (mut left: usize, mid: *mut T, mut right: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the range `[mid-left, mid+right)` such that the element at `mid`\n becomes the first element.  Equivalently, rotates the range `left`\n elements to the left or `right` elements to the right.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4976},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1312397,"byte_end":1312405,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::sort::heapsort","value":"fn <T, F> (v: &mut [T], is_less: &mut F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1312382,"byte_end":1312389,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":5004},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1331864,"byte_end":1331873,"line_start":691,"line_end":691,"column_start":8,"column_end":17},"name":"quicksort","qualname":"::slice::sort::quicksort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using pattern-defeating quicksort, which is `O(n log n)` worst-case.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3121},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210046,"byte_end":1210050,"line_start":63,"line_end":63,"column_start":9,"column_end":13},"name":"data","qualname":"::slice::Repr::data","value":"*const T","parent":{"krate":0,"index":5006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3123},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210070,"byte_end":1210073,"line_start":64,"line_end":64,"column_start":9,"column_end":12},"name":"len","qualname":"::slice::Repr::len","value":"usize","parent":{"krate":0,"index":5006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5008},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210350,"byte_end":1210358,"line_start":76,"line_end":76,"column_start":11,"column_end":19},"name":"SliceExt","qualname":"::slice::SliceExt","value":"SliceExt","parent":null,"children":[{"krate":0,"index":5010},{"krate":0,"index":5012},{"krate":0,"index":5014},{"krate":0,"index":5016},{"krate":0,"index":5018},{"krate":0,"index":5020},{"krate":0,"index":5022},{"krate":0,"index":5024},{"krate":0,"index":5026},{"krate":0,"index":5028},{"krate":0,"index":5030},{"krate":0,"index":5032},{"krate":0,"index":5034},{"krate":0,"index":5036},{"krate":0,"index":5038},{"krate":0,"index":5040},{"krate":0,"index":5042},{"krate":0,"index":5044},{"krate":0,"index":5046},{"krate":0,"index":5048},{"krate":0,"index":5050},{"krate":0,"index":5052},{"krate":0,"index":5054},{"krate":0,"index":5056},{"krate":0,"index":5058},{"krate":0,"index":5060},{"krate":0,"index":5062},{"krate":0,"index":5064},{"krate":0,"index":5066},{"krate":0,"index":5068},{"krate":0,"index":5070},{"krate":0,"index":5072},{"krate":0,"index":5074},{"krate":0,"index":5076},{"krate":0,"index":5078},{"krate":0,"index":5080},{"krate":0,"index":5082},{"krate":0,"index":5084},{"krate":0,"index":5086},{"krate":0,"index":5088},{"krate":0,"index":5090},{"krate":0,"index":5092},{"krate":0,"index":5094},{"krate":0,"index":5096},{"krate":0,"index":5098},{"krate":0,"index":5100},{"krate":0,"index":5102},{"krate":0,"index":5104},{"krate":0,"index":5106},{"krate":0,"index":5108}],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":5010},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210370,"byte_end":1210374,"line_start":77,"line_end":77,"column_start":10,"column_end":14},"name":"Item","qualname":"::slice::SliceExt::Item","value":"type Item;","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5012},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210433,"byte_end":1210441,"line_start":80,"line_end":80,"column_start":8,"column_end":16},"name":"split_at","qualname":"::slice::SliceExt::split_at","value":"fn (&self, mid: usize) -> (&[Self::Item], &[Self::Item])","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5014},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210553,"byte_end":1210557,"line_start":83,"line_end":83,"column_start":8,"column_end":12},"name":"iter","qualname":"::slice::SliceExt::iter","value":"fn (&self) -> Iter<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5016},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210643,"byte_end":1210648,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"split","qualname":"::slice::SliceExt::split","value":"fn <P> (&self, pred: P) -> Split<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5018},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210804,"byte_end":1210810,"line_start":90,"line_end":90,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::slice::SliceExt::rsplit","value":"fn <P> (&self, pred: P) -> RSplit<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5020},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210957,"byte_end":1210963,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"splitn","qualname":"::slice::SliceExt::splitn","value":"fn <P> (&self, n: usize, pred: P) -> SplitN<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5022},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211120,"byte_end":1211127,"line_start":98,"line_end":98,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::slice::SliceExt::rsplitn","value":"fn <P> (&self, n: usize, pred: P) -> RSplitN<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5024},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211286,"byte_end":1211293,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"windows","qualname":"::slice::SliceExt::windows","value":"fn (&self, size: usize) -> Windows<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5026},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211395,"byte_end":1211401,"line_start":105,"line_end":105,"column_start":8,"column_end":14},"name":"chunks","qualname":"::slice::SliceExt::chunks","value":"fn (&self, size: usize) -> Chunks<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5028},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211512,"byte_end":1211524,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"exact_chunks","qualname":"::slice::SliceExt::exact_chunks","value":"fn (&self, size: usize) -> ExactChunks<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5030},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211630,"byte_end":1211633,"line_start":111,"line_end":111,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceExt::get","value":"fn <I> (&self, index: I) -> Option<&I::Output>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5032},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211767,"byte_end":1211772,"line_start":114,"line_end":114,"column_start":8,"column_end":13},"name":"first","qualname":"::slice::SliceExt::first","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5034},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211861,"byte_end":1211872,"line_start":117,"line_end":117,"column_start":8,"column_end":19},"name":"split_first","qualname":"::slice::SliceExt::split_first","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5036},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211978,"byte_end":1211988,"line_start":120,"line_end":120,"column_start":8,"column_end":18},"name":"split_last","qualname":"::slice::SliceExt::split_last","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5038},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212094,"byte_end":1212098,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"last","qualname":"::slice::SliceExt::last","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5040},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212194,"byte_end":1212207,"line_start":126,"line_end":126,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceExt::get_unchecked","value":"fn <I> (&self, index: I) -> &I::Output","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5042},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212333,"byte_end":1212339,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::slice::SliceExt::as_ptr","value":"fn (&self) -> *const Self::Item","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5044},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212426,"byte_end":1212439,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"binary_search","qualname":"::slice::SliceExt::binary_search","value":"fn (&self, x: &Self::Item) -> Result<usize, usize>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5046},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212575,"byte_end":1212591,"line_start":136,"line_end":136,"column_start":8,"column_end":24},"name":"binary_search_by","qualname":"::slice::SliceExt::binary_search_by","value":"fn <'a, F> (&'a self, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5048},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212771,"byte_end":1212791,"line_start":140,"line_end":140,"column_start":8,"column_end":28},"name":"binary_search_by_key","qualname":"::slice::SliceExt::binary_search_by_key","value":"fn <'a, B, F> (&'a self, b: &B, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5050},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212973,"byte_end":1212976,"line_start":145,"line_end":145,"column_start":8,"column_end":11},"name":"len","qualname":"::slice::SliceExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5052},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213051,"byte_end":1213059,"line_start":148,"line_end":148,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::slice::SliceExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5054},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213152,"byte_end":1213159,"line_start":151,"line_end":151,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceExt::get_mut","value":"fn <I> (&mut self, index: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5056},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213301,"byte_end":1213309,"line_start":154,"line_end":154,"column_start":8,"column_end":16},"name":"iter_mut","qualname":"::slice::SliceExt::iter_mut","value":"fn (&mut self) -> IterMut<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5058},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213402,"byte_end":1213411,"line_start":157,"line_end":157,"column_start":8,"column_end":17},"name":"first_mut","qualname":"::slice::SliceExt::first_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5060},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213508,"byte_end":1213523,"line_start":160,"line_end":160,"column_start":8,"column_end":23},"name":"split_first_mut","qualname":"::slice::SliceExt::split_first_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5062},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213641,"byte_end":1213655,"line_start":163,"line_end":163,"column_start":8,"column_end":22},"name":"split_last_mut","qualname":"::slice::SliceExt::split_last_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5064},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213773,"byte_end":1213781,"line_start":166,"line_end":166,"column_start":8,"column_end":16},"name":"last_mut","qualname":"::slice::SliceExt::last_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5066},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213878,"byte_end":1213887,"line_start":169,"line_end":169,"column_start":8,"column_end":17},"name":"split_mut","qualname":"::slice::SliceExt::split_mut","value":"fn <P> (&mut self, pred: P) -> SplitMut<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5068},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214050,"byte_end":1214060,"line_start":173,"line_end":173,"column_start":8,"column_end":18},"name":"rsplit_mut","qualname":"::slice::SliceExt::rsplit_mut","value":"fn <P> (&mut self, pred: P) -> RSplitMut<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5070},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214214,"byte_end":1214224,"line_start":177,"line_end":177,"column_start":8,"column_end":18},"name":"splitn_mut","qualname":"::slice::SliceExt::splitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> SplitNMut<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5072},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214388,"byte_end":1214399,"line_start":181,"line_end":181,"column_start":8,"column_end":19},"name":"rsplitn_mut","qualname":"::slice::SliceExt::rsplitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> RSplitNMut<Self::Item, P>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5074},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214565,"byte_end":1214575,"line_start":185,"line_end":185,"column_start":8,"column_end":18},"name":"chunks_mut","qualname":"::slice::SliceExt::chunks_mut","value":"fn (&mut self, chunk_size: usize) -> ChunksMut<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5076},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214699,"byte_end":1214715,"line_start":188,"line_end":188,"column_start":8,"column_end":24},"name":"exact_chunks_mut","qualname":"::slice::SliceExt::exact_chunks_mut","value":"fn (&mut self, size: usize) -> ExactChunksMut<Self::Item>","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5078},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214828,"byte_end":1214832,"line_start":191,"line_end":191,"column_start":8,"column_end":12},"name":"swap","qualname":"::slice::SliceExt::swap","value":"fn (&mut self, a: usize, b: usize) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5080},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214922,"byte_end":1214934,"line_start":194,"line_end":194,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::slice::SliceExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5082},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215058,"byte_end":1215065,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"reverse","qualname":"::slice::SliceExt::reverse","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5084},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215142,"byte_end":1215159,"line_start":200,"line_end":200,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceExt::get_unchecked_mut","value":"fn <I> (&mut self, index: I) -> &mut I::Output","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5086},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215293,"byte_end":1215303,"line_start":203,"line_end":203,"column_start":8,"column_end":18},"name":"as_mut_ptr","qualname":"::slice::SliceExt::as_mut_ptr","value":"fn (&mut self) -> *mut Self::Item","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5088},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215392,"byte_end":1215400,"line_start":206,"line_end":206,"column_start":8,"column_end":16},"name":"contains","qualname":"::slice::SliceExt::contains","value":"fn (&self, x: &Self::Item) -> bool","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5090},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215518,"byte_end":1215529,"line_start":209,"line_end":209,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::slice::SliceExt::starts_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5092},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215654,"byte_end":1215663,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::slice::SliceExt::ends_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5094},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215798,"byte_end":1215809,"line_start":215,"line_end":215,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::slice::SliceExt::rotate_left","value":"fn (&mut self, mid: usize) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5096},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215901,"byte_end":1215913,"line_start":218,"line_end":218,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::slice::SliceExt::rotate_right","value":"fn (&mut self, k: usize) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5098},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216005,"byte_end":1216021,"line_start":221,"line_end":221,"column_start":8,"column_end":24},"name":"clone_from_slice","qualname":"::slice::SliceExt::clone_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5100},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216146,"byte_end":1216161,"line_start":224,"line_end":224,"column_start":8,"column_end":23},"name":"copy_from_slice","qualname":"::slice::SliceExt::copy_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5102},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216287,"byte_end":1216302,"line_start":227,"line_end":227,"column_start":8,"column_end":23},"name":"swap_with_slice","qualname":"::slice::SliceExt::swap_with_slice","value":"fn (&mut self, src: &mut [Self::Item]) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5104},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216406,"byte_end":1216419,"line_start":230,"line_end":230,"column_start":8,"column_end":21},"name":"sort_unstable","qualname":"::slice::SliceExt::sort_unstable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5106},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216529,"byte_end":1216545,"line_start":234,"line_end":234,"column_start":8,"column_end":24},"name":"sort_unstable_by","qualname":"::slice::SliceExt::sort_unstable_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5108},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216701,"byte_end":1216721,"line_start":238,"line_end":238,"column_start":8,"column_end":28},"name":"sort_unstable_by_key","qualname":"::slice::SliceExt::sort_unstable_by_key","value":"fn <B, F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":5008},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210146,"byte_end":1210292,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210293,"byte_end":1210315,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":5230},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232595,"byte_end":1232605,"line_start":797,"line_end":797,"column_start":11,"column_end":21},"name":"SliceIndex","qualname":"::slice::SliceIndex","value":"SliceIndex<T: ?Sized>","parent":null,"children":[{"krate":0,"index":5232},{"krate":0,"index":5234},{"krate":0,"index":5236},{"krate":0,"index":5238},{"krate":0,"index":5240},{"krate":0,"index":5242},{"krate":0,"index":5244}],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":5232},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232673,"byte_end":1232679,"line_start":799,"line_end":799,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::SliceIndex::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" The output type returned by methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5234},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232786,"byte_end":1232789,"line_start":803,"line_end":803,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceIndex::get","value":"fn (self, slice: &T) -> Option<&Self::Output>","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5236},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232931,"byte_end":1232938,"line_start":807,"line_end":807,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceIndex::get_mut","value":"fn (self, slice: &mut T) -> Option<&mut Self::Output>","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5238},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233120,"byte_end":1233133,"line_start":811,"line_end":811,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceIndex::get_unchecked","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233300,"byte_end":1233317,"line_start":815,"line_end":815,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceIndex::get_unchecked_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5242},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233472,"byte_end":1233477,"line_start":819,"line_end":819,"column_start":8,"column_end":13},"name":"index","qualname":"::slice::SliceIndex::index","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5244},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233625,"byte_end":1233634,"line_start":823,"line_end":823,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::slice::SliceIndex::index_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":5230},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232442,"byte_end":1232499,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232500,"byte_end":1232584,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":5390},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250287,"byte_end":1250291,"line_start":1384,"line_end":1384,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":3261},{"krate":0,"index":3263},{"krate":0,"index":3265}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250230,"byte_end":1250275,"line_start":1383,"line_end":1383,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5402},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1251774,"byte_end":1251782,"line_start":1430,"line_end":1430,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Iter<'a, T>>::as_slice","value":"fn (&self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5422},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1253707,"byte_end":1253714,"line_start":1501,"line_end":1501,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":3307},{"krate":0,"index":3309},{"krate":0,"index":3311}],"decl_id":null,"docs":" Mutable slice iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1253650,"byte_end":1253695,"line_start":1500,"line_end":1500,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1255683,"byte_end":1255693,"line_start":1558,"line_end":1558,"column_start":12,"column_end":22},"name":"into_slice","qualname":"<IterMut<'a, T>>::into_slice","value":"fn (self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5450},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1257080,"byte_end":1257092,"line_start":1605,"line_end":1605,"column_start":15,"column_end":27},"name":"slice_offset","qualname":"::slice::PointerExt::slice_offset","value":"fn (self, i: isize) -> Self","parent":{"krate":0,"index":5448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5452},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1257214,"byte_end":1257222,"line_start":1609,"line_end":1609,"column_start":15,"column_end":23},"name":"post_inc","qualname":"::slice::PointerExt::post_inc","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":5448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5454},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1257429,"byte_end":1257436,"line_start":1617,"line_end":1617,"column_start":15,"column_end":22},"name":"pre_dec","qualname":"::slice::PointerExt::pre_dec","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":5448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5466},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1258101,"byte_end":1258107,"line_start":1643,"line_end":1643,"column_start":8,"column_end":14},"name":"finish","qualname":"::slice::SplitIter::finish","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" An internal abstraction over the splitting iterators, so that\n splitn, splitn_mut etc can be implemented once.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5468},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1258468,"byte_end":1258473,"line_start":1654,"line_end":1654,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3355}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1258411,"byte_end":1258456,"line_start":1653,"line_end":1653,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5496},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1261176,"byte_end":1261184,"line_start":1745,"line_end":1745,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":3403},{"krate":0,"index":3405},{"krate":0,"index":3407}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1261119,"byte_end":1261164,"line_start":1744,"line_end":1744,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35326},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1264310,"byte_end":1264316,"line_start":1844,"line_end":1844,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":24649}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1264164,"byte_end":1264218,"line_start":1842,"line_end":1842,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":5542},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1266157,"byte_end":1266166,"line_start":1901,"line_end":1901,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":3479}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1266091,"byte_end":1266145,"line_start":1900,"line_end":1900,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":5574},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1268749,"byte_end":1268755,"line_start":1988,"line_end":1988,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":3523}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1268692,"byte_end":1268737,"line_start":1987,"line_end":1987,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5580},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1269563,"byte_end":1269570,"line_start":2010,"line_end":2010,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":3537}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1269506,"byte_end":1269551,"line_start":2009,"line_end":2009,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5586},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1270350,"byte_end":1270359,"line_start":2031,"line_end":2031,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":3551}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1270293,"byte_end":1270338,"line_start":2030,"line_end":2030,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5592},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1271188,"byte_end":1271198,"line_start":2053,"line_end":2053,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":3565}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1271131,"byte_end":1271176,"line_start":2052,"line_end":2052,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35378},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1272831,"byte_end":1272838,"line_start":2104,"line_end":2104,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":24719},{"krate":0,"index":24721}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1272774,"byte_end":1272819,"line_start":2103,"line_end":2103,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35384},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1275731,"byte_end":1275737,"line_start":2214,"line_end":2214,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":24731},{"krate":0,"index":24733}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n time).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1275674,"byte_end":1275719,"line_start":2213,"line_end":2213,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35390},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1279354,"byte_end":1279363,"line_start":2336,"line_end":2336,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":24743},{"krate":0,"index":24745}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n elements at a time). When the slice len is not evenly divided by the chunk\n size, the last slice of the iteration will be the remainder.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1279297,"byte_end":1279342,"line_start":2335,"line_end":2335,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35396},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1283023,"byte_end":1283034,"line_start":2454,"line_end":2454,"column_start":12,"column_end":23},"name":"ExactChunks","qualname":"::slice::ExactChunks","value":"ExactChunks {  }","parent":null,"children":[{"krate":0,"index":24755},{"krate":0,"index":24757}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n time).","sig":null,"attributes":[{"value":"unstable(feature = \"exact_chunks\", issue = \"47115\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1282957,"byte_end":1283011,"line_start":2453,"line_end":2453,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":35402},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1285962,"byte_end":1285976,"line_start":2558,"line_end":2558,"column_start":12,"column_end":26},"name":"ExactChunksMut","qualname":"::slice::ExactChunksMut","value":"ExactChunksMut {  }","parent":null,"children":[{"krate":0,"index":24767},{"krate":0,"index":24769}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n elements at a time). When the slice len is not evenly divided by the chunk\n size, the last up to `chunk_size-1` elements will be omitted.","sig":null,"attributes":[{"value":"unstable(feature = \"exact_chunks\", issue = \"47115\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1285896,"byte_end":1285950,"line_start":2557,"line_end":2557,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":5756},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1289635,"byte_end":1289649,"line_start":2686,"line_end":2686,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::from_raw_parts","value":"fn <'a, T> (p: *const T, len: usize) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Forms a slice from a pointer and a length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1289565,"byte_end":1289574,"line_start":2684,"line_end":2684,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1289575,"byte_end":1289620,"line_start":2685,"line_end":2685,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":5758},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290171,"byte_end":1290189,"line_start":2699,"line_end":2699,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::from_raw_parts_mut","value":"fn <'a, T> (p: *mut T, len: usize) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as `from_raw_parts`, except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290101,"byte_end":1290110,"line_start":2697,"line_end":2697,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290111,"byte_end":1290156,"line_start":2698,"line_end":2698,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":5760},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290419,"byte_end":1290427,"line_start":2705,"line_end":2705,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::from_ref","value":"fn <T> (s: &T) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to T into a slice of length 1 (without copying).\n","sig":null,"attributes":[{"value":"unstable(feature = \"from_ref\", issue = \"45703\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290361,"byte_end":1290411,"line_start":2704,"line_end":2704,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":5762},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290631,"byte_end":1290643,"line_start":2713,"line_end":2713,"column_start":8,"column_end":20},"name":"from_ref_mut","qualname":"::slice::from_ref_mut","value":"fn <T> (s: &mut T) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to T into a slice of length 1 (without copying).\n","sig":null,"attributes":[{"value":"unstable(feature = \"from_ref\", issue = \"45703\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290573,"byte_end":1290623,"line_start":2712,"line_end":2712,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":5764},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290923,"byte_end":1290931,"line_start":2722,"line_end":2722,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::heapsort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"sort_internals\",\n           reason = \"internal to sort module\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1290812,"byte_end":1290900,"line_start":2720,"line_end":2720,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":5786},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1292336,"byte_end":1292341,"line_start":2776,"line_end":2776,"column_start":8,"column_end":13},"name":"equal","qualname":"::slice::SlicePartialEq::equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":5784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5788},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1292379,"byte_end":1292388,"line_start":2778,"line_end":2778,"column_start":8,"column_end":17},"name":"not_equal","qualname":"::slice::SlicePartialEq::not_equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":5784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5800},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1293448,"byte_end":1293463,"line_start":2822,"line_end":2822,"column_start":8,"column_end":23},"name":"partial_compare","qualname":"::slice::SlicePartialOrd::partial_compare","value":"fn (&self, other: &[B]) -> Option<Ordering>","parent":{"krate":0,"index":5798},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5812},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1294378,"byte_end":1294385,"line_start":2858,"line_end":2858,"column_start":8,"column_end":15},"name":"compare","qualname":"::slice::SliceOrd::compare","value":"fn (&self, other: &[B]) -> Ordering","parent":{"krate":0,"index":5810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5840},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1296407,"byte_end":1296421,"line_start":2935,"line_end":2935,"column_start":8,"column_end":22},"name":"slice_contains","qualname":"::slice::SliceContains::slice_contains","value":"fn (&self, x: &[Self]) -> bool","parent":{"krate":0,"index":5838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5854},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"libcore/str/mod.rs","parent":null,"children":[{"krate":0,"index":5856},{"krate":0,"index":5858},{"krate":0,"index":5866},{"krate":0,"index":5868},{"krate":0,"index":5870},{"krate":0,"index":5880},{"krate":0,"index":5882},{"krate":0,"index":5888},{"krate":0,"index":5890},{"krate":0,"index":6096},{"krate":0,"index":6102},{"krate":0,"index":35588},{"krate":0,"index":35604},{"krate":0,"index":35600},{"krate":0,"index":35594},{"krate":0,"index":35590},{"krate":0,"index":6108},{"krate":0,"index":35608},{"krate":0,"index":35628},{"krate":0,"index":35624},{"krate":0,"index":35618},{"krate":0,"index":35614},{"krate":0,"index":35610},{"krate":0,"index":6112},{"krate":0,"index":6118},{"krate":0,"index":6120},{"krate":0,"index":6122},{"krate":0,"index":6124},{"krate":0,"index":6126},{"krate":0,"index":6128},{"krate":0,"index":35630},{"krate":0,"index":35636},{"krate":0,"index":35632},{"krate":0,"index":6132},{"krate":0,"index":6134},{"krate":0,"index":6136},{"krate":0,"index":6138},{"krate":0,"index":6140},{"krate":0,"index":6142},{"krate":0,"index":6144},{"krate":0,"index":6156},{"krate":0,"index":6160},{"krate":0,"index":6162},{"krate":0,"index":35640},{"krate":0,"index":35646},{"krate":0,"index":35642},{"krate":0,"index":6166},{"krate":0,"index":6178},{"krate":0,"index":6182},{"krate":0,"index":6184},{"krate":0,"index":35650},{"krate":0,"index":35656},{"krate":0,"index":35652},{"krate":0,"index":6188},{"krate":0,"index":6212},{"krate":0,"index":6218},{"krate":0,"index":6224},{"krate":0,"index":6226},{"krate":0,"index":6228},{"krate":0,"index":6234},{"krate":0,"index":6236},{"krate":0,"index":35660},{"krate":0,"index":6238},{"krate":0,"index":6240},{"krate":0,"index":6244},{"krate":0,"index":35664},{"krate":0,"index":35666},{"krate":0,"index":35670},{"krate":0,"index":35676},{"krate":0,"index":35680},{"krate":0,"index":35682},{"krate":0,"index":35686},{"krate":0,"index":35692},{"krate":0,"index":35696},{"krate":0,"index":35698},{"krate":0,"index":35700},{"krate":0,"index":35704},{"krate":0,"index":35708},{"krate":0,"index":35710},{"krate":0,"index":35714},{"krate":0,"index":35720},{"krate":0,"index":35724},{"krate":0,"index":35726},{"krate":0,"index":35730},{"krate":0,"index":35736},{"krate":0,"index":35740},{"krate":0,"index":35742},{"krate":0,"index":35744},{"krate":0,"index":35748},{"krate":0,"index":35752},{"krate":0,"index":6252},{"krate":0,"index":6254},{"krate":0,"index":6258},{"krate":0,"index":35756},{"krate":0,"index":35758},{"krate":0,"index":35762},{"krate":0,"index":35768},{"krate":0,"index":35772},{"krate":0,"index":35774},{"krate":0,"index":35778},{"krate":0,"index":35784},{"krate":0,"index":35788},{"krate":0,"index":35790},{"krate":0,"index":35792},{"krate":0,"index":6264},{"krate":0,"index":6266},{"krate":0,"index":6270},{"krate":0,"index":35796},{"krate":0,"index":35798},{"krate":0,"index":35802},{"krate":0,"index":35808},{"krate":0,"index":35812},{"krate":0,"index":35814},{"krate":0,"index":35818},{"krate":0,"index":35824},{"krate":0,"index":35828},{"krate":0,"index":35830},{"krate":0,"index":35832},{"krate":0,"index":35836},{"krate":0,"index":35840},{"krate":0,"index":6276},{"krate":0,"index":6278},{"krate":0,"index":6282},{"krate":0,"index":35844},{"krate":0,"index":35846},{"krate":0,"index":35850},{"krate":0,"index":35856},{"krate":0,"index":35860},{"krate":0,"index":35862},{"krate":0,"index":35866},{"krate":0,"index":35872},{"krate":0,"index":35876},{"krate":0,"index":35878},{"krate":0,"index":35880},{"krate":0,"index":35884},{"krate":0,"index":35888},{"krate":0,"index":35894},{"krate":0,"index":35890},{"krate":0,"index":6288},{"krate":0,"index":6296},{"krate":0,"index":6300},{"krate":0,"index":35898},{"krate":0,"index":35904},{"krate":0,"index":35900},{"krate":0,"index":35908},{"krate":0,"index":35910},{"krate":0,"index":6302},{"krate":0,"index":6306},{"krate":0,"index":6310},{"krate":0,"index":6316},{"krate":0,"index":6324},{"krate":0,"index":6328},{"krate":0,"index":6330},{"krate":0,"index":6332},{"krate":0,"index":6334},{"krate":0,"index":6340},{"krate":0,"index":6342},{"krate":0,"index":6344},{"krate":0,"index":6346},{"krate":0,"index":6348},{"krate":0,"index":6532},{"krate":0,"index":6612},{"krate":0,"index":6614},{"krate":0,"index":6618},{"krate":0,"index":6698},{"krate":0,"index":6702}],"decl_id":null,"docs":" String manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1332805,"byte_end":1332851,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":5890},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pattern","qualname":"::str::pattern","value":"libcore/str/pattern.rs","parent":null,"children":[{"krate":0,"index":5892},{"krate":0,"index":5894},{"krate":0,"index":5896},{"krate":0,"index":5898},{"krate":0,"index":5900},{"krate":0,"index":35432},{"krate":0,"index":35452},{"krate":0,"index":35448},{"krate":0,"index":35444},{"krate":0,"index":35438},{"krate":0,"index":35434},{"krate":0,"index":5912},{"krate":0,"index":5922},{"krate":0,"index":5930},{"krate":0,"index":35454},{"krate":0,"index":35460},{"krate":0,"index":35456},{"krate":0,"index":5932},{"krate":0,"index":5940},{"krate":0,"index":5946},{"krate":0,"index":5948},{"krate":0,"index":5960},{"krate":0,"index":5964},{"krate":0,"index":5968},{"krate":0,"index":5972},{"krate":0,"index":35464},{"krate":0,"index":35470},{"krate":0,"index":35466},{"krate":0,"index":5974},{"krate":0,"index":5980},{"krate":0,"index":5986},{"krate":0,"index":5990},{"krate":0,"index":5992},{"krate":0,"index":5994},{"krate":0,"index":35474},{"krate":0,"index":35480},{"krate":0,"index":35476},{"krate":0,"index":5996},{"krate":0,"index":5998},{"krate":0,"index":6000},{"krate":0,"index":6002},{"krate":0,"index":35508},{"krate":0,"index":35510},{"krate":0,"index":6004},{"krate":0,"index":6008},{"krate":0,"index":6010},{"krate":0,"index":6012},{"krate":0,"index":6014},{"krate":0,"index":6016},{"krate":0,"index":6018},{"krate":0,"index":35548},{"krate":0,"index":35554},{"krate":0,"index":35550},{"krate":0,"index":35558},{"krate":0,"index":35564},{"krate":0,"index":35560},{"krate":0,"index":35568},{"krate":0,"index":35574},{"krate":0,"index":35570},{"krate":0,"index":6028},{"krate":0,"index":6032},{"krate":0,"index":6040},{"krate":0,"index":35578},{"krate":0,"index":35584},{"krate":0,"index":35580},{"krate":0,"index":6046},{"krate":0,"index":6062},{"krate":0,"index":6072},{"krate":0,"index":6074},{"krate":0,"index":6084},{"krate":0,"index":6086}],"decl_id":null,"docs":" The string Pattern API.","sig":null,"attributes":[{"value":"unstable(feature = \"pattern\",\n           reason = \"API not fully fleshed out and ready to be stabilized\",\n           issue = \"27721\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1414368,"byte_end":1414507,"line_start":16,"line_end":18,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":5900},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415009,"byte_end":1415016,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"Pattern","qualname":"::str::pattern::Pattern","value":"Pattern<'a>: Sized","parent":null,"children":[{"krate":0,"index":5902},{"krate":0,"index":5904},{"krate":0,"index":5906},{"krate":0,"index":5908},{"krate":0,"index":5910}],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5902},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415084,"byte_end":1415092,"line_start":40,"line_end":40,"column_start":10,"column_end":18},"name":"Searcher","qualname":"::str::pattern::Pattern::Searcher","value":"type Searcher: Searcher<'a>;","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" Associated searcher for this pattern\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5904},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415212,"byte_end":1415225,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"into_searcher","qualname":"::str::pattern::Pattern::into_searcher","value":"fn (self, haystack: &'a str) -> Self::Searcher","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5906},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415360,"byte_end":1415375,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"is_contained_in","qualname":"::str::pattern::Pattern::is_contained_in","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5908},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415571,"byte_end":1415583,"line_start":54,"line_end":54,"column_start":8,"column_end":20},"name":"is_prefix_of","qualname":"::str::pattern::Pattern::is_prefix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5910},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415849,"byte_end":1415861,"line_start":63,"line_end":63,"column_start":8,"column_end":20},"name":"is_suffix_of","qualname":"::str::pattern::Pattern::is_suffix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":24779},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416369,"byte_end":1416374,"line_start":80,"line_end":80,"column_start":5,"column_end":10},"name":"Match","qualname":"::str::pattern::SearchStep::Match","value":"SearchStep::Match(usize, usize)","parent":{"krate":0,"index":35432},"children":[],"decl_id":null,"docs":" Expresses that a match of the pattern has been found at\n `haystack[a..b]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":24785},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416649,"byte_end":1416655,"line_start":86,"line_end":86,"column_start":5,"column_end":11},"name":"Reject","qualname":"::str::pattern::SearchStep::Reject","value":"SearchStep::Reject(usize, usize)","parent":{"krate":0,"index":35432},"children":[],"decl_id":null,"docs":" Expresses that `haystack[a..b]` has been rejected as a possible match\n of the pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":24791},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416773,"byte_end":1416777,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"Done","qualname":"::str::pattern::SearchStep::Done","value":"SearchStep::Done","parent":{"krate":0,"index":35432},"children":[],"decl_id":null,"docs":" Expresses that every byte of the haystack has been visited, ending\n the iteration.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":35432},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416262,"byte_end":1416272,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"SearchStep","qualname":"::str::pattern::SearchStep","value":"SearchStep::{Match, Reject, Done}","parent":null,"children":[{"krate":0,"index":24779},{"krate":0,"index":24785},{"krate":0,"index":24791}],"decl_id":null,"docs":" Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416253,"byte_end":1416779,"line_start":77,"line_end":90,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1416253,"byte_end":1416779,"line_start":77,"line_end":90,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":5912},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1417320,"byte_end":1417328,"line_start":104,"line_end":104,"column_start":18,"column_end":26},"name":"Searcher","qualname":"::str::pattern::Searcher","value":"Searcher<'a>","parent":null,"children":[{"krate":0,"index":5914},{"krate":0,"index":5916},{"krate":0,"index":5918},{"krate":0,"index":5920}],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5914},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1417452,"byte_end":1417460,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"haystack","qualname":"::str::pattern::Searcher::haystack","value":"fn (&self) -> &'a str","parent":{"krate":0,"index":5912},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5916},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1418409,"byte_end":1418413,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"next","qualname":"::str::pattern::Searcher::next","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":5912},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5918},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1418809,"byte_end":1418819,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"next_match","qualname":"::str::pattern::Searcher::next_match","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":5912},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5920},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1419296,"byte_end":1419307,"line_start":152,"line_end":152,"column_start":8,"column_end":19},"name":"next_reject","qualname":"::str::pattern::Searcher::next_reject","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":5912},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5922},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1420142,"byte_end":1420157,"line_start":177,"line_end":177,"column_start":18,"column_end":33},"name":"ReverseSearcher","qualname":"::str::pattern::ReverseSearcher","value":"ReverseSearcher<'a>: Searcher<'a>","parent":null,"children":[{"krate":0,"index":5924},{"krate":0,"index":5926},{"krate":0,"index":5928}],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5924},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1421105,"byte_end":1421114,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"next_back","qualname":"::str::pattern::ReverseSearcher::next_back","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":5922},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5926},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1421219,"byte_end":1421234,"line_start":200,"line_end":200,"column_start":8,"column_end":23},"name":"next_match_back","qualname":"::str::pattern::ReverseSearcher::next_match_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":5922},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5928},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1421578,"byte_end":1421594,"line_start":212,"line_end":212,"column_start":8,"column_end":24},"name":"next_reject_back","qualname":"::str::pattern::ReverseSearcher::next_reject_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":5922},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5930},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1422732,"byte_end":1422751,"line_start":244,"line_end":244,"column_start":11,"column_end":30},"name":"DoubleEndedSearcher","qualname":"::str::pattern::DoubleEndedSearcher","value":"DoubleEndedSearcher<'a>: ReverseSearcher<'a>","parent":null,"children":[],"decl_id":null,"docs":" A marker trait to express that a `ReverseSearcher`\n can be used for a `DoubleEndedIterator` implementation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35454},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1423050,"byte_end":1423062,"line_start":253,"line_end":253,"column_start":12,"column_end":24},"name":"CharSearcher","qualname":"::str::pattern::CharSearcher","value":"CharSearcher {  }","parent":null,"children":[{"krate":0,"index":24793},{"krate":0,"index":24795},{"krate":0,"index":24797},{"krate":0,"index":24799},{"krate":0,"index":24801},{"krate":0,"index":24803}],"decl_id":null,"docs":" Associated type for `<char as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5962},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1432817,"byte_end":1432824,"line_start":486,"line_end":486,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::pattern::MultiCharEq::matches","value":"fn (&mut self, c: char) -> bool","parent":{"krate":0,"index":5960},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35474},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1437263,"byte_end":1437280,"line_start":643,"line_end":643,"column_start":12,"column_end":29},"name":"CharSliceSearcher","qualname":"::str::pattern::CharSliceSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35508},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1438108,"byte_end":1438129,"line_start":666,"line_end":666,"column_start":12,"column_end":33},"name":"CharPredicateSearcher","qualname":"::str::pattern::CharPredicateSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<F as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35548},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1440833,"byte_end":1440844,"line_start":747,"line_end":747,"column_start":12,"column_end":23},"name":"StrSearcher","qualname":"::str::pattern::StrSearcher","value":"StrSearcher {  }","parent":null,"children":[{"krate":0,"index":24869},{"krate":0,"index":24871},{"krate":0,"index":24873}],"decl_id":null,"docs":" Associated type for `<&str as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6064},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466225,"byte_end":1466231,"line_start":1381,"line_end":1381,"column_start":10,"column_end":16},"name":"Output","qualname":"::str::pattern::TwoWayStrategy::Output","value":"type Output;","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6066},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466240,"byte_end":1466256,"line_start":1382,"line_end":1382,"column_start":8,"column_end":24},"name":"use_early_reject","qualname":"::str::pattern::TwoWayStrategy::use_early_reject","value":"fn () -> bool","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6068},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466275,"byte_end":1466284,"line_start":1383,"line_end":1383,"column_start":8,"column_end":17},"name":"rejecting","qualname":"::str::pattern::TwoWayStrategy::rejecting","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6070},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466329,"byte_end":1466337,"line_start":1384,"line_end":1384,"column_start":8,"column_end":16},"name":"matching","qualname":"::str::pattern::TwoWayStrategy::matching","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6096},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334398,"byte_end":1334405,"line_start":72,"line_end":72,"column_start":11,"column_end":18},"name":"FromStr","qualname":"::str::FromStr","value":"FromStr: Sized","parent":null,"children":[{"krate":0,"index":6098},{"krate":0,"index":6100}],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334342,"byte_end":1334387,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":6098},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334539,"byte_end":1334542,"line_start":75,"line_end":75,"column_start":10,"column_end":13},"name":"Err","qualname":"::str::FromStr::Err","value":"type Err;","parent":{"krate":0,"index":6096},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334484,"byte_end":1334529,"line_start":74,"line_end":74,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":6100},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335372,"byte_end":1335380,"line_start":101,"line_end":101,"column_start":8,"column_end":16},"name":"from_str","qualname":"::str::FromStr::from_str","value":"fn (s: &str) -> Result<Self, Self::Err>","parent":{"krate":0,"index":6096},"children":[],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334342,"byte_end":1334387,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35588},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336709,"byte_end":1336723,"line_start":145,"line_end":145,"column_start":12,"column_end":26},"name":"ParseBoolError","qualname":"::str::ParseBoolError","value":"ParseBoolError {  }","parent":null,"children":[{"krate":0,"index":24919}],"decl_id":null,"docs":" An error returned when parsing a `bool` using [`from_str`] fails","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336652,"byte_end":1336697,"line_start":144,"line_end":144,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336698,"byte_end":1336737,"line_start":145,"line_end":145,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":35608},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337485,"byte_end":1337494,"line_start":170,"line_end":170,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::str::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":24921},{"krate":0,"index":24923}],"decl_id":null,"docs":" Errors which can occur when attempting to interpret a sequence of [`u8`]\n as a string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337428,"byte_end":1337473,"line_start":169,"line_end":169,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337474,"byte_end":1337549,"line_start":170,"line_end":173,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337474,"byte_end":1337549,"line_start":170,"line_end":173,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":6114},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338267,"byte_end":1338278,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6116},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339117,"byte_end":1339126,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":6118},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1341751,"byte_end":1341760,"line_start":301,"line_end":301,"column_start":8,"column_end":17},"name":"from_utf8","qualname":"::str::from_utf8","value":"fn (v: &[u8]) -> Result<&str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1341698,"byte_end":1341743,"line_start":300,"line_end":300,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6120},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1342742,"byte_end":1342755,"line_start":339,"line_end":339,"column_start":8,"column_end":21},"name":"from_utf8_mut","qualname":"::str::from_utf8_mut","value":"fn (v: &mut [u8]) -> Result<&mut str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a mutable slice of bytes to a mutable string slice.","sig":null,"attributes":[{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1342679,"byte_end":1342734,"line_start":338,"line_end":338,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":6124},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1344970,"byte_end":1344989,"line_start":408,"line_end":408,"column_start":15,"column_end":34},"name":"from_utf8_unchecked","qualname":"::str::from_utf8_unchecked","value":"fn (v: &[u8]) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1344900,"byte_end":1344909,"line_start":406,"line_end":406,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1344910,"byte_end":1344955,"line_start":407,"line_end":407,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6126},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1345630,"byte_end":1345653,"line_start":433,"line_end":433,"column_start":15,"column_end":38},"name":"from_utf8_unchecked_mut","qualname":"::str::from_utf8_unchecked_mut","value":"fn (v: &mut [u8]) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8; mutable version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1345550,"byte_end":1345559,"line_start":431,"line_end":431,"column_start":1,"column_end":10}},{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1345560,"byte_end":1345615,"line_start":432,"line_end":432,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":35630},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1346574,"byte_end":1346579,"line_start":464,"line_end":464,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":24925}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1346517,"byte_end":1346562,"line_start":463,"line_end":463,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6140},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1347534,"byte_end":1347549,"line_start":495,"line_end":495,"column_start":8,"column_end":23},"name":"next_code_point","qualname":"::str::next_code_point","value":"fn <'a, I> (bytes: &mut I) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next code point out of a byte iterator (assuming a\n UTF-8-like encoding).\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1347465,"byte_end":1347516,"line_start":493,"line_end":493,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1347517,"byte_end":1347526,"line_start":494,"line_end":494,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":6164},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1351790,"byte_end":1351796,"line_start":635,"line_end":635,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Chars<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35640},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1352318,"byte_end":1352329,"line_start":651,"line_end":651,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":24933},{"krate":0,"index":24935}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice, and their positions.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1352261,"byte_end":1352306,"line_start":650,"line_end":650,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6186},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1354041,"byte_end":1354047,"line_start":715,"line_end":715,"column_start":12,"column_end":18},"name":"as_str","qualname":"<CharIndices<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35650},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1354441,"byte_end":1354446,"line_start":729,"line_end":729,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the bytes of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1354360,"byte_end":1354405,"line_start":727,"line_end":727,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35888},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372154,"byte_end":1372159,"line_start":1315,"line_end":1315,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the lines of a string, as string slices.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372073,"byte_end":1372118,"line_start":1313,"line_end":1313,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":35898},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373078,"byte_end":1373086,"line_start":1350,"line_end":1350,"column_start":12,"column_end":20},"name":"LinesAny","qualname":"::str::LinesAny","value":"","parent":null,"children":[],"decl_id":null,"docs":" Created with the method [`lines_any`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372897,"byte_end":1372942,"line_start":1346,"line_end":1346,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372943,"byte_end":1373021,"line_start":1347,"line_end":1347,"column_start":1,"column_end":79}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373046,"byte_end":1373066,"line_start":1349,"line_end":1349,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":6342},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1380315,"byte_end":1380330,"line_start":1568,"line_end":1568,"column_start":8,"column_end":23},"name":"utf8_char_width","qualname":"::str::utf8_char_width","value":"fn (b: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Given a first byte, determines how many bytes are in this UTF-8 character.\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1380246,"byte_end":1380297,"line_start":1566,"line_end":1566,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1380298,"byte_end":1380307,"line_start":1567,"line_end":1567,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":6532},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399114,"byte_end":1399120,"line_start":2104,"line_end":2104,"column_start":11,"column_end":17},"name":"StrExt","qualname":"::str::StrExt","value":"StrExt","parent":null,"children":[{"krate":0,"index":6534},{"krate":0,"index":6536},{"krate":0,"index":6538},{"krate":0,"index":6540},{"krate":0,"index":6542},{"krate":0,"index":6544},{"krate":0,"index":6546},{"krate":0,"index":6548},{"krate":0,"index":6550},{"krate":0,"index":6552},{"krate":0,"index":6554},{"krate":0,"index":6556},{"krate":0,"index":6558},{"krate":0,"index":6560},{"krate":0,"index":6562},{"krate":0,"index":6564},{"krate":0,"index":6566},{"krate":0,"index":6568},{"krate":0,"index":6570},{"krate":0,"index":6572},{"krate":0,"index":6574},{"krate":0,"index":6576},{"krate":0,"index":6578},{"krate":0,"index":6580},{"krate":0,"index":6582},{"krate":0,"index":6584},{"krate":0,"index":6586},{"krate":0,"index":6588},{"krate":0,"index":6590},{"krate":0,"index":6592},{"krate":0,"index":6594},{"krate":0,"index":6596},{"krate":0,"index":6598},{"krate":0,"index":6600},{"krate":0,"index":6602},{"krate":0,"index":6604},{"krate":0,"index":6606},{"krate":0,"index":6608},{"krate":0,"index":6610}],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6534},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399287,"byte_end":1399295,"line_start":2109,"line_end":2109,"column_start":8,"column_end":16},"name":"contains","qualname":"::str::StrExt::contains","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6536},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399399,"byte_end":1399404,"line_start":2111,"line_end":2111,"column_start":8,"column_end":13},"name":"chars","qualname":"::str::StrExt::chars","value":"fn (&self) -> Chars","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6538},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399478,"byte_end":1399483,"line_start":2113,"line_end":2113,"column_start":8,"column_end":13},"name":"bytes","qualname":"::str::StrExt::bytes","value":"fn (&self) -> Bytes","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6540},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399557,"byte_end":1399569,"line_start":2115,"line_end":2115,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::str::StrExt::char_indices","value":"fn (&self) -> CharIndices","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6542},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399649,"byte_end":1399654,"line_start":2117,"line_end":2117,"column_start":8,"column_end":13},"name":"split","qualname":"::str::StrExt::split","value":"fn <'a, P> (&'a self, pat: P) -> Split<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6544},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399766,"byte_end":1399772,"line_start":2119,"line_end":2119,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::str::StrExt::rsplit","value":"fn <'a, P> (&'a self, pat: P) -> RSplit<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6546},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1399932,"byte_end":1399938,"line_start":2122,"line_end":2122,"column_start":8,"column_end":14},"name":"splitn","qualname":"::str::StrExt::splitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> SplitN<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6548},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400065,"byte_end":1400072,"line_start":2124,"line_end":2124,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::str::StrExt::rsplitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> RSplitN<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6550},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400247,"byte_end":1400263,"line_start":2127,"line_end":2127,"column_start":8,"column_end":24},"name":"split_terminator","qualname":"::str::StrExt::split_terminator","value":"fn <'a, P> (&'a self, pat: P) -> SplitTerminator<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6552},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400385,"byte_end":1400402,"line_start":2129,"line_end":2129,"column_start":8,"column_end":25},"name":"rsplit_terminator","qualname":"::str::StrExt::rsplit_terminator","value":"fn <'a, P> (&'a self, pat: P) -> RSplitTerminator<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6554},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400572,"byte_end":1400579,"line_start":2132,"line_end":2132,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::StrExt::matches","value":"fn <'a, P> (&'a self, pat: P) -> Matches<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6556},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400693,"byte_end":1400701,"line_start":2134,"line_end":2134,"column_start":8,"column_end":16},"name":"rmatches","qualname":"::str::StrExt::rmatches","value":"fn <'a, P> (&'a self, pat: P) -> RMatches<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6558},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400863,"byte_end":1400876,"line_start":2137,"line_end":2137,"column_start":8,"column_end":21},"name":"match_indices","qualname":"::str::StrExt::match_indices","value":"fn <'a, P> (&'a self, pat: P) -> MatchIndices<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6560},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1400995,"byte_end":1401009,"line_start":2139,"line_end":2139,"column_start":8,"column_end":22},"name":"rmatch_indices","qualname":"::str::StrExt::rmatch_indices","value":"fn <'a, P> (&'a self, pat: P) -> RMatchIndices<'a, P>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6562},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401176,"byte_end":1401181,"line_start":2142,"line_end":2142,"column_start":8,"column_end":13},"name":"lines","qualname":"::str::StrExt::lines","value":"fn (&self) -> Lines","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6564},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401357,"byte_end":1401366,"line_start":2146,"line_end":2146,"column_start":8,"column_end":17},"name":"lines_any","qualname":"::str::StrExt::lines_any","value":"fn (&self) -> LinesAny","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6566},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401459,"byte_end":1401462,"line_start":2148,"line_end":2148,"column_start":8,"column_end":11},"name":"get","qualname":"::str::StrExt::get","value":"fn <I> (&self, i: I) -> Option<&I::Output>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6568},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401591,"byte_end":1401598,"line_start":2150,"line_end":2150,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::str::StrExt::get_mut","value":"fn <I> (&mut self, i: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6570},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401742,"byte_end":1401755,"line_start":2152,"line_end":2152,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::str::StrExt::get_unchecked","value":"fn <I> (&self, i: I) -> &I::Output","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6572},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1401883,"byte_end":1401900,"line_start":2154,"line_end":2154,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::str::StrExt::get_unchecked_mut","value":"fn <I> (&mut self, i: I) -> &mut I::Output","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6574},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402020,"byte_end":1402035,"line_start":2156,"line_end":2156,"column_start":15,"column_end":30},"name":"slice_unchecked","qualname":"::str::StrExt::slice_unchecked","value":"fn (&self, begin: usize, end: usize) -> &str","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6576},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402141,"byte_end":1402160,"line_start":2158,"line_end":2158,"column_start":15,"column_end":34},"name":"slice_mut_unchecked","qualname":"::str::StrExt::slice_mut_unchecked","value":"fn (&mut self, begin: usize, end: usize) -> &mut str","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6578},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402267,"byte_end":1402278,"line_start":2160,"line_end":2160,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::str::StrExt::starts_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6580},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402382,"byte_end":1402391,"line_start":2162,"line_end":2162,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::str::StrExt::ends_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6582},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402542,"byte_end":1402554,"line_start":2165,"line_end":2165,"column_start":8,"column_end":20},"name":"trim_matches","qualname":"::str::StrExt::trim_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6584},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402712,"byte_end":1402729,"line_start":2168,"line_end":2168,"column_start":8,"column_end":25},"name":"trim_left_matches","qualname":"::str::StrExt::trim_left_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6586},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1402836,"byte_end":1402854,"line_start":2170,"line_end":2170,"column_start":8,"column_end":26},"name":"trim_right_matches","qualname":"::str::StrExt::trim_right_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6588},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403020,"byte_end":1403036,"line_start":2173,"line_end":2173,"column_start":8,"column_end":24},"name":"is_char_boundary","qualname":"::str::StrExt::is_char_boundary","value":"fn (&self, index: usize) -> bool","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6590},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403123,"byte_end":1403131,"line_start":2175,"line_end":2175,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::str::StrExt::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6592},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403223,"byte_end":1403235,"line_start":2177,"line_end":2177,"column_start":15,"column_end":27},"name":"as_bytes_mut","qualname":"::str::StrExt::as_bytes_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6594},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403317,"byte_end":1403321,"line_start":2179,"line_end":2179,"column_start":8,"column_end":12},"name":"find","qualname":"::str::StrExt::find","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6596},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403434,"byte_end":1403439,"line_start":2181,"line_end":2181,"column_start":8,"column_end":13},"name":"rfind","qualname":"::str::StrExt::rfind","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6598},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403550,"byte_end":1403558,"line_start":2183,"line_end":2183,"column_start":8,"column_end":16},"name":"find_str","qualname":"::str::StrExt::find_str","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6600},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403671,"byte_end":1403679,"line_start":2185,"line_end":2185,"column_start":8,"column_end":16},"name":"split_at","qualname":"::str::StrExt::split_at","value":"fn (&self, mid: usize) -> (&str, &str)","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6602},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403772,"byte_end":1403784,"line_start":2187,"line_end":2187,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::str::StrExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut str, &mut str)","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6604},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403889,"byte_end":1403895,"line_start":2189,"line_end":2189,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::str::StrExt::as_ptr","value":"fn (&self) -> *const u8","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6606},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1403973,"byte_end":1403976,"line_start":2191,"line_end":2191,"column_start":8,"column_end":11},"name":"len","qualname":"::str::StrExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6608},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1404050,"byte_end":1404058,"line_start":2193,"line_end":2193,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::str::StrExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":6610},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1404131,"byte_end":1404136,"line_start":2195,"line_end":2195,"column_start":8,"column_end":13},"name":"parse","qualname":"::str::StrExt::parse","value":"fn <T> (&self) -> Result<T, T::Err>","parent":{"krate":0,"index":6532},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398921,"byte_end":1398943,"line_start":2099,"line_end":2099,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1398959,"byte_end":1399103,"line_start":2101,"line_end":2103,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":6706},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash","qualname":"::hash","value":"libcore/hash/mod.rs","parent":null,"children":[{"krate":0,"index":6708},{"krate":0,"index":6710},{"krate":0,"index":6712},{"krate":0,"index":6714},{"krate":0,"index":6716},{"krate":0,"index":6722},{"krate":0,"index":6818},{"krate":0,"index":6824},{"krate":0,"index":6854},{"krate":0,"index":6884},{"krate":0,"index":6890},{"krate":0,"index":6892},{"krate":0,"index":6896},{"krate":0,"index":6902},{"krate":0,"index":6906},{"krate":0,"index":6910}],"decl_id":null,"docs":" Generic hashing support.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1469433,"byte_end":1469479,"line_start":92,"line_end":92,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":35914},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488591,"byte_end":1488602,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"SipHasher13","qualname":"::hash::sip::SipHasher13","value":"SipHasher13 {  }","parent":null,"children":[{"krate":0,"index":25263}],"decl_id":null,"docs":" An implementation of SipHash 1-3.","sig":null,"attributes":[{"value":"unstable(feature = \"sip_hash_13\", issue = \"34767\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488368,"byte_end":1488421,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488422,"byte_end":1488546,"line_start":27,"line_end":28,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":35928},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488945,"byte_end":1488956,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"SipHasher24","qualname":"::hash::sip::SipHasher24","value":"SipHasher24 {  }","parent":null,"children":[{"krate":0,"index":25265}],"decl_id":null,"docs":" An implementation of SipHash 2-4.","sig":null,"attributes":[{"value":"unstable(feature = \"sip_hash_13\", issue = \"34767\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488722,"byte_end":1488775,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1488776,"byte_end":1488900,"line_start":38,"line_end":39,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":35942},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1489808,"byte_end":1489817,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"SipHasher","qualname":"::hash::sip::SipHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation of SipHash 2-4.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1489593,"byte_end":1489638,"line_start":57,"line_end":57,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1489639,"byte_end":1489763,"line_start":58,"line_end":59,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":6740},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1492672,"byte_end":1492675,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher>::new","value":"fn () -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6742},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1493014,"byte_end":1493027,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6746},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1493439,"byte_end":1493442,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher13>::new","value":"fn () -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6748},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1493795,"byte_end":1493808,"line_start":178,"line_end":178,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher13>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6752},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1494250,"byte_end":1494253,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher24>::new","value":"fn () -> SipHasher24","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6754},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1494606,"byte_end":1494619,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher24>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher24","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6802},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1500018,"byte_end":1500026,"line_start":407,"line_end":407,"column_start":8,"column_end":16},"name":"c_rounds","qualname":"::hash::sip::Sip::c_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":6800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6804},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1500050,"byte_end":1500058,"line_start":408,"line_end":408,"column_start":8,"column_end":16},"name":"d_rounds","qualname":"::hash::sip::Sip::d_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":6800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6818},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1471393,"byte_end":1471397,"line_start":168,"line_end":168,"column_start":11,"column_end":15},"name":"Hash","qualname":"::hash::Hash","value":"Hash","parent":null,"children":[{"krate":0,"index":6820},{"krate":0,"index":6822}],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1471337,"byte_end":1471382,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6820},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1471847,"byte_end":1471851,"line_start":184,"line_end":184,"column_start":8,"column_end":12},"name":"hash","qualname":"::hash::Hash::hash","value":"fn <H> (&self, state: &mut H) -> ()","parent":{"krate":0,"index":6818},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1471337,"byte_end":1471382,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6822},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1472408,"byte_end":1472418,"line_start":202,"line_end":202,"column_start":8,"column_end":18},"name":"hash_slice","qualname":"::hash::Hash::hash_slice","value":"fn <H> (data: &[Self], state: &mut H) -> ()","parent":{"krate":0,"index":6818},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1471337,"byte_end":1471382,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":6824},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473538,"byte_end":1473544,"line_start":242,"line_end":242,"column_start":11,"column_end":17},"name":"Hasher","qualname":"::hash::Hasher","value":"Hasher","parent":null,"children":[{"krate":0,"index":6826},{"krate":0,"index":6828},{"krate":0,"index":6830},{"krate":0,"index":6832},{"krate":0,"index":6834},{"krate":0,"index":6836},{"krate":0,"index":6838},{"krate":0,"index":6840},{"krate":0,"index":6842},{"krate":0,"index":6844},{"krate":0,"index":6846},{"krate":0,"index":6848},{"krate":0,"index":6850},{"krate":0,"index":6852}],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6826},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1474255,"byte_end":1474261,"line_start":264,"line_end":264,"column_start":8,"column_end":14},"name":"finish","qualname":"::hash::Hasher::finish","value":"fn (&self) -> u64","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6828},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1474746,"byte_end":1474751,"line_start":282,"line_end":282,"column_start":8,"column_end":13},"name":"write","qualname":"::hash::Hasher::write","value":"fn (&mut self, bytes: &[u8]) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6830},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1474904,"byte_end":1474912,"line_start":287,"line_end":287,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::hash::Hasher::write_u8","value":"fn (&mut self, i: u8) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6832},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1475090,"byte_end":1475099,"line_start":293,"line_end":293,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::hash::Hasher::write_u16","value":"fn (&mut self, i: u16) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6834},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1475317,"byte_end":1475326,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::hash::Hasher::write_u32","value":"fn (&mut self, i: u32) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6836},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1475544,"byte_end":1475553,"line_start":305,"line_end":305,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::hash::Hasher::write_u64","value":"fn (&mut self, i: u64) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6838},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1475766,"byte_end":1475776,"line_start":311,"line_end":311,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::hash::Hasher::write_u128","value":"fn (&mut self, i: u128) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6840},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1475998,"byte_end":1476009,"line_start":317,"line_end":317,"column_start":8,"column_end":19},"name":"write_usize","qualname":"::hash::Hasher::write_usize","value":"fn (&mut self, i: usize) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6842},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1476326,"byte_end":1476334,"line_start":327,"line_end":327,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::hash::Hasher::write_i8","value":"fn (&mut self, i: i8) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6844},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1476518,"byte_end":1476527,"line_start":333,"line_end":333,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::hash::Hasher::write_i16","value":"fn (&mut self, i: i16) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6846},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1476714,"byte_end":1476723,"line_start":339,"line_end":339,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::hash::Hasher::write_i32","value":"fn (&mut self, i: i32) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6848},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1476910,"byte_end":1476919,"line_start":345,"line_end":345,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::hash::Hasher::write_i64","value":"fn (&mut self, i: i64) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6850},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1477101,"byte_end":1477111,"line_start":351,"line_end":351,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::hash::Hasher::write_i128","value":"fn (&mut self, i: i128) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6852},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1477303,"byte_end":1477314,"line_start":357,"line_end":357,"column_start":8,"column_end":19},"name":"write_isize","qualname":"::hash::Hasher::write_isize","value":"fn (&mut self, i: isize) -> ()","parent":{"krate":0,"index":6824},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1473482,"byte_end":1473527,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":6884},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1479579,"byte_end":1479590,"line_start":438,"line_end":438,"column_start":11,"column_end":22},"name":"BuildHasher","qualname":"::hash::BuildHasher","value":"BuildHasher","parent":null,"children":[{"krate":0,"index":6886},{"krate":0,"index":6888}],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1479516,"byte_end":1479568,"line_start":437,"line_end":437,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":6886},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1479708,"byte_end":1479714,"line_start":441,"line_end":441,"column_start":10,"column_end":16},"name":"Hasher","qualname":"::hash::BuildHasher::Hasher","value":"type Hasher: Hasher;","parent":{"krate":0,"index":6884},"children":[],"decl_id":null,"docs":" Type of the hasher that will be created.\n","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1479646,"byte_end":1479698,"line_start":440,"line_end":440,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":6888},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1480206,"byte_end":1480218,"line_start":460,"line_end":460,"column_start":8,"column_end":20},"name":"build_hasher","qualname":"::hash::BuildHasher::build_hasher","value":"fn (&self) -> Self::Hasher","parent":{"krate":0,"index":6884},"children":[],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1479516,"byte_end":1479568,"line_start":437,"line_end":437,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6890},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1481947,"byte_end":1481965,"line_start":512,"line_end":512,"column_start":12,"column_end":30},"name":"BuildHasherDefault","qualname":"::hash::BuildHasherDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Used to create a default [`BuildHasher`] instance for types that implement\n [`Hasher`] and [`Default`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1481883,"byte_end":1481935,"line_start":511,"line_end":511,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":6956},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":6958},{"krate":0,"index":6970},{"krate":0,"index":6972},{"krate":0,"index":6974},{"krate":0,"index":6976},{"krate":0,"index":6978},{"krate":0,"index":6980},{"krate":0,"index":6982},{"krate":0,"index":6984},{"krate":0,"index":7018},{"krate":0,"index":7078},{"krate":0,"index":36728},{"krate":0,"index":36730},{"krate":0,"index":7164},{"krate":0,"index":7176},{"krate":0,"index":7180},{"krate":0,"index":36782},{"krate":0,"index":36816},{"krate":0,"index":36812},{"krate":0,"index":36808},{"krate":0,"index":36804},{"krate":0,"index":36800},{"krate":0,"index":36796},{"krate":0,"index":36792},{"krate":0,"index":36788},{"krate":0,"index":36784},{"krate":0,"index":7182},{"krate":0,"index":7200},{"krate":0,"index":7208},{"krate":0,"index":7210},{"krate":0,"index":36818},{"krate":0,"index":36820},{"krate":0,"index":7212},{"krate":0,"index":7216},{"krate":0,"index":36822},{"krate":0,"index":36828},{"krate":0,"index":36824},{"krate":0,"index":7226},{"krate":0,"index":36830},{"krate":0,"index":36836},{"krate":0,"index":36832},{"krate":0,"index":7234},{"krate":0,"index":7238},{"krate":0,"index":7242},{"krate":0,"index":7246},{"krate":0,"index":7250},{"krate":0,"index":7254},{"krate":0,"index":7258},{"krate":0,"index":7262},{"krate":0,"index":7266},{"krate":0,"index":7270},{"krate":0,"index":7274},{"krate":0,"index":7278},{"krate":0,"index":7280},{"krate":0,"index":7334},{"krate":0,"index":7342},{"krate":0,"index":7346},{"krate":0,"index":36838},{"krate":0,"index":36842},{"krate":0,"index":36846},{"krate":0,"index":36850},{"krate":0,"index":36854},{"krate":0,"index":36858},{"krate":0,"index":36862},{"krate":0,"index":36866},{"krate":0,"index":36870},{"krate":0,"index":36874},{"krate":0,"index":36878},{"krate":0,"index":36882},{"krate":0,"index":36886},{"krate":0,"index":36890},{"krate":0,"index":36894},{"krate":0,"index":36898},{"krate":0,"index":7348},{"krate":0,"index":7352},{"krate":0,"index":7356},{"krate":0,"index":7360},{"krate":0,"index":7364},{"krate":0,"index":7368},{"krate":0,"index":7372},{"krate":0,"index":7376},{"krate":0,"index":7380},{"krate":0,"index":7384},{"krate":0,"index":7388},{"krate":0,"index":7392},{"krate":0,"index":7396},{"krate":0,"index":7400},{"krate":0,"index":7404},{"krate":0,"index":7406},{"krate":0,"index":7408},{"krate":0,"index":36902},{"krate":0,"index":36906},{"krate":0,"index":36910},{"krate":0,"index":36914},{"krate":0,"index":36918},{"krate":0,"index":36922},{"krate":0,"index":36926},{"krate":0,"index":36930},{"krate":0,"index":36934},{"krate":0,"index":36938},{"krate":0,"index":36942},{"krate":0,"index":36946},{"krate":0,"index":7410},{"krate":0,"index":7414},{"krate":0,"index":7418},{"krate":0,"index":7422},{"krate":0,"index":7426},{"krate":0,"index":7436},{"krate":0,"index":7440},{"krate":0,"index":7444}],"decl_id":null,"docs":" Utilities for formatting and printing strings.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501260,"byte_end":1501306,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":7040},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564383,"byte_end":1564387,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"zero","qualname":"::fmt::num::Int::zero","value":"fn () -> Self","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7042},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564406,"byte_end":1564413,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::fmt::num::Int::from_u8","value":"fn (u: u8) -> Self","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7044},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564437,"byte_end":1564442,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::fmt::num::Int::to_u8","value":"fn (&self) -> u8","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7046},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564464,"byte_end":1564470,"line_start":29,"line_end":29,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::fmt::num::Int::to_u16","value":"fn (&self) -> u16","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7048},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564493,"byte_end":1564499,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::fmt::num::Int::to_u32","value":"fn (&self) -> u32","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7050},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564522,"byte_end":1564528,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::fmt::num::Int::to_u64","value":"fn (&self) -> u64","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7052},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564551,"byte_end":1564558,"line_start":32,"line_end":32,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::fmt::num::Int::to_u128","value":"fn (&self) -> u128","parent":{"krate":0,"index":7038},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7058},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1565151,"byte_end":1565155,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"base","qualname":"::fmt::num::GenericRadix::base","value":"fn (&self) -> u8","parent":{"krate":0,"index":7056},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7060},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1565218,"byte_end":1565224,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"name":"prefix","qualname":"::fmt::num::GenericRadix::prefix","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":7056},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7062},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1565333,"byte_end":1565338,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"digit","qualname":"::fmt::num::GenericRadix::digit","value":"fn (&self, x: u8) -> u8","parent":{"krate":0,"index":7056},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7064},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1565429,"byte_end":1565436,"line_start":63,"line_end":63,"column_start":8,"column_end":15},"name":"fmt_int","qualname":"::fmt::num::GenericRadix::fmt_int","value":"fn <T> (&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result","parent":{"krate":0,"index":7056},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7092},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575528,"byte_end":1575539,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"DebugStruct","qualname":"::fmt::builders::DebugStruct","value":"DebugStruct {  }","parent":null,"children":[{"krate":0,"index":4317},{"krate":0,"index":4319},{"krate":0,"index":4321}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575410,"byte_end":1575421,"line_start":87,"line_end":87,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575422,"byte_end":1575461,"line_start":88,"line_end":88,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575462,"byte_end":1575516,"line_start":89,"line_end":89,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7094},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575648,"byte_end":1575664,"line_start":96,"line_end":96,"column_start":8,"column_end":24},"name":"debug_struct_new","qualname":"::fmt::builders::debug_struct_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7098},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1576094,"byte_end":1576099,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugStruct<'a, 'b>>::field","value":"fn (&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7100},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1577024,"byte_end":1577030,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugStruct<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7104},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578333,"byte_end":1578343,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"DebugTuple","qualname":"::fmt::builders::DebugTuple","value":"DebugTuple {  }","parent":null,"children":[{"krate":0,"index":4339},{"krate":0,"index":4341},{"krate":0,"index":4343},{"krate":0,"index":4345}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578215,"byte_end":1578226,"line_start":184,"line_end":184,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578227,"byte_end":1578266,"line_start":185,"line_end":185,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578267,"byte_end":1578321,"line_start":186,"line_end":186,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7106},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578471,"byte_end":1578486,"line_start":194,"line_end":194,"column_start":8,"column_end":23},"name":"debug_tuple_new","qualname":"::fmt::builders::debug_tuple_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7110},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578884,"byte_end":1578889,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugTuple<'a, 'b>>::field","value":"fn (&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7112},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1579763,"byte_end":1579769,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugTuple<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7122},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1581094,"byte_end":1581100,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugInner<'a, 'b>>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7126},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582193,"byte_end":1582201,"line_start":325,"line_end":325,"column_start":12,"column_end":20},"name":"DebugSet","qualname":"::fmt::builders::DebugSet","value":"DebugSet {  }","parent":null,"children":[{"krate":0,"index":4381}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582075,"byte_end":1582086,"line_start":322,"line_end":322,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582087,"byte_end":1582126,"line_start":323,"line_end":323,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582127,"byte_end":1582181,"line_start":324,"line_end":324,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7128},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582257,"byte_end":1582270,"line_start":329,"line_end":329,"column_start":8,"column_end":21},"name":"debug_set_new","qualname":"::fmt::builders::debug_set_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7132},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582651,"byte_end":1582656,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugSet<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7134},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582909,"byte_end":1582916,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugSet<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7136},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1583268,"byte_end":1583274,"line_start":362,"line_end":362,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugSet<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7138},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584217,"byte_end":1584226,"line_start":396,"line_end":396,"column_start":12,"column_end":21},"name":"DebugList","qualname":"::fmt::builders::DebugList","value":"DebugList {  }","parent":null,"children":[{"krate":0,"index":4401}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584099,"byte_end":1584110,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584111,"byte_end":1584150,"line_start":394,"line_end":394,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584151,"byte_end":1584205,"line_start":395,"line_end":395,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7140},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584282,"byte_end":1584296,"line_start":400,"line_end":400,"column_start":8,"column_end":22},"name":"debug_list_new","qualname":"::fmt::builders::debug_list_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7144},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584680,"byte_end":1584685,"line_start":414,"line_end":414,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugList<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7146},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584940,"byte_end":1584947,"line_start":421,"line_end":421,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugList<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7148},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1585300,"byte_end":1585306,"line_start":433,"line_end":433,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugList<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7150},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586324,"byte_end":1586332,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"DebugMap","qualname":"::fmt::builders::DebugMap","value":"DebugMap {  }","parent":null,"children":[{"krate":0,"index":4421},{"krate":0,"index":4423},{"krate":0,"index":4425}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586206,"byte_end":1586217,"line_start":464,"line_end":464,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586218,"byte_end":1586257,"line_start":465,"line_end":465,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586258,"byte_end":1586312,"line_start":466,"line_end":466,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7152},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586441,"byte_end":1586454,"line_start":473,"line_end":473,"column_start":8,"column_end":21},"name":"debug_map_new","qualname":"::fmt::builders::debug_map_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7156},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586784,"byte_end":1586789,"line_start":485,"line_end":485,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugMap<'a, 'b>>::entry","value":"fn (&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7158},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1587790,"byte_end":1587797,"line_start":514,"line_end":514,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugMap<'a, 'b>>::entries","value":"fn <K, V, I> (&mut self, entries: I) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7160},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1588187,"byte_end":1588193,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugMap<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25565},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501708,"byte_end":1501712,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":36728},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25567},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501776,"byte_end":1501781,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":36728},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25569},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501846,"byte_end":1501852,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":36728},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25571},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501894,"byte_end":1501901,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":36728},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":36728},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501635,"byte_end":1501644,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":25565},{"krate":0,"index":25567},{"krate":0,"index":25569},{"krate":0,"index":25571}],"decl_id":null,"docs":" Possible alignments returned by `Formatter::align`\n","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_flags_align\", issue = \"27726\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1501496,"byte_end":1501553,"line_start":28,"line_end":28,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":7176},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502167,"byte_end":1502169,"line_start":48,"line_end":48,"column_start":9,"column_end":11},"name":"rt","qualname":"::fmt::rt","value":"libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":7178}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502044,"byte_end":1502143,"line_start":45,"line_end":46,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":7178},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::fmt::rt::v1","value":"libcore/fmt/rt/v1.rs","parent":null,"children":[{"krate":0,"index":36734},{"krate":0,"index":36740},{"krate":0,"index":36736},{"krate":0,"index":36742},{"krate":0,"index":36748},{"krate":0,"index":36744},{"krate":0,"index":36750},{"krate":0,"index":36764},{"krate":0,"index":36760},{"krate":0,"index":36756},{"krate":0,"index":36752},{"krate":0,"index":36766},{"krate":0,"index":36772},{"krate":0,"index":36768},{"krate":0,"index":36774},{"krate":0,"index":36780},{"krate":0,"index":36776}],"decl_id":null,"docs":" This is an internal module used by the ifmt! runtime. These structures are\n emitted to static arrays to precompile format strings ahead of time.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589274,"byte_end":1589314,"line_start":16,"line_end":16,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":36734},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589350,"byte_end":1589358,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"Argument","qualname":"::fmt::rt::v1::Argument","value":"Argument { position, format }","parent":null,"children":[{"krate":0,"index":25573},{"krate":0,"index":25575}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589339,"byte_end":1589418,"line_start":19,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":25573},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589369,"byte_end":1589377,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"position","qualname":"::fmt::rt::v1::Argument::position","value":"fmt::rt::v1::Position","parent":{"krate":0,"index":36734},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25575},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589397,"byte_end":1589403,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"format","qualname":"::fmt::rt::v1::Argument::format","value":"fmt::rt::v1::FormatSpec","parent":{"krate":0,"index":36734},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36742},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589454,"byte_end":1589464,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"FormatSpec","qualname":"::fmt::rt::v1::FormatSpec","value":"FormatSpec { fill, align, flags, precision, width }","parent":null,"children":[{"krate":0,"index":25577},{"krate":0,"index":25579},{"krate":0,"index":25581},{"krate":0,"index":25583},{"krate":0,"index":25585}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589443,"byte_end":1589582,"line_start":25,"line_end":31,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":25577},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589475,"byte_end":1589479,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"name":"fill","qualname":"::fmt::rt::v1::FormatSpec::fill","value":"char","parent":{"krate":0,"index":36742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25579},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589495,"byte_end":1589500,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"name":"align","qualname":"::fmt::rt::v1::FormatSpec::align","value":"fmt::rt::v1::Alignment","parent":{"krate":0,"index":36742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25581},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589521,"byte_end":1589526,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"flags","qualname":"::fmt::rt::v1::FormatSpec::flags","value":"u32","parent":{"krate":0,"index":36742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25583},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589541,"byte_end":1589550,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"name":"precision","qualname":"::fmt::rt::v1::FormatSpec::precision","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":36742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25585},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589567,"byte_end":1589572,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"name":"width","qualname":"::fmt::rt::v1::FormatSpec::width","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":36742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25587},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589785,"byte_end":1589789,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::rt::v1::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":36750},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25589},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589853,"byte_end":1589858,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::rt::v1::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":36750},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25591},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589923,"byte_end":1589929,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::rt::v1::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":36750},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25593},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589971,"byte_end":1589978,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::rt::v1::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":36750},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":36750},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589712,"byte_end":1589721,"line_start":35,"line_end":35,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::rt::v1::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":25587},{"krate":0,"index":25589},{"krate":0,"index":25591},{"krate":0,"index":25593}],"decl_id":null,"docs":" Possible alignments that can be requested as part of a formatting directive.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589703,"byte_end":1589981,"line_start":35,"line_end":44,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1589703,"byte_end":1589981,"line_start":35,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25595},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590027,"byte_end":1590029,"line_start":48,"line_end":48,"column_start":5,"column_end":7},"name":"Is","qualname":"::fmt::rt::v1::Count::Is","value":"Count::Is(usize)","parent":{"krate":0,"index":36766},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25599},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590042,"byte_end":1590047,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Param","qualname":"::fmt::rt::v1::Count::Param","value":"Count::Param(usize)","parent":{"krate":0,"index":36766},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25603},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590060,"byte_end":1590069,"line_start":50,"line_end":50,"column_start":5,"column_end":14},"name":"NextParam","qualname":"::fmt::rt::v1::Count::NextParam","value":"Count::NextParam","parent":{"krate":0,"index":36766},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25605},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590075,"byte_end":1590082,"line_start":51,"line_end":51,"column_start":5,"column_end":12},"name":"Implied","qualname":"::fmt::rt::v1::Count::Implied","value":"Count::Implied","parent":{"krate":0,"index":36766},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":36766},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590015,"byte_end":1590020,"line_start":47,"line_end":47,"column_start":10,"column_end":15},"name":"Count","qualname":"::fmt::rt::v1::Count","value":"Count::{Is, Param, NextParam, Implied}","parent":null,"children":[{"krate":0,"index":25595},{"krate":0,"index":25599},{"krate":0,"index":25603},{"krate":0,"index":25605}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590006,"byte_end":1590085,"line_start":47,"line_end":52,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25607},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590134,"byte_end":1590138,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"Next","qualname":"::fmt::rt::v1::Position::Next","value":"Position::Next","parent":{"krate":0,"index":36774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":25609},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590144,"byte_end":1590146,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"At","qualname":"::fmt::rt::v1::Position::At","value":"Position::At(usize)","parent":{"krate":0,"index":36774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":36774},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590119,"byte_end":1590127,"line_start":55,"line_end":55,"column_start":10,"column_end":18},"name":"Position","qualname":"::fmt::rt::v1::Position","value":"Position::{Next, At}","parent":null,"children":[{"krate":0,"index":25607},{"krate":0,"index":25609}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1590110,"byte_end":1590156,"line_start":55,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":7180},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502743,"byte_end":1502749,"line_start":77,"line_end":77,"column_start":10,"column_end":16},"name":"Result","qualname":"::fmt::Result","value":"result::Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" The type returned by formatter methods.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502688,"byte_end":1502733,"line_start":76,"line_end":76,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":36782},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1503743,"byte_end":1503748,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"Error","qualname":"::fmt::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type which is returned from formatting a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1503609,"byte_end":1503654,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1503732,"byte_end":1503749,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1503732,"byte_end":1503749,"line_start":105,"line_end":105,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":7182},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1504416,"byte_end":1504421,"line_start":120,"line_end":120,"column_start":11,"column_end":16},"name":"Write","qualname":"::fmt::Write","value":"Write","parent":null,"children":[{"krate":0,"index":7184},{"krate":0,"index":7186},{"krate":0,"index":7188}],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1504360,"byte_end":1504405,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7184},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1505256,"byte_end":1505265,"line_start":148,"line_end":148,"column_start":8,"column_end":17},"name":"write_str","qualname":"::fmt::Write::write_str","value":"fn (&mut self, s: &str) -> Result","parent":{"krate":0,"index":7182},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1504360,"byte_end":1504405,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7186},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1506276,"byte_end":1506286,"line_start":179,"line_end":179,"column_start":8,"column_end":18},"name":"write_char","qualname":"::fmt::Write::write_char","value":"fn (&mut self, c: char) -> Result","parent":{"krate":0,"index":7182},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1504360,"byte_end":1504405,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7188},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1507052,"byte_end":1507061,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"write_fmt","qualname":"::fmt::Write::write_fmt","value":"fn (&mut self, args: Arguments) -> Result","parent":{"krate":0,"index":7182},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1504360,"byte_end":1504405,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7208},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1508455,"byte_end":1508464,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"Formatter","qualname":"::fmt::Formatter","value":"Formatter {  }","parent":null,"children":[{"krate":0,"index":4467},{"krate":0,"index":4469},{"krate":0,"index":4471},{"krate":0,"index":4473},{"krate":0,"index":4475},{"krate":0,"index":4477},{"krate":0,"index":4479},{"krate":0,"index":4481}],"decl_id":null,"docs":" A struct to represent both where to emit formatting strings to and how they\n should be formatted. A mutable version of this is passed to all formatting\n traits.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1508358,"byte_end":1508397,"line_start":248,"line_end":248,"column_start":1,"column_end":40}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1508398,"byte_end":1508443,"line_start":249,"line_end":249,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":36818},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1509869,"byte_end":1509879,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"ArgumentV1","qualname":"::fmt::ArgumentV1","value":"ArgumentV1 {  }","parent":null,"children":[{"krate":0,"index":25617},{"krate":0,"index":25619}],"decl_id":null,"docs":" This struct represents the generic \"argument\" which is taken by the Xprintf\n family of functions. It contains a function to format the given value. At\n compile time it is ensured that the function and the value have the correct\n types, and then this struct is used to canonicalize arguments to one type.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1509703,"byte_end":1509742,"line_start":282,"line_end":282,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1509743,"byte_end":1509842,"line_start":283,"line_end":284,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1509858,"byte_end":1509960,"line_start":286,"line_end":289,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":7220},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1510440,"byte_end":1510443,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgumentV1<'a>>::new","value":"fn <'b, T> (x: &'b T, f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7222},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1510838,"byte_end":1510848,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"from_usize","qualname":"<ArgumentV1<'a>>::from_usize","value":"fn (x: &usize) -> ArgumentV1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7228},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1511598,"byte_end":1511604,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"new_v1","qualname":"<Arguments<'a>>::new_v1","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7230},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1512360,"byte_end":1512376,"line_start":362,"line_end":362,"column_start":12,"column_end":28},"name":"new_v1_formatted","qualname":"<Arguments<'a>>::new_v1_formatted","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>], fmt: &'a [rt::v1::Argument]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7232},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1512996,"byte_end":1513014,"line_start":379,"line_end":379,"column_start":12,"column_end":30},"name":"estimated_capacity","qualname":"<Arguments<'a>>::estimated_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36830},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1514469,"byte_end":1514478,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"Arguments","qualname":"::fmt::Arguments","value":"Arguments {  }","parent":null,"children":[{"krate":0,"index":25633},{"krate":0,"index":25635},{"krate":0,"index":25637}],"decl_id":null,"docs":" This structure represents a safely precompiled version of a format string\n and its arguments. This cannot be generated at runtime because it cannot\n safely be done, so no constructors are given and the fields are private\n to prevent modification.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1514389,"byte_end":1514434,"line_start":412,"line_end":412,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1514458,"byte_end":1514840,"line_start":414,"line_end":424,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":7242},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517769,"byte_end":1517774,"line_start":537,"line_end":537,"column_start":11,"column_end":16},"name":"Debug","qualname":"::fmt::Debug","value":"Debug","parent":null,"children":[{"krate":0,"index":7244}],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517478,"byte_end":1517523,"line_start":532,"line_end":532,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517524,"byte_end":1517734,"line_start":533,"line_end":535,"column_start":1,"column_end":52}},{"value":"lang = \"debug_trait\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517735,"byte_end":1517758,"line_start":536,"line_end":536,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":7244},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1518420,"byte_end":1518423,"line_start":560,"line_end":560,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Debug::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7242},"children":[],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517478,"byte_end":1517523,"line_start":532,"line_end":532,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517524,"byte_end":1517734,"line_start":533,"line_end":535,"column_start":1,"column_end":52}},{"value":"lang = \"debug_trait\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1517735,"byte_end":1517758,"line_start":536,"line_end":536,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":7246},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1519472,"byte_end":1519479,"line_start":600,"line_end":600,"column_start":11,"column_end":18},"name":"Display","qualname":"::fmt::Display","value":"Display","parent":null,"children":[{"krate":0,"index":7248}],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1519213,"byte_end":1519415,"line_start":596,"line_end":598,"column_start":1,"column_end":46}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1519416,"byte_end":1519461,"line_start":599,"line_end":599,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7248},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1520121,"byte_end":1520124,"line_start":623,"line_end":623,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Display::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7246},"children":[],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1519213,"byte_end":1519415,"line_start":596,"line_end":598,"column_start":1,"column_end":46}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1519416,"byte_end":1519461,"line_start":599,"line_end":599,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7250},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1521318,"byte_end":1521323,"line_start":672,"line_end":672,"column_start":11,"column_end":16},"name":"Octal","qualname":"::fmt::Octal","value":"Octal","parent":null,"children":[{"krate":0,"index":7252}],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1521262,"byte_end":1521307,"line_start":671,"line_end":671,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7252},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1521436,"byte_end":1521439,"line_start":675,"line_end":675,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Octal::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7250},"children":[],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1521262,"byte_end":1521307,"line_start":671,"line_end":671,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7254},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1522673,"byte_end":1522679,"line_start":724,"line_end":724,"column_start":11,"column_end":17},"name":"Binary","qualname":"::fmt::Binary","value":"Binary","parent":null,"children":[{"krate":0,"index":7256}],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1522617,"byte_end":1522662,"line_start":723,"line_end":723,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7256},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1522792,"byte_end":1522795,"line_start":727,"line_end":727,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Binary::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7254},"children":[],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1522617,"byte_end":1522662,"line_start":723,"line_end":723,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7258},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1524036,"byte_end":1524044,"line_start":777,"line_end":777,"column_start":11,"column_end":19},"name":"LowerHex","qualname":"::fmt::LowerHex","value":"LowerHex","parent":null,"children":[{"krate":0,"index":7260}],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1523980,"byte_end":1524025,"line_start":776,"line_end":776,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7260},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1524157,"byte_end":1524160,"line_start":780,"line_end":780,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7258},"children":[],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1523980,"byte_end":1524025,"line_start":776,"line_end":776,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7262},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1525401,"byte_end":1525409,"line_start":830,"line_end":830,"column_start":11,"column_end":19},"name":"UpperHex","qualname":"::fmt::UpperHex","value":"UpperHex","parent":null,"children":[{"krate":0,"index":7264}],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1525345,"byte_end":1525390,"line_start":829,"line_end":829,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7264},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1525522,"byte_end":1525525,"line_start":833,"line_end":833,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7262},"children":[],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1525345,"byte_end":1525390,"line_start":829,"line_end":829,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7266},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1526533,"byte_end":1526540,"line_start":875,"line_end":875,"column_start":11,"column_end":18},"name":"Pointer","qualname":"::fmt::Pointer","value":"Pointer","parent":null,"children":[{"krate":0,"index":7268}],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1526477,"byte_end":1526522,"line_start":874,"line_end":874,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7268},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1526653,"byte_end":1526656,"line_start":878,"line_end":878,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Pointer::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7266},"children":[],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1526477,"byte_end":1526522,"line_start":874,"line_end":874,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7270},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1527571,"byte_end":1527579,"line_start":918,"line_end":918,"column_start":11,"column_end":19},"name":"LowerExp","qualname":"::fmt::LowerExp","value":"LowerExp","parent":null,"children":[{"krate":0,"index":7272}],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1527515,"byte_end":1527560,"line_start":917,"line_end":917,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7272},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1527692,"byte_end":1527695,"line_start":921,"line_end":921,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7270},"children":[],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1527515,"byte_end":1527560,"line_start":917,"line_end":917,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7274},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1528611,"byte_end":1528619,"line_start":961,"line_end":961,"column_start":11,"column_end":19},"name":"UpperExp","qualname":"::fmt::UpperExp","value":"UpperExp","parent":null,"children":[{"krate":0,"index":7276}],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1528555,"byte_end":1528600,"line_start":960,"line_end":960,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7276},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1528732,"byte_end":1528735,"line_start":964,"line_end":964,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7274},"children":[],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1528555,"byte_end":1528600,"line_start":960,"line_end":960,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":7278},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1529727,"byte_end":1529732,"line_start":999,"line_end":999,"column_start":8,"column_end":13},"name":"write","qualname":"::fmt::write","value":"fn (output: &mut Write, args: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":" The `write` function takes an output stream, and an `Arguments` struct\n that can be precompiled with the `format_args!` macro.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1529674,"byte_end":1529719,"line_start":998,"line_end":998,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7288},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1533669,"byte_end":1533681,"line_start":1112,"line_end":1112,"column_start":12,"column_end":24},"name":"pad_integral","qualname":"<Formatter<'a>>::pad_integral","value":"fn (&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7290},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1536447,"byte_end":1536450,"line_start":1183,"line_end":1183,"column_start":12,"column_end":15},"name":"pad","qualname":"<Formatter<'a>>::pad","value":"fn (&mut self, s: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7302},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1542567,"byte_end":1542576,"line_start":1340,"line_end":1340,"column_start":12,"column_end":21},"name":"write_str","qualname":"<Formatter<'a>>::write_str","value":"fn (&mut self, data: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7304},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1542774,"byte_end":1542783,"line_start":1346,"line_end":1346,"column_start":12,"column_end":21},"name":"write_fmt","qualname":"<Formatter<'a>>::write_fmt","value":"fn (&mut self, fmt: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7306},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1543150,"byte_end":1543155,"line_start":1355,"line_end":1355,"column_start":12,"column_end":17},"name":"flags","qualname":"<Formatter<'a>>::flags","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7308},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1543312,"byte_end":1543316,"line_start":1359,"line_end":1359,"column_start":12,"column_end":16},"name":"fill","qualname":"<Formatter<'a>>::fill","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7310},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1543532,"byte_end":1543537,"line_start":1364,"line_end":1364,"column_start":12,"column_end":17},"name":"align","qualname":"<Formatter<'a>>::align","value":"fn (&self) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7312},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1543974,"byte_end":1543979,"line_start":1375,"line_end":1375,"column_start":12,"column_end":17},"name":"width","qualname":"<Formatter<'a>>::width","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7314},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1544142,"byte_end":1544151,"line_start":1379,"line_end":1379,"column_start":12,"column_end":21},"name":"precision","qualname":"<Formatter<'a>>::precision","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7316},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1544311,"byte_end":1544320,"line_start":1383,"line_end":1383,"column_start":12,"column_end":21},"name":"sign_plus","qualname":"<Formatter<'a>>::sign_plus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7318},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1544505,"byte_end":1544515,"line_start":1387,"line_end":1387,"column_start":12,"column_end":22},"name":"sign_minus","qualname":"<Formatter<'a>>::sign_minus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7320},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1544701,"byte_end":1544710,"line_start":1391,"line_end":1391,"column_start":12,"column_end":21},"name":"alternate","qualname":"<Formatter<'a>>::alternate","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7322},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1544896,"byte_end":1544915,"line_start":1395,"line_end":1395,"column_start":12,"column_end":31},"name":"sign_aware_zero_pad","qualname":"<Formatter<'a>>::sign_aware_zero_pad","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7324},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1545936,"byte_end":1545948,"line_start":1428,"line_end":1428,"column_start":12,"column_end":24},"name":"debug_struct","qualname":"<Formatter<'a>>::debug_struct","value":"fn <'b> (&'b mut self, name: &str) -> DebugStruct<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7326},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1546774,"byte_end":1546785,"line_start":1455,"line_end":1455,"column_start":12,"column_end":23},"name":"debug_tuple","qualname":"<Formatter<'a>>::debug_tuple","value":"fn <'b> (&'b mut self, name: &str) -> DebugTuple<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7328},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1547505,"byte_end":1547515,"line_start":1479,"line_end":1479,"column_start":12,"column_end":22},"name":"debug_list","qualname":"<Formatter<'a>>::debug_list","value":"fn <'b> (&'b mut self) -> DebugList<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7330},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1548212,"byte_end":1548221,"line_start":1503,"line_end":1503,"column_start":12,"column_end":21},"name":"debug_set","qualname":"<Formatter<'a>>::debug_set","value":"fn <'b> (&'b mut self) -> DebugSet<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7332},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1549004,"byte_end":1549013,"line_start":1527,"line_end":1527,"column_start":12,"column_end":21},"name":"debug_map","qualname":"<Formatter<'a>>::debug_map","value":"fn <'b> (&'b mut self) -> DebugMap<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7448},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"time","qualname":"::time","value":"libcore/time.rs","parent":null,"children":[{"krate":0,"index":7450},{"krate":0,"index":7452},{"krate":0,"index":7470},{"krate":0,"index":7472},{"krate":0,"index":7474},{"krate":0,"index":7476},{"krate":0,"index":7478},{"krate":0,"index":36950},{"krate":0,"index":36992},{"krate":0,"index":36990},{"krate":0,"index":36984},{"krate":0,"index":36980},{"krate":0,"index":36968},{"krate":0,"index":36964},{"krate":0,"index":36960},{"krate":0,"index":36956},{"krate":0,"index":36952},{"krate":0,"index":7480},{"krate":0,"index":7508},{"krate":0,"index":7514},{"krate":0,"index":7518},{"krate":0,"index":7524},{"krate":0,"index":7528},{"krate":0,"index":7534},{"krate":0,"index":7538},{"krate":0,"index":7544},{"krate":0,"index":7548},{"krate":0,"index":7552}],"decl_id":null,"docs":" Temporal quantification.","sig":null,"attributes":[{"value":"stable(feature = \"duration_core\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1590629,"byte_end":1590684,"line_start":10,"line_end":10,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":36950},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1592329,"byte_end":1592337,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"Duration","qualname":"::time::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":25865},{"krate":0,"index":25867}],"decl_id":null,"docs":" A `Duration` type to represent a span of time, typically used for system\n timeouts.","sig":null,"attributes":[{"value":"stable(feature = \"duration_core\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1592186,"byte_end":1592240,"line_start":61,"line_end":61,"column_start":1,"column_end":55}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1592318,"byte_end":1592409,"line_start":63,"line_end":66,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1592318,"byte_end":1592409,"line_start":63,"line_end":66,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":7482},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1593078,"byte_end":1593081,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Duration>::new","value":"fn (secs: u64, nanos: u32) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7484},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1593740,"byte_end":1593749,"line_start":110,"line_end":110,"column_start":18,"column_end":27},"name":"from_secs","qualname":"<Duration>::from_secs","value":"fn (secs: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7486},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1594245,"byte_end":1594256,"line_start":128,"line_end":128,"column_start":18,"column_end":29},"name":"from_millis","qualname":"<Duration>::from_millis","value":"fn (millis: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7488},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1594911,"byte_end":1594922,"line_start":150,"line_end":150,"column_start":18,"column_end":29},"name":"from_micros","qualname":"<Duration>::from_micros","value":"fn (micros: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7490},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1595568,"byte_end":1595578,"line_start":172,"line_end":172,"column_start":18,"column_end":28},"name":"from_nanos","qualname":"<Duration>::from_nanos","value":"fn (nanos: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7492},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1596730,"byte_end":1596737,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"as_secs","qualname":"<Duration>::as_secs","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7494},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1597443,"byte_end":1597456,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"subsec_millis","qualname":"<Duration>::subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7496},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1598211,"byte_end":1598224,"line_start":249,"line_end":249,"column_start":12,"column_end":25},"name":"subsec_micros","qualname":"<Duration>::subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7498},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1598906,"byte_end":1598918,"line_start":268,"line_end":268,"column_start":12,"column_end":24},"name":"subsec_nanos","qualname":"<Duration>::subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7500},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1599546,"byte_end":1599557,"line_start":287,"line_end":287,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"fn (self, rhs: Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7502},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1600800,"byte_end":1600811,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"fn (self, rhs: Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7504},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1602021,"byte_end":1602032,"line_start":361,"line_end":361,"column_start":12,"column_end":23},"name":"checked_mul","qualname":"<Duration>::checked_mul","value":"fn (self, rhs: u32) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7506},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1603292,"byte_end":1603303,"line_start":397,"line_end":397,"column_start":12,"column_end":23},"name":"checked_div","qualname":"<Duration>::checked_div","value":"fn (self, rhs: u32) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":7576},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1623068,"byte_end":1623087,"line_start":23,"line_end":23,"column_start":18,"column_end":37},"name":"TrustedRandomAccess","qualname":"::iter_private::TrustedRandomAccess","value":"TrustedRandomAccess: ExactSizeIterator","parent":null,"children":[{"krate":0,"index":7578},{"krate":0,"index":7580}],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7578},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1623124,"byte_end":1623137,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::iter_private::TrustedRandomAccess::get_unchecked","value":"fn (&mut self, i: usize) -> Self::Item","parent":{"krate":0,"index":7576},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7580},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1623313,"byte_end":1623333,"line_start":27,"line_end":27,"column_start":8,"column_end":28},"name":"may_have_side_effect","qualname":"::iter_private::TrustedRandomAccess::may_have_side_effect","value":"fn () -> bool","parent":{"krate":0,"index":7576},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4361,"byte_end":4366,"line_start":114,"line_end":114,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4401,"byte_end":4403,"line_start":115,"line_end":115,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4438,"byte_end":4441,"line_start":116,"line_end":116,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":52}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4476,"byte_end":4479,"line_start":117,"line_end":117,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":54}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4514,"byte_end":4517,"line_start":118,"line_end":118,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4553,"byte_end":4557,"line_start":119,"line_end":119,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4593,"byte_end":4598,"line_start":121,"line_end":121,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4633,"byte_end":4635,"line_start":122,"line_end":122,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":62}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4670,"byte_end":4673,"line_start":123,"line_end":123,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":64}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4708,"byte_end":4711,"line_start":124,"line_end":124,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4746,"byte_end":4749,"line_start":125,"line_end":125,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4785,"byte_end":4789,"line_start":126,"line_end":126,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4825,"byte_end":4828,"line_start":128,"line_end":128,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":72}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4863,"byte_end":4866,"line_start":129,"line_end":129,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":188}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4890,"byte_end":4893,"line_start":132,"line_end":132,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":302}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66956,"byte_end":66963,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":384}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198923,"byte_end":198932,"line_start":136,"line_end":136,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":398}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":198942,"byte_end":198949,"line_start":137,"line_end":137,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":402}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":199016,"byte_end":199022,"line_start":141,"line_end":141,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":430}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":199036,"byte_end":199041,"line_start":142,"line_end":142,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":472}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66973,"byte_end":66980,"line_start":95,"line_end":95,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":564}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":278567,"byte_end":278572,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":680}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":278582,"byte_end":278587,"line_start":107,"line_end":107,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":850}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66990,"byte_end":66996,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":900}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":67006,"byte_end":67015,"line_start":97,"line_end":97,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":926}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4978,"byte_end":4985,"line_start":136,"line_end":136,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1114}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":371577,"byte_end":371579,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":1116}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5041,"byte_end":5051,"line_start":140,"line_end":140,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1200}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5061,"byte_end":5064,"line_start":141,"line_end":141,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1208}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5074,"byte_end":5081,"line_start":142,"line_end":142,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1352}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5091,"byte_end":5094,"line_start":143,"line_end":143,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1386}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5133,"byte_end":5139,"line_start":147,"line_end":147,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1690}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5149,"byte_end":5152,"line_start":148,"line_end":148,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1742}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5162,"byte_end":5165,"line_start":149,"line_end":149,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2254}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5175,"byte_end":5180,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2444}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5190,"byte_end":5197,"line_start":151,"line_end":151,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2456}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5207,"byte_end":5214,"line_start":152,"line_end":152,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2464}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5224,"byte_end":5230,"line_start":153,"line_end":153,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2544}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5285,"byte_end":5288,"line_start":157,"line_end":157,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2574}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5298,"byte_end":5303,"line_start":158,"line_end":158,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2616}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5313,"byte_end":5317,"line_start":159,"line_end":159,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2672}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":776442,"byte_end":776448,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2674}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5327,"byte_end":5331,"line_start":160,"line_end":160,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2802}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5341,"byte_end":5345,"line_start":161,"line_end":161,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3080}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5355,"byte_end":5364,"line_start":162,"line_end":162,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3274}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5374,"byte_end":5378,"line_start":163,"line_end":163,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3286}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5388,"byte_end":5394,"line_start":164,"line_end":164,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4452}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5404,"byte_end":5407,"line_start":165,"line_end":165,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4666}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5417,"byte_end":5423,"line_start":166,"line_end":166,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4668}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5434,"byte_end":5439,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4846}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1209978,"byte_end":1209984,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4908}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5449,"byte_end":5452,"line_start":169,"line_end":169,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5854}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1333110,"byte_end":1333117,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5890}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5462,"byte_end":5466,"line_start":170,"line_end":170,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6706}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5476,"byte_end":5479,"line_start":171,"line_end":171,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6956}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1502184,"byte_end":1502186,"line_start":49,"line_end":49,"column_start":13,"column_end":15},"ref_id":{"krate":0,"index":7178}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5489,"byte_end":5493,"line_start":172,"line_end":172,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":7448}}],"macro_refs":[],"relations":[{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65765,"byte_end":65773,"line_start":50,"line_end":50,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65966,"byte_end":65974,"line_start":57,"line_end":57,"column_start":40,"column_end":48},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66161,"byte_end":66169,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7254}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66354,"byte_end":66362,"line_start":71,"line_end":71,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7250}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66553,"byte_end":66561,"line_start":78,"line_end":78,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7258}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":66752,"byte_end":66760,"line_start":85,"line_end":85,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":7654},"to":{"krate":0,"index":7262}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224435,"byte_end":224443,"line_start":54,"line_end":54,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":740},"to":{"krate":0,"index":414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":224446,"byte_end":224450,"line_start":54,"line_end":54,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":200373,"byte_end":200377,"line_start":184,"line_end":184,"column_start":10,"column_end":14},"kind":"Impl","from":{"krate":0,"index":11380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":202110,"byte_end":202119,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":11402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332150,"byte_end":332158,"line_start":46,"line_end":46,"column_start":6,"column_end":14},"kind":"Impl","from":{"krate":0,"index":11428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332637,"byte_end":332642,"line_start":59,"line_end":59,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":998},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332649,"byte_end":332653,"line_start":60,"line_end":60,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332660,"byte_end":332665,"line_start":61,"line_end":61,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":7242},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332672,"byte_end":332680,"line_start":62,"line_end":62,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":7270},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332687,"byte_end":332690,"line_start":63,"line_end":63,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1762},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332710,"byte_end":332713,"line_start":64,"line_end":64,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1770},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":332733,"byte_end":332736,"line_start":65,"line_end":65,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1790},"to":{"krate":0,"index":740}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":345308,"byte_end":345315,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"kind":"Impl","from":{"krate":0,"index":11490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280388,"byte_end":280403,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"kind":"Impl","from":{"krate":0,"index":11534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":280929,"byte_end":280944,"line_start":184,"line_end":184,"column_start":23,"column_end":38},"kind":"Impl","from":{"krate":0,"index":11534},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":349929,"byte_end":349934,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":906}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":369276,"byte_end":369278,"line_start":30,"line_end":30,"column_start":6,"column_end":8},"kind":"Impl","from":{"krate":0,"index":11786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":156323,"byte_end":156328,"line_start":2882,"line_end":2882,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":998}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":159941,"byte_end":159956,"line_start":2975,"line_end":2975,"column_start":6,"column_end":21},"kind":"Impl","from":{"krate":0,"index":13030},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":160368,"byte_end":160383,"line_start":2987,"line_end":2987,"column_start":23,"column_end":38},"kind":"Impl","from":{"krate":0,"index":13030},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":160571,"byte_end":160586,"line_start":2994,"line_end":2994,"column_start":27,"column_end":42},"kind":"Impl","from":{"krate":0,"index":13030},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":166914,"byte_end":166924,"line_start":3193,"line_end":3193,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":2312},"to":{"krate":0,"index":1070}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":166927,"byte_end":166931,"line_start":3193,"line_end":3193,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":1070}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170742,"byte_end":170755,"line_start":3313,"line_end":3313,"column_start":6,"column_end":19},"kind":"Impl","from":{"krate":0,"index":13810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":171453,"byte_end":171466,"line_start":3330,"line_end":3330,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":13810},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":467977,"byte_end":467989,"line_start":845,"line_end":845,"column_start":18,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":1710}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":468082,"byte_end":468094,"line_start":848,"line_end":848,"column_start":26,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":468240,"byte_end":468252,"line_start":855,"line_end":855,"column_start":28,"column_end":40},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":2258}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":468410,"byte_end":468422,"line_start":862,"line_end":862,"column_start":21,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":468513,"byte_end":468525,"line_start":865,"line_end":865,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":6818}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":468704,"byte_end":468716,"line_start":872,"line_end":872,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1266},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":471403,"byte_end":471415,"line_start":952,"line_end":952,"column_start":9,"column_end":21},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":472776,"byte_end":472788,"line_start":999,"line_end":999,"column_start":19,"column_end":31},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":1922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":473004,"byte_end":473016,"line_start":1010,"line_end":1010,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":1940}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":473245,"byte_end":473257,"line_start":1020,"line_end":1020,"column_start":40,"column_end":52},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":473522,"byte_end":473534,"line_start":1029,"line_end":1029,"column_start":26,"column_end":38},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":473815,"byte_end":473827,"line_start":1040,"line_end":1040,"column_start":30,"column_end":42},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":474009,"byte_end":474021,"line_start":1047,"line_end":1047,"column_start":34,"column_end":46},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2258}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":474267,"byte_end":474279,"line_start":1058,"line_end":1058,"column_start":20,"column_end":32},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":474383,"byte_end":474395,"line_start":1061,"line_end":1061,"column_start":36,"column_end":48},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":474917,"byte_end":474929,"line_start":1084,"line_end":1084,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":475129,"byte_end":475141,"line_start":1091,"line_end":1091,"column_start":40,"column_end":52},"kind":"Impl","from":{"krate":0,"index":14020},"to":{"krate":0,"index":6818}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":477640,"byte_end":477647,"line_start":67,"line_end":67,"column_start":19,"column_end":26},"kind":"Impl","from":{"krate":0,"index":14080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478416,"byte_end":478423,"line_start":94,"line_end":94,"column_start":79,"column_end":86},"kind":"Impl","from":{"krate":0,"index":14080},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478471,"byte_end":478478,"line_start":96,"line_end":96,"column_start":41,"column_end":48},"kind":"Impl","from":{"krate":0,"index":14080},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478609,"byte_end":478616,"line_start":102,"line_end":102,"column_start":41,"column_end":48},"kind":"Impl","from":{"krate":0,"index":14080},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":478776,"byte_end":478783,"line_start":109,"line_end":109,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":14080},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":558346,"byte_end":558352,"line_start":2347,"line_end":2347,"column_start":32,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":558790,"byte_end":558796,"line_start":2358,"line_end":2358,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559124,"byte_end":559130,"line_start":2365,"line_end":2365,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559206,"byte_end":559212,"line_start":2368,"line_end":2368,"column_start":16,"column_end":22},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559671,"byte_end":559677,"line_start":2383,"line_end":2383,"column_start":17,"column_end":23},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561013,"byte_end":561019,"line_start":2423,"line_end":2423,"column_start":27,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561155,"byte_end":561161,"line_start":2430,"line_end":2430,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":1710}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561278,"byte_end":561284,"line_start":2433,"line_end":2433,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561397,"byte_end":561403,"line_start":2436,"line_end":2436,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":7266}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561614,"byte_end":561620,"line_start":2443,"line_end":2443,"column_start":41,"column_end":47},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":561842,"byte_end":561848,"line_start":2450,"line_end":2450,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":562071,"byte_end":562077,"line_start":2457,"line_end":2457,"column_start":42,"column_end":48},"kind":"Impl","from":{"krate":0,"index":1588},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":563659,"byte_end":563666,"line_start":2491,"line_end":2491,"column_start":32,"column_end":39},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564021,"byte_end":564028,"line_start":2500,"line_end":2500,"column_start":27,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564273,"byte_end":564280,"line_start":2505,"line_end":2505,"column_start":27,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564304,"byte_end":564311,"line_start":2507,"line_end":2507,"column_start":16,"column_end":23},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564723,"byte_end":564730,"line_start":2521,"line_end":2521,"column_start":17,"column_end":24},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566288,"byte_end":566295,"line_start":2566,"line_end":2566,"column_start":27,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566428,"byte_end":566435,"line_start":2573,"line_end":2573,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":1710}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566550,"byte_end":566557,"line_start":2576,"line_end":2576,"column_start":58,"column_end":65},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566667,"byte_end":566674,"line_start":2579,"line_end":2579,"column_start":34,"column_end":41},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":7266}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566878,"byte_end":566885,"line_start":2586,"line_end":2586,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567074,"byte_end":567081,"line_start":2593,"line_end":2593,"column_start":41,"column_end":48},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567279,"byte_end":567286,"line_start":2600,"line_end":2600,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":1640},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":576712,"byte_end":576717,"line_start":268,"line_end":268,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":2446},"to":{"krate":0,"index":1710}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":587340,"byte_end":587350,"line_start":558,"line_end":558,"column_start":29,"column_end":39},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":1728}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":587391,"byte_end":587402,"line_start":559,"line_end":559,"column_start":35,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1720},"to":{"krate":0,"index":1728}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":647356,"byte_end":647361,"line_start":166,"line_end":166,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":1922},"to":{"krate":0,"index":1940}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":653775,"byte_end":653780,"line_start":70,"line_end":70,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":1960},"to":{"krate":0,"index":1956}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":656189,"byte_end":656195,"line_start":143,"line_end":143,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1964},"to":{"krate":0,"index":1960}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":670519,"byte_end":670524,"line_start":149,"line_end":149,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":2016},"to":{"krate":0,"index":2022}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":674054,"byte_end":674059,"line_start":82,"line_end":82,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":2028},"to":{"krate":0,"index":2038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":676224,"byte_end":676229,"line_start":140,"line_end":140,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2028},"to":{"krate":0,"index":2052}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":677945,"byte_end":677954,"line_start":53,"line_end":53,"column_start":21,"column_end":30},"kind":"Impl","from":{"krate":0,"index":29124},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":679030,"byte_end":679035,"line_start":89,"line_end":89,"column_start":38,"column_end":43},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":679291,"byte_end":679296,"line_start":96,"line_end":96,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":680967,"byte_end":680976,"line_start":149,"line_end":149,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":681218,"byte_end":681227,"line_start":156,"line_end":156,"column_start":28,"column_end":37},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":683083,"byte_end":683090,"line_start":220,"line_end":220,"column_start":38,"column_end":45},"kind":"Impl","from":{"krate":0,"index":29184},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":683330,"byte_end":683337,"line_start":227,"line_end":227,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":29184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":684960,"byte_end":684974,"line_start":277,"line_end":277,"column_start":38,"column_end":52},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":685231,"byte_end":685245,"line_start":284,"line_end":284,"column_start":28,"column_end":42},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687636,"byte_end":687652,"line_start":358,"line_end":358,"column_start":38,"column_end":54},"kind":"Impl","from":{"krate":0,"index":29226},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":687893,"byte_end":687909,"line_start":365,"line_end":365,"column_start":28,"column_end":44},"kind":"Impl","from":{"krate":0,"index":29226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":700728,"byte_end":700737,"line_start":164,"line_end":164,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":2258},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":702495,"byte_end":702503,"line_start":219,"line_end":219,"column_start":6,"column_end":14},"kind":"Impl","from":{"krate":0,"index":29248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":706496,"byte_end":706503,"line_start":351,"line_end":351,"column_start":36,"column_end":43},"kind":"Impl","from":{"krate":0,"index":29268},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":707014,"byte_end":707021,"line_start":368,"line_end":368,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":29268},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":709015,"byte_end":709017,"line_start":431,"line_end":431,"column_start":16,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":2264},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":709020,"byte_end":709030,"line_start":431,"line_end":431,"column_start":21,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2312},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":710540,"byte_end":710548,"line_start":483,"line_end":483,"column_start":13,"column_end":21},"kind":"Impl","from":{"krate":0,"index":29248},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":710612,"byte_end":710620,"line_start":486,"line_end":486,"column_start":14,"column_end":22},"kind":"Impl","from":{"krate":0,"index":29248},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":710807,"byte_end":710815,"line_start":494,"line_end":494,"column_start":21,"column_end":29},"kind":"Impl","from":{"krate":0,"index":29248},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":714148,"byte_end":714157,"line_start":602,"line_end":602,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":2258},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":729553,"byte_end":729558,"line_start":92,"line_end":92,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":733372,"byte_end":733377,"line_start":94,"line_end":94,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":738350,"byte_end":738360,"line_start":64,"line_end":64,"column_start":23,"column_end":33},"kind":"Impl","from":{"krate":0,"index":29710},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":743984,"byte_end":743989,"line_start":244,"line_end":244,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2480}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":746587,"byte_end":746592,"line_start":327,"line_end":327,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747297,"byte_end":747302,"line_start":345,"line_end":345,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2488}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":747592,"byte_end":747597,"line_start":355,"line_end":355,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":2494}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":749259,"byte_end":749260,"line_start":412,"line_end":412,"column_start":24,"column_end":25},"kind":"Impl","from":{"krate":0,"index":1409},"to":{"krate":0,"index":2480}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":749439,"byte_end":749440,"line_start":421,"line_end":421,"column_start":21,"column_end":22},"kind":"Impl","from":{"krate":0,"index":1413},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":749580,"byte_end":749581,"line_start":428,"line_end":428,"column_start":27,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1415},"to":{"krate":0,"index":2488}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":749904,"byte_end":749905,"line_start":440,"line_end":440,"column_start":27,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1419},"to":{"krate":0,"index":2494}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":752913,"byte_end":752919,"line_start":64,"line_end":64,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":2546},"to":{"krate":0,"index":2550}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":753437,"byte_end":753438,"line_start":85,"line_end":85,"column_start":31,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1431},"to":{"krate":0,"index":2546}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":753559,"byte_end":753560,"line_start":90,"line_end":90,"column_start":34,"column_end":35},"kind":"Impl","from":{"krate":0,"index":1433},"to":{"krate":0,"index":2550}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":758159,"byte_end":758160,"line_start":114,"line_end":114,"column_start":36,"column_end":37},"kind":"Impl","from":{"krate":0,"index":1447},"to":{"krate":0,"index":2580}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":758495,"byte_end":758498,"line_start":123,"line_end":123,"column_start":21,"column_end":24},"kind":"Impl","from":{"krate":0,"index":2580},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":758934,"byte_end":758937,"line_start":139,"line_end":139,"column_start":6,"column_end":9},"kind":"Impl","from":{"krate":0,"index":2580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":764642,"byte_end":764648,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"kind":"Impl","from":{"krate":0,"index":29742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":767994,"byte_end":767995,"line_start":50,"line_end":50,"column_start":54,"column_end":55},"kind":"Impl","from":{"krate":0,"index":1467},"to":{"krate":0,"index":2644}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768361,"byte_end":768378,"line_start":66,"line_end":66,"column_start":23,"column_end":40},"kind":"Impl","from":{"krate":0,"index":29784},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":768519,"byte_end":768536,"line_start":73,"line_end":73,"column_start":6,"column_end":23},"kind":"Impl","from":{"krate":0,"index":29784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780975,"byte_end":780985,"line_start":132,"line_end":132,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2686},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781254,"byte_end":781264,"line_start":142,"line_end":142,"column_start":22,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2686},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781643,"byte_end":781652,"line_start":155,"line_end":155,"column_start":21,"column_end":30},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":781887,"byte_end":781896,"line_start":164,"line_end":164,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782007,"byte_end":782016,"line_start":167,"line_end":167,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784544,"byte_end":784554,"line_start":232,"line_end":232,"column_start":6,"column_end":16},"kind":"Impl","from":{"krate":0,"index":2686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":799263,"byte_end":799272,"line_start":645,"line_end":645,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":809161,"byte_end":809171,"line_start":929,"line_end":929,"column_start":21,"column_end":31},"kind":"Impl","from":{"krate":0,"index":2686},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":809349,"byte_end":809358,"line_start":936,"line_end":936,"column_start":26,"column_end":35},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":845465,"byte_end":845475,"line_start":1820,"line_end":1820,"column_start":21,"column_end":31},"kind":"Impl","from":{"krate":0,"index":2686},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":845737,"byte_end":845746,"line_start":1828,"line_end":1828,"column_start":24,"column_end":33},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":846015,"byte_end":846024,"line_start":1836,"line_end":1836,"column_start":26,"column_end":35},"kind":"Impl","from":{"krate":0,"index":2694},"to":{"krate":0,"index":7266}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854665,"byte_end":854669,"line_start":225,"line_end":225,"column_start":14,"column_end":18},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855092,"byte_end":855096,"line_start":245,"line_end":245,"column_start":25,"column_end":29},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855182,"byte_end":855186,"line_start":248,"line_end":248,"column_start":19,"column_end":23},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855263,"byte_end":855267,"line_start":251,"line_end":251,"column_start":24,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855433,"byte_end":855437,"line_start":259,"line_end":259,"column_start":29,"column_end":33},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855680,"byte_end":855684,"line_start":268,"line_end":268,"column_start":40,"column_end":44},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2258}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855864,"byte_end":855868,"line_start":276,"line_end":276,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":855967,"byte_end":855971,"line_start":279,"line_end":279,"column_start":42,"column_end":46},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856581,"byte_end":856585,"line_start":307,"line_end":307,"column_start":28,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856771,"byte_end":856775,"line_start":315,"line_end":315,"column_start":21,"column_end":25},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856850,"byte_end":856854,"line_start":321,"line_end":321,"column_start":9,"column_end":13},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":859999,"byte_end":860003,"line_start":457,"line_end":457,"column_start":18,"column_end":22},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":860568,"byte_end":860572,"line_start":478,"line_end":478,"column_start":57,"column_end":61},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861106,"byte_end":861117,"line_start":496,"line_end":496,"column_start":16,"column_end":27},"kind":"Impl","from":{"krate":0,"index":2896},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861304,"byte_end":861315,"line_start":503,"line_end":503,"column_start":18,"column_end":29},"kind":"Impl","from":{"krate":0,"index":2896},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861703,"byte_end":861717,"line_start":516,"line_end":516,"column_start":16,"column_end":30},"kind":"Impl","from":{"krate":0,"index":2906},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":861907,"byte_end":861921,"line_start":523,"line_end":523,"column_start":18,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2906},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":862269,"byte_end":862276,"line_start":535,"line_end":535,"column_start":9,"column_end":16},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":865732,"byte_end":865739,"line_start":652,"line_end":652,"column_start":17,"column_end":24},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":871541,"byte_end":871548,"line_start":859,"line_end":859,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":871642,"byte_end":871649,"line_start":862,"line_end":862,"column_start":27,"column_end":34},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":871728,"byte_end":871735,"line_start":865,"line_end":865,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":871918,"byte_end":871925,"line_start":873,"line_end":873,"column_start":29,"column_end":36},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":872180,"byte_end":872187,"line_start":882,"line_end":882,"column_start":43,"column_end":50},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2258}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":872381,"byte_end":872388,"line_start":890,"line_end":890,"column_start":29,"column_end":36},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2264}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":872490,"byte_end":872497,"line_start":893,"line_end":893,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2312}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":873164,"byte_end":873171,"line_start":921,"line_end":921,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":873367,"byte_end":873374,"line_start":929,"line_end":929,"column_start":21,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":873563,"byte_end":873570,"line_start":936,"line_end":936,"column_start":60,"column_end":67},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":873647,"byte_end":873656,"line_start":942,"line_end":942,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":2988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":873960,"byte_end":873969,"line_start":955,"line_end":955,"column_start":19,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2988},"to":{"krate":0,"index":1950}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":874182,"byte_end":874191,"line_start":964,"line_end":964,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":2988},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":875012,"byte_end":875015,"line_start":989,"line_end":989,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":3002},"to":{"krate":0,"index":1922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":875137,"byte_end":875140,"line_start":998,"line_end":998,"column_start":21,"column_end":24},"kind":"Impl","from":{"krate":0,"index":3002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":876770,"byte_end":876773,"line_start":1047,"line_end":1047,"column_start":74,"column_end":77},"kind":"Impl","from":{"krate":0,"index":3002},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":876894,"byte_end":876897,"line_start":1050,"line_end":1050,"column_start":53,"column_end":56},"kind":"Impl","from":{"krate":0,"index":3002},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":877021,"byte_end":877027,"line_start":1056,"line_end":1056,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":878278,"byte_end":878290,"line_start":1098,"line_end":1098,"column_start":19,"column_end":31},"kind":"Impl","from":{"krate":0,"index":3026},"to":{"krate":0,"index":1950}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":878469,"byte_end":878481,"line_start":1107,"line_end":1107,"column_start":10,"column_end":22},"kind":"Impl","from":{"krate":0,"index":3026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":879127,"byte_end":879133,"line_start":1130,"line_end":1130,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":0,"index":1922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":879314,"byte_end":879320,"line_start":1140,"line_end":1140,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":0,"index":1940}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":879545,"byte_end":879551,"line_start":1148,"line_end":1148,"column_start":77,"column_end":83},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":879672,"byte_end":879678,"line_start":1151,"line_end":1151,"column_start":53,"column_end":59},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":881741,"byte_end":881751,"line_start":1200,"line_end":1200,"column_start":27,"column_end":37},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":881767,"byte_end":881777,"line_start":1202,"line_end":1202,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":882602,"byte_end":882612,"line_start":1239,"line_end":1239,"column_start":17,"column_end":27},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":883316,"byte_end":883326,"line_start":1264,"line_end":1264,"column_start":30,"column_end":40},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":883557,"byte_end":883567,"line_start":1272,"line_end":1272,"column_start":21,"column_end":31},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":883765,"byte_end":883775,"line_start":1279,"line_end":1279,"column_start":63,"column_end":73},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":2122}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":891368,"byte_end":891382,"line_start":219,"line_end":219,"column_start":6,"column_end":20},"kind":"Impl","from":{"krate":0,"index":34116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":892010,"byte_end":892024,"line_start":241,"line_end":241,"column_start":23,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34116},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":893314,"byte_end":893330,"line_start":288,"line_end":288,"column_start":23,"column_end":39},"kind":"Impl","from":{"krate":0,"index":34146},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":902558,"byte_end":902571,"line_start":571,"line_end":571,"column_start":19,"column_end":32},"kind":"Impl","from":{"krate":0,"index":34168},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":904354,"byte_end":904367,"line_start":631,"line_end":631,"column_start":28,"column_end":41},"kind":"Impl","from":{"krate":0,"index":34168},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":904891,"byte_end":904904,"line_start":647,"line_end":647,"column_start":24,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34168},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":904992,"byte_end":905005,"line_start":650,"line_end":650,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":34168},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":905789,"byte_end":905802,"line_start":681,"line_end":681,"column_start":19,"column_end":32},"kind":"Impl","from":{"krate":0,"index":34188},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":907784,"byte_end":907797,"line_start":748,"line_end":748,"column_start":28,"column_end":41},"kind":"Impl","from":{"krate":0,"index":34188},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":908151,"byte_end":908164,"line_start":760,"line_end":760,"column_start":24,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34188},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":908252,"byte_end":908265,"line_start":763,"line_end":763,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":34188},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":908921,"byte_end":908932,"line_start":784,"line_end":784,"column_start":19,"column_end":30},"kind":"Impl","from":{"krate":0,"index":34208},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909176,"byte_end":909187,"line_start":791,"line_end":791,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":34208},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909264,"byte_end":909275,"line_start":794,"line_end":794,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":34208},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":909361,"byte_end":909372,"line_start":797,"line_end":797,"column_start":23,"column_end":34},"kind":"Impl","from":{"krate":0,"index":34208},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":910254,"byte_end":910264,"line_start":824,"line_end":824,"column_start":43,"column_end":53},"kind":"Impl","from":{"krate":0,"index":34218},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":913531,"byte_end":913541,"line_start":908,"line_end":908,"column_start":53,"column_end":63},"kind":"Impl","from":{"krate":0,"index":34218},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080066,"byte_end":1080071,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":2446},"to":{"krate":0,"index":3556}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080074,"byte_end":1080084,"line_start":25,"line_end":25,"column_start":25,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":2312},"to":{"krate":0,"index":3556}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1080087,"byte_end":1080092,"line_start":25,"line_end":25,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":3556}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1086088,"byte_end":1086093,"line_start":213,"line_end":213,"column_start":33,"column_end":38},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1088307,"byte_end":1088312,"line_start":286,"line_end":286,"column_start":44,"column_end":49},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1088626,"byte_end":1088631,"line_start":299,"line_end":299,"column_start":38,"column_end":43},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1088717,"byte_end":1088726,"line_start":302,"line_end":302,"column_start":33,"column_end":42},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1089311,"byte_end":1089320,"line_start":326,"line_end":326,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1089458,"byte_end":1089472,"line_start":329,"line_end":329,"column_start":33,"column_end":47},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1091356,"byte_end":1091370,"line_start":403,"line_end":403,"column_start":44,"column_end":58},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1091946,"byte_end":1091960,"line_start":424,"line_end":424,"column_start":38,"column_end":52},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1092878,"byte_end":1092884,"line_start":29,"line_end":29,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":34476},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1093166,"byte_end":1093172,"line_start":39,"line_end":39,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":34476},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1093348,"byte_end":1093354,"line_start":45,"line_end":45,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":34476},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095052,"byte_end":1095057,"line_start":108,"line_end":108,"column_start":24,"column_end":29},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095226,"byte_end":1095231,"line_start":115,"line_end":115,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095479,"byte_end":1095484,"line_start":128,"line_end":128,"column_start":33,"column_end":38},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095636,"byte_end":1095641,"line_start":135,"line_end":135,"column_start":31,"column_end":36},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095779,"byte_end":1095784,"line_start":142,"line_end":142,"column_start":31,"column_end":36},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1095866,"byte_end":1095871,"line_start":145,"line_end":145,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1096029,"byte_end":1096034,"line_start":150,"line_end":150,"column_start":19,"column_end":24},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1096272,"byte_end":1096277,"line_start":159,"line_end":159,"column_start":21,"column_end":26},"kind":"Impl","from":{"krate":0,"index":3678},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097135,"byte_end":1097139,"line_start":196,"line_end":196,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":34486},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097410,"byte_end":1097414,"line_start":209,"line_end":209,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34486},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097583,"byte_end":1097587,"line_start":216,"line_end":216,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":34486},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097740,"byte_end":1097744,"line_start":223,"line_end":223,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":34486},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1097826,"byte_end":1097830,"line_start":226,"line_end":226,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":34486},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1102509,"byte_end":1102514,"line_start":109,"line_end":109,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":3754}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1106354,"byte_end":1106355,"line_start":252,"line_end":252,"column_start":36,"column_end":37},"kind":"Impl","from":{"krate":0,"index":1921},"to":{"krate":0,"index":3758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1110560,"byte_end":1110568,"line_start":390,"line_end":390,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3414},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1119180,"byte_end":1119188,"line_start":661,"line_end":661,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":3414},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1121981,"byte_end":1121986,"line_start":745,"line_end":745,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":3804}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1122899,"byte_end":1122904,"line_start":764,"line_end":764,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":3808}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1125828,"byte_end":1125839,"line_start":857,"line_end":857,"column_start":15,"column_end":26},"kind":"Impl","from":{"krate":0,"index":3816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1126757,"byte_end":1126768,"line_start":889,"line_end":889,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":3816},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1127204,"byte_end":1127210,"line_start":907,"line_end":907,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":0,"index":3804}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1128100,"byte_end":1128106,"line_start":935,"line_end":935,"column_start":41,"column_end":47},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":0,"index":3808}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1129368,"byte_end":1129376,"line_start":963,"line_end":963,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":3414},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1130326,"byte_end":1130334,"line_start":986,"line_end":986,"column_start":31,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":3414},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927793,"byte_end":927801,"line_start":345,"line_end":345,"column_start":17,"column_end":25},"kind":"Impl","from":{"krate":0,"index":3848},"to":{"krate":0,"index":2106}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":928217,"byte_end":928226,"line_start":363,"line_end":363,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":34912},"to":{"krate":0,"index":2106}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":928642,"byte_end":928651,"line_start":379,"line_end":379,"column_start":12,"column_end":21},"kind":"Impl","from":{"krate":0,"index":34912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":928856,"byte_end":928865,"line_start":389,"line_end":389,"column_start":14,"column_end":23},"kind":"Impl","from":{"krate":0,"index":34912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":929754,"byte_end":929757,"line_start":421,"line_end":421,"column_start":22,"column_end":25},"kind":"Impl","from":{"krate":0,"index":34920},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":930757,"byte_end":930760,"line_start":457,"line_end":457,"column_start":33,"column_end":36},"kind":"Impl","from":{"krate":0,"index":34920},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":931444,"byte_end":931447,"line_start":481,"line_end":481,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":34920},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":931711,"byte_end":931714,"line_start":494,"line_end":494,"column_start":27,"column_end":30},"kind":"Impl","from":{"krate":0,"index":34920},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":931855,"byte_end":931858,"line_start":498,"line_end":498,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":34920},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932454,"byte_end":932460,"line_start":516,"line_end":516,"column_start":33,"column_end":39},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933181,"byte_end":933187,"line_start":543,"line_end":543,"column_start":44,"column_end":50},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933824,"byte_end":933830,"line_start":564,"line_end":564,"column_start":42,"column_end":48},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":934101,"byte_end":934107,"line_start":577,"line_end":577,"column_start":38,"column_end":44},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":934237,"byte_end":934243,"line_start":582,"line_end":582,"column_start":59,"column_end":65},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":934546,"byte_end":934552,"line_start":594,"line_end":594,"column_start":51,"column_end":57},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":934878,"byte_end":934884,"line_start":606,"line_end":606,"column_start":42,"column_end":48},"kind":"Impl","from":{"krate":0,"index":34930},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":935450,"byte_end":935455,"line_start":627,"line_end":627,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":34940},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936101,"byte_end":936106,"line_start":650,"line_end":650,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":34940},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936866,"byte_end":936872,"line_start":673,"line_end":673,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":34950},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939212,"byte_end":939218,"line_start":747,"line_end":747,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34950},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":940496,"byte_end":940501,"line_start":789,"line_end":789,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":34960},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":944504,"byte_end":944509,"line_start":929,"line_end":929,"column_start":36,"column_end":41},"kind":"Impl","from":{"krate":0,"index":34960},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":946345,"byte_end":946350,"line_start":990,"line_end":990,"column_start":30,"column_end":35},"kind":"Impl","from":{"krate":0,"index":34960},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":946518,"byte_end":946523,"line_start":996,"line_end":996,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":34960},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947211,"byte_end":947214,"line_start":1019,"line_end":1019,"column_start":25,"column_end":28},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947576,"byte_end":947579,"line_start":1035,"line_end":1035,"column_start":36,"column_end":39},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948248,"byte_end":948251,"line_start":1059,"line_end":1059,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":4028}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949972,"byte_end":949975,"line_start":1122,"line_end":1122,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":4028}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":952007,"byte_end":952010,"line_start":1196,"line_end":1196,"column_start":34,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":952131,"byte_end":952134,"line_start":1200,"line_end":1200,"column_start":43,"column_end":46},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":952539,"byte_end":952542,"line_start":1214,"line_end":1214,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":952686,"byte_end":952689,"line_start":1218,"line_end":1218,"column_start":34,"column_end":37},"kind":"Impl","from":{"krate":0,"index":34980},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954683,"byte_end":954686,"line_start":1281,"line_end":1281,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954937,"byte_end":954940,"line_start":1290,"line_end":1290,"column_start":38,"column_end":41},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":955758,"byte_end":955761,"line_start":1319,"line_end":1319,"column_start":60,"column_end":63},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":956471,"byte_end":956474,"line_start":1343,"line_end":1343,"column_start":56,"column_end":59},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":956742,"byte_end":956745,"line_start":1356,"line_end":1356,"column_start":48,"column_end":51},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":956879,"byte_end":956882,"line_start":1360,"line_end":1360,"column_start":37,"column_end":40},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957011,"byte_end":957014,"line_start":1365,"line_end":1365,"column_start":46,"column_end":49},"kind":"Impl","from":{"krate":0,"index":34990},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957835,"byte_end":957841,"line_start":1392,"line_end":1392,"column_start":39,"column_end":45},"kind":"Impl","from":{"krate":0,"index":34996},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":958092,"byte_end":958098,"line_start":1401,"line_end":1401,"column_start":35,"column_end":41},"kind":"Impl","from":{"krate":0,"index":34996},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":960254,"byte_end":960260,"line_start":1466,"line_end":1466,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":34996},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961331,"byte_end":961337,"line_start":1505,"line_end":1505,"column_start":45,"column_end":51},"kind":"Impl","from":{"krate":0,"index":34996},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961961,"byte_end":961970,"line_start":1524,"line_end":1524,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":35002},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":962227,"byte_end":962236,"line_start":1533,"line_end":1533,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":35002},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":963476,"byte_end":963485,"line_start":1578,"line_end":1578,"column_start":60,"column_end":69},"kind":"Impl","from":{"krate":0,"index":35002},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":964520,"byte_end":964529,"line_start":1615,"line_end":1615,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":35002},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":965144,"byte_end":965153,"line_start":1634,"line_end":1634,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":967159,"byte_end":967168,"line_start":1705,"line_end":1705,"column_start":33,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":968604,"byte_end":968613,"line_start":1746,"line_end":1746,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":968831,"byte_end":968840,"line_start":1757,"line_end":1757,"column_start":40,"column_end":49},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":969167,"byte_end":969176,"line_start":1770,"line_end":1770,"column_start":27,"column_end":36},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":969291,"byte_end":969300,"line_start":1773,"line_end":1773,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35008},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":970242,"byte_end":970250,"line_start":1800,"line_end":1800,"column_start":32,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35018},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":972666,"byte_end":972674,"line_start":1887,"line_end":1887,"column_start":50,"column_end":58},"kind":"Impl","from":{"krate":0,"index":35018},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":972771,"byte_end":972779,"line_start":1890,"line_end":1890,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":35018},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":972805,"byte_end":972813,"line_start":1892,"line_end":1892,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":975044,"byte_end":975053,"line_start":1961,"line_end":1961,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":35028},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":975346,"byte_end":975355,"line_start":1971,"line_end":1971,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35028},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":976775,"byte_end":976784,"line_start":2024,"line_end":2024,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35028},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":977445,"byte_end":977454,"line_start":2044,"line_end":2044,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":35034},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":977747,"byte_end":977756,"line_start":2054,"line_end":2054,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35034},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":979094,"byte_end":979103,"line_start":2103,"line_end":2103,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35034},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":979683,"byte_end":979687,"line_start":2122,"line_end":2122,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35040},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":981957,"byte_end":981961,"line_start":2212,"line_end":2212,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35040},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":982095,"byte_end":982099,"line_start":2215,"line_end":2215,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35040},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":982909,"byte_end":982913,"line_start":2242,"line_end":2242,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35040},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":983478,"byte_end":983482,"line_start":2260,"line_end":2260,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35050},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":984989,"byte_end":984993,"line_start":2320,"line_end":2320,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35050},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":985102,"byte_end":985106,"line_start":2323,"line_end":2323,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35050},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":985718,"byte_end":985722,"line_start":2342,"line_end":2342,"column_start":55,"column_end":59},"kind":"Impl","from":{"krate":0,"index":35060},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":986013,"byte_end":986017,"line_start":2352,"line_end":2352,"column_start":32,"column_end":36},"kind":"Impl","from":{"krate":0,"index":35060},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":987632,"byte_end":987639,"line_start":2403,"line_end":2403,"column_start":56,"column_end":63},"kind":"Impl","from":{"krate":0,"index":35066},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":988041,"byte_end":988048,"line_start":2416,"line_end":2416,"column_start":52,"column_end":59},"kind":"Impl","from":{"krate":0,"index":35066},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":990382,"byte_end":990389,"line_start":2488,"line_end":2488,"column_start":60,"column_end":67},"kind":"Impl","from":{"krate":0,"index":35066},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":992286,"byte_end":992293,"line_start":2549,"line_end":2549,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35066},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":992939,"byte_end":992943,"line_start":2569,"line_end":2569,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":993036,"byte_end":993040,"line_start":2572,"line_end":2572,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":994815,"byte_end":994819,"line_start":2650,"line_end":2650,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":995789,"byte_end":995793,"line_start":2687,"line_end":2687,"column_start":40,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":996089,"byte_end":996093,"line_start":2700,"line_end":2700,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":997083,"byte_end":997087,"line_start":2742,"line_end":2742,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":997723,"byte_end":997727,"line_start":2767,"line_end":2767,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35072},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998476,"byte_end":998483,"line_start":2794,"line_end":2794,"column_start":39,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998676,"byte_end":998683,"line_start":2802,"line_end":2802,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":998975,"byte_end":998982,"line_start":2814,"line_end":2814,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":999914,"byte_end":999921,"line_start":2846,"line_end":2846,"column_start":57,"column_end":64},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1000739,"byte_end":1000746,"line_start":2873,"line_end":2873,"column_start":53,"column_end":60},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1001007,"byte_end":1001014,"line_start":2886,"line_end":2886,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":35082},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1136419,"byte_end":1136425,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1155003,"byte_end":1155009,"line_start":806,"line_end":806,"column_start":20,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1155484,"byte_end":1155490,"line_start":825,"line_end":825,"column_start":20,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1156044,"byte_end":1156050,"line_start":845,"line_end":845,"column_start":18,"column_end":24},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1157391,"byte_end":1157397,"line_start":884,"line_end":884,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1158650,"byte_end":1158656,"line_start":926,"line_end":926,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1158855,"byte_end":1158861,"line_start":935,"line_end":935,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":0,"index":3758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1159930,"byte_end":1159936,"line_start":979,"line_end":979,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":0,"index":2484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1160269,"byte_end":1160273,"line_start":994,"line_end":994,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":35130},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1160595,"byte_end":1160599,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35130},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1160725,"byte_end":1160729,"line_start":1018,"line_end":1018,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35130},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1160762,"byte_end":1160766,"line_start":1019,"line_end":1019,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35130},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1160803,"byte_end":1160807,"line_start":1020,"line_end":1020,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35130},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161361,"byte_end":1161365,"line_start":1036,"line_end":1036,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161651,"byte_end":1161655,"line_start":1046,"line_end":1046,"column_start":37,"column_end":41},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161834,"byte_end":1161838,"line_start":1052,"line_end":1052,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1161928,"byte_end":1161932,"line_start":1055,"line_end":1055,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1162032,"byte_end":1162036,"line_start":1058,"line_end":1058,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1162116,"byte_end":1162120,"line_start":1061,"line_end":1061,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35140},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1162792,"byte_end":1162799,"line_start":1081,"line_end":1081,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35146},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163093,"byte_end":1163100,"line_start":1091,"line_end":1091,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35146},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163283,"byte_end":1163290,"line_start":1097,"line_end":1097,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35146},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163380,"byte_end":1163387,"line_start":1100,"line_end":1100,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":35146},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1163486,"byte_end":1163493,"line_start":1102,"line_end":1102,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35146},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164055,"byte_end":1164063,"line_start":1118,"line_end":1118,"column_start":22,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35152},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164333,"byte_end":1164341,"line_start":1128,"line_end":1128,"column_start":33,"column_end":41},"kind":"Impl","from":{"krate":0,"index":35152},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164508,"byte_end":1164516,"line_start":1134,"line_end":1134,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35152},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164598,"byte_end":1164606,"line_start":1137,"line_end":1137,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35152},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164698,"byte_end":1164706,"line_start":1140,"line_end":1140,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35152},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1164989,"byte_end":1164995,"line_start":1147,"line_end":1147,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":0,"index":3754}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1166092,"byte_end":1166099,"line_start":1178,"line_end":1178,"column_start":62,"column_end":69},"kind":"Impl","from":{"krate":0,"index":4646},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1167361,"byte_end":1167367,"line_start":1214,"line_end":1214,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":35088},"to":{"krate":0,"index":2106}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1179874,"byte_end":1179880,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1194321,"byte_end":1194327,"line_start":753,"line_end":753,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1196028,"byte_end":1196034,"line_start":814,"line_end":814,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1197721,"byte_end":1197727,"line_start":874,"line_end":874,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1199032,"byte_end":1199038,"line_start":912,"line_end":912,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1200330,"byte_end":1200336,"line_start":953,"line_end":953,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":0,"index":3758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202217,"byte_end":1202221,"line_start":1020,"line_end":1020,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202563,"byte_end":1202567,"line_start":1033,"line_end":1033,"column_start":37,"column_end":41},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202741,"byte_end":1202745,"line_start":1039,"line_end":1039,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202835,"byte_end":1202839,"line_start":1042,"line_end":1042,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1202939,"byte_end":1202943,"line_start":1045,"line_end":1045,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1203023,"byte_end":1203027,"line_start":1048,"line_end":1048,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":35244},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1203557,"byte_end":1203564,"line_start":1064,"line_end":1064,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35250},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1203914,"byte_end":1203921,"line_start":1077,"line_end":1077,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35250},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204099,"byte_end":1204106,"line_start":1083,"line_end":1083,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35250},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204196,"byte_end":1204203,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":35250},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204303,"byte_end":1204310,"line_start":1089,"line_end":1089,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35250},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1204981,"byte_end":1204989,"line_start":1107,"line_end":1107,"column_start":22,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35256},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1205315,"byte_end":1205323,"line_start":1120,"line_end":1120,"column_start":33,"column_end":41},"kind":"Impl","from":{"krate":0,"index":35256},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1205485,"byte_end":1205493,"line_start":1126,"line_end":1126,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35256},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1205575,"byte_end":1205583,"line_start":1129,"line_end":1129,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35256},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1205675,"byte_end":1205683,"line_start":1132,"line_end":1132,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35256},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1205972,"byte_end":1205978,"line_start":1139,"line_end":1139,"column_start":63,"column_end":69},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":0,"index":3754}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1206935,"byte_end":1206942,"line_start":1164,"line_end":1164,"column_start":68,"column_end":75},"kind":"Impl","from":{"krate":0,"index":4824},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1207834,"byte_end":1207840,"line_start":1196,"line_end":1196,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35202},"to":{"krate":0,"index":2106}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1304324,"byte_end":1304332,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":4938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1307764,"byte_end":1307774,"line_start":29,"line_end":29,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":4958},"to":{"krate":0,"index":1950}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1234897,"byte_end":1234902,"line_start":876,"line_end":876,"column_start":35,"column_end":40},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1236598,"byte_end":1236605,"line_start":937,"line_end":937,"column_start":34,"column_end":41},"kind":"Impl","from":{"krate":0,"index":29184},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1237427,"byte_end":1237436,"line_start":972,"line_end":972,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1238330,"byte_end":1238339,"line_start":1007,"line_end":1007,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":29124},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1239052,"byte_end":1239066,"line_start":1043,"line_end":1043,"column_start":34,"column_end":48},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1240339,"byte_end":1240355,"line_start":1084,"line_end":1084,"column_start":34,"column_end":50},"kind":"Impl","from":{"krate":0,"index":29226},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250487,"byte_end":1250491,"line_start":1391,"line_end":1391,"column_start":45,"column_end":49},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250738,"byte_end":1250742,"line_start":1400,"line_end":1400,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250833,"byte_end":1250837,"line_start":1402,"line_end":1402,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1250861,"byte_end":1250865,"line_start":1404,"line_end":1404,"column_start":13,"column_end":17},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1252395,"byte_end":1252399,"line_start":1452,"line_end":1452,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1252558,"byte_end":1252562,"line_start":1459,"line_end":1459,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1252662,"byte_end":1252666,"line_start":1462,"line_end":1462,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1252746,"byte_end":1252750,"line_start":1465,"line_end":1465,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1252949,"byte_end":1252953,"line_start":1470,"line_end":1470,"column_start":28,"column_end":32},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":2472}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1253910,"byte_end":1253917,"line_start":1508,"line_end":1508,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1254183,"byte_end":1254190,"line_start":1517,"line_end":1517,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":1712}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1254281,"byte_end":1254288,"line_start":1519,"line_end":1519,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":1700}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1254312,"byte_end":1254319,"line_start":1521,"line_end":1521,"column_start":13,"column_end":20},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1256353,"byte_end":1256360,"line_start":1580,"line_end":1580,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1256519,"byte_end":1256526,"line_start":1587,"line_end":1587,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1256626,"byte_end":1256633,"line_start":1590,"line_end":1590,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1257059,"byte_end":1257063,"line_start":1604,"line_end":1604,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":5448}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1257966,"byte_end":1257985,"line_start":1640,"line_end":1640,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":3778},"to":{"krate":0,"index":5464}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1258670,"byte_end":1258675,"line_start":1661,"line_end":1661,"column_start":48,"column_end":53},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1259043,"byte_end":1259048,"line_start":1672,"line_end":1672,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1259343,"byte_end":1259348,"line_start":1683,"line_end":1683,"column_start":29,"column_end":34},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1260059,"byte_end":1260064,"line_start":1711,"line_end":1711,"column_start":40,"column_end":45},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1260507,"byte_end":1260512,"line_start":1727,"line_end":1727,"column_start":30,"column_end":35},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":5464}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1260780,"byte_end":1260785,"line_start":1735,"line_end":1735,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5468},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1261385,"byte_end":1261393,"line_start":1752,"line_end":1752,"column_start":48,"column_end":56},"kind":"Impl","from":{"krate":0,"index":5496},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1261667,"byte_end":1261675,"line_start":1761,"line_end":1761,"column_start":30,"column_end":38},"kind":"Impl","from":{"krate":0,"index":5496},"to":{"krate":0,"index":5464}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1262020,"byte_end":1262028,"line_start":1774,"line_end":1774,"column_start":29,"column_end":37},"kind":"Impl","from":{"krate":0,"index":5496},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1263096,"byte_end":1263104,"line_start":1809,"line_end":1809,"column_start":40,"column_end":48},"kind":"Impl","from":{"krate":0,"index":5496},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1263809,"byte_end":1263817,"line_start":1833,"line_end":1833,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":5496},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1264491,"byte_end":1264497,"line_start":1849,"line_end":1849,"column_start":48,"column_end":54},"kind":"Impl","from":{"krate":0,"index":35326},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1264835,"byte_end":1264841,"line_start":1859,"line_end":1859,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35326},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1265203,"byte_end":1265209,"line_start":1874,"line_end":1874,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35326},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1265431,"byte_end":1265437,"line_start":1882,"line_end":1882,"column_start":30,"column_end":36},"kind":"Impl","from":{"krate":0,"index":35326},"to":{"krate":0,"index":5464}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1265712,"byte_end":1265718,"line_start":1891,"line_end":1891,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35326},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1266344,"byte_end":1266353,"line_start":1906,"line_end":1906,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":5542},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1266695,"byte_end":1266704,"line_start":1916,"line_end":1916,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":5542},"to":{"krate":0,"index":5464}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1266928,"byte_end":1266937,"line_start":1924,"line_end":1924,"column_start":29,"column_end":38},"kind":"Impl","from":{"krate":0,"index":5542},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1267307,"byte_end":1267316,"line_start":1939,"line_end":1939,"column_start":40,"column_end":49},"kind":"Impl","from":{"krate":0,"index":5542},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1267601,"byte_end":1267610,"line_start":1950,"line_end":1950,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":5542},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1267917,"byte_end":1267930,"line_start":1961,"line_end":1961,"column_start":44,"column_end":57},"kind":"Impl","from":{"krate":0,"index":35332},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1268947,"byte_end":1268953,"line_start":1993,"line_end":1993,"column_start":48,"column_end":54},"kind":"Impl","from":{"krate":0,"index":5574},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1269763,"byte_end":1269770,"line_start":2015,"line_end":2015,"column_start":48,"column_end":55},"kind":"Impl","from":{"krate":0,"index":5580},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1270554,"byte_end":1270563,"line_start":2036,"line_end":2036,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":5586},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1271394,"byte_end":1271404,"line_start":2058,"line_end":2058,"column_start":48,"column_end":58},"kind":"Impl","from":{"krate":0,"index":5592},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1273009,"byte_end":1273016,"line_start":2111,"line_end":2111,"column_start":23,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1273226,"byte_end":1273233,"line_start":2121,"line_end":2121,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1274497,"byte_end":1274504,"line_start":2175,"line_end":2175,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1274875,"byte_end":1274882,"line_start":2189,"line_end":2189,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1274972,"byte_end":1274979,"line_start":2192,"line_end":2192,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1275049,"byte_end":1275056,"line_start":2195,"line_end":2195,"column_start":44,"column_end":51},"kind":"Impl","from":{"krate":0,"index":35378},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1275914,"byte_end":1275920,"line_start":2221,"line_end":2221,"column_start":23,"column_end":29},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1276140,"byte_end":1276146,"line_start":2231,"line_end":2231,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1277777,"byte_end":1277783,"line_start":2292,"line_end":2292,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1278282,"byte_end":1278288,"line_start":2308,"line_end":2308,"column_start":35,"column_end":41},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1278378,"byte_end":1278384,"line_start":2311,"line_end":2311,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1278454,"byte_end":1278460,"line_start":2314,"line_end":2314,"column_start":44,"column_end":50},"kind":"Impl","from":{"krate":0,"index":35384},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1279492,"byte_end":1279501,"line_start":2342,"line_end":2342,"column_start":26,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35390},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1281317,"byte_end":1281326,"line_start":2406,"line_end":2406,"column_start":37,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35390},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1281914,"byte_end":1281923,"line_start":2424,"line_end":2424,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35390},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1282013,"byte_end":1282022,"line_start":2427,"line_end":2427,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35390},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1282092,"byte_end":1282101,"line_start":2430,"line_end":2430,"column_start":44,"column_end":53},"kind":"Impl","from":{"krate":0,"index":35390},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1283220,"byte_end":1283231,"line_start":2461,"line_end":2461,"column_start":23,"column_end":34},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1283470,"byte_end":1283481,"line_start":2471,"line_end":2471,"column_start":26,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1284541,"byte_end":1284552,"line_start":2516,"line_end":2516,"column_start":37,"column_end":48},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1284937,"byte_end":1284948,"line_start":2530,"line_end":2530,"column_start":35,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1285104,"byte_end":1285115,"line_start":2537,"line_end":2537,"column_start":31,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1285185,"byte_end":1285196,"line_start":2540,"line_end":2540,"column_start":44,"column_end":55},"kind":"Impl","from":{"krate":0,"index":35396},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1286114,"byte_end":1286128,"line_start":2564,"line_end":2564,"column_start":26,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35402},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1287323,"byte_end":1287337,"line_start":2611,"line_end":2611,"column_start":37,"column_end":51},"kind":"Impl","from":{"krate":0,"index":35402},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1287821,"byte_end":1287835,"line_start":2627,"line_end":2627,"column_start":35,"column_end":49},"kind":"Impl","from":{"krate":0,"index":35402},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1287991,"byte_end":1288005,"line_start":2634,"line_end":2634,"column_start":31,"column_end":45},"kind":"Impl","from":{"krate":0,"index":35402},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1288075,"byte_end":1288089,"line_start":2637,"line_end":2637,"column_start":44,"column_end":58},"kind":"Impl","from":{"krate":0,"index":35402},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1295964,"byte_end":1295968,"line_start":2919,"line_end":2919,"column_start":44,"column_end":48},"kind":"Impl","from":{"krate":0,"index":5390},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1296191,"byte_end":1296198,"line_start":2927,"line_end":2927,"column_start":44,"column_end":51},"kind":"Impl","from":{"krate":0,"index":5422},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1296392,"byte_end":1296397,"line_start":2934,"line_end":2934,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":5838}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1296479,"byte_end":1296480,"line_start":2938,"line_end":2938,"column_start":27,"column_end":28},"kind":"Impl","from":{"krate":0,"index":3745},"to":{"krate":0,"index":5838}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1415022,"byte_end":1415027,"line_start":38,"line_end":38,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":5900}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1420163,"byte_end":1420171,"line_start":177,"line_end":177,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":5912},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1422757,"byte_end":1422772,"line_start":244,"line_end":244,"column_start":36,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":5922},"to":{"krate":0,"index":5930}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1424248,"byte_end":1424260,"line_start":279,"line_end":279,"column_start":34,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35454},"to":{"krate":0,"index":5912}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1427566,"byte_end":1427578,"line_start":353,"line_end":353,"column_start":41,"column_end":53},"kind":"Impl","from":{"krate":0,"index":35454},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1431286,"byte_end":1431298,"line_start":429,"line_end":429,"column_start":38,"column_end":50},"kind":"Impl","from":{"krate":0,"index":35454},"to":{"krate":0,"index":5930}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1432881,"byte_end":1432882,"line_start":489,"line_end":489,"column_start":25,"column_end":26},"kind":"Impl","from":{"krate":0,"index":3769},"to":{"krate":0,"index":5960}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1433381,"byte_end":1433399,"line_start":510,"line_end":510,"column_start":42,"column_end":60},"kind":"Impl","from":{"krate":0,"index":5972},"to":{"krate":0,"index":5900}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1433746,"byte_end":1433765,"line_start":523,"line_end":523,"column_start":50,"column_end":69},"kind":"Impl","from":{"krate":0,"index":35464},"to":{"krate":0,"index":5912}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1434512,"byte_end":1434531,"line_start":548,"line_end":548,"column_start":57,"column_end":76},"kind":"Impl","from":{"krate":0,"index":35464},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1435206,"byte_end":1435225,"line_start":568,"line_end":568,"column_start":54,"column_end":73},"kind":"Impl","from":{"krate":0,"index":35464},"to":{"krate":0,"index":5930}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1437387,"byte_end":1437404,"line_start":645,"line_end":645,"column_start":38,"column_end":55},"kind":"Impl","from":{"krate":0,"index":35474},"to":{"krate":0,"index":5912}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1437494,"byte_end":1437511,"line_start":649,"line_end":649,"column_start":45,"column_end":62},"kind":"Impl","from":{"krate":0,"index":35474},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1437598,"byte_end":1437615,"line_start":653,"line_end":653,"column_start":42,"column_end":59},"kind":"Impl","from":{"krate":0,"index":35474},"to":{"krate":0,"index":5930}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1438249,"byte_end":1438270,"line_start":669,"line_end":669,"column_start":28,"column_end":49},"kind":"Impl","from":{"krate":0,"index":35508},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1438592,"byte_end":1438613,"line_start":679,"line_end":679,"column_start":37,"column_end":58},"kind":"Impl","from":{"krate":0,"index":35508},"to":{"krate":0,"index":5912}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1438734,"byte_end":1438755,"line_start":685,"line_end":685,"column_start":44,"column_end":65},"kind":"Impl","from":{"krate":0,"index":35508},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1438873,"byte_end":1438894,"line_start":691,"line_end":691,"column_start":41,"column_end":62},"kind":"Impl","from":{"krate":0,"index":35508},"to":{"krate":0,"index":5930}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1439021,"byte_end":1439022,"line_start":695,"line_end":695,"column_start":29,"column_end":30},"kind":"Impl","from":{"krate":0,"index":3831},"to":{"krate":0,"index":5900}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1441180,"byte_end":1441191,"line_start":768,"line_end":768,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":35548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1441938,"byte_end":1441949,"line_start":793,"line_end":793,"column_start":38,"column_end":49},"kind":"Impl","from":{"krate":0,"index":35548},"to":{"krate":0,"index":5912}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1445429,"byte_end":1445440,"line_start":874,"line_end":874,"column_start":45,"column_end":56},"kind":"Impl","from":{"krate":0,"index":35548},"to":{"krate":0,"index":5922}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1452347,"byte_end":1452361,"line_start":1039,"line_end":1039,"column_start":6,"column_end":20},"kind":"Impl","from":{"krate":0,"index":35578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466473,"byte_end":1466482,"line_start":1390,"line_end":1390,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":6072},"to":{"krate":0,"index":6062}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1466826,"byte_end":1466840,"line_start":1404,"line_end":1404,"column_start":25,"column_end":39},"kind":"Impl","from":{"krate":0,"index":6084},"to":{"krate":0,"index":6062}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334407,"byte_end":1334412,"line_start":72,"line_end":72,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1706},"to":{"krate":0,"index":6096}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336807,"byte_end":1336821,"line_start":148,"line_end":148,"column_start":23,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35588},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337556,"byte_end":1337565,"line_start":175,"line_end":175,"column_start":6,"column_end":15},"kind":"Impl","from":{"krate":0,"index":35608},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1345792,"byte_end":1345801,"line_start":438,"line_end":438,"column_start":23,"column_end":32},"kind":"Impl","from":{"krate":0,"index":35608},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1349579,"byte_end":1349584,"line_start":559,"line_end":559,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":35630},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1350792,"byte_end":1350797,"line_start":600,"line_end":600,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35630},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1351169,"byte_end":1351174,"line_start":613,"line_end":613,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35630},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1351192,"byte_end":1351197,"line_start":615,"line_end":615,"column_start":10,"column_end":15},"kind":"Impl","from":{"krate":0,"index":35630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1352453,"byte_end":1352464,"line_start":657,"line_end":657,"column_start":23,"column_end":34},"kind":"Impl","from":{"krate":0,"index":35640},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1353316,"byte_end":1353327,"line_start":692,"line_end":692,"column_start":34,"column_end":45},"kind":"Impl","from":{"krate":0,"index":35640},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1353705,"byte_end":1353716,"line_start":706,"line_end":706,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35640},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1353734,"byte_end":1353745,"line_start":708,"line_end":708,"column_start":10,"column_end":21},"kind":"Impl","from":{"krate":0,"index":35640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1354550,"byte_end":1354555,"line_start":732,"line_end":732,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1355840,"byte_end":1355845,"line_start":793,"line_end":793,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1356189,"byte_end":1356194,"line_start":808,"line_end":808,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":3792}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1356429,"byte_end":1356434,"line_start":821,"line_end":821,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1356528,"byte_end":1356533,"line_start":824,"line_end":824,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":3844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1356597,"byte_end":1356602,"line_start":827,"line_end":827,"column_start":41,"column_end":46},"kind":"Impl","from":{"krate":0,"index":35650},"to":{"krate":0,"index":7576}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1363822,"byte_end":1363835,"line_start":1036,"line_end":1036,"column_start":41,"column_end":54},"kind":"Impl","from":{"krate":0,"index":6238},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1364271,"byte_end":1364284,"line_start":1048,"line_end":1048,"column_start":26,"column_end":39},"kind":"Impl","from":{"krate":0,"index":6238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1367352,"byte_end":1367366,"line_start":1153,"line_end":1153,"column_start":41,"column_end":55},"kind":"Impl","from":{"krate":0,"index":6252},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1367642,"byte_end":1367656,"line_start":1162,"line_end":1162,"column_start":26,"column_end":40},"kind":"Impl","from":{"krate":0,"index":6252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1368926,"byte_end":1368946,"line_start":1209,"line_end":1209,"column_start":41,"column_end":61},"kind":"Impl","from":{"krate":0,"index":6264},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1369175,"byte_end":1369195,"line_start":1217,"line_end":1217,"column_start":26,"column_end":46},"kind":"Impl","from":{"krate":0,"index":6264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1370473,"byte_end":1370488,"line_start":1260,"line_end":1260,"column_start":41,"column_end":56},"kind":"Impl","from":{"krate":0,"index":6276},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1370712,"byte_end":1370727,"line_start":1268,"line_end":1268,"column_start":26,"column_end":41},"kind":"Impl","from":{"krate":0,"index":6276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372279,"byte_end":1372284,"line_start":1318,"line_end":1318,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":35888},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372585,"byte_end":1372590,"line_start":1333,"line_end":1333,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":35888},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1372771,"byte_end":1372776,"line_start":1341,"line_end":1341,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35888},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373204,"byte_end":1373215,"line_start":1356,"line_end":1356,"column_start":29,"column_end":40},"kind":"Impl","from":{"krate":0,"index":35908},"to":{"krate":0,"index":1956}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373468,"byte_end":1373479,"line_start":1365,"line_end":1365,"column_start":32,"column_end":43},"kind":"Impl","from":{"krate":0,"index":35908},"to":{"krate":0,"index":1960}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373651,"byte_end":1373662,"line_start":1372,"line_end":1372,"column_start":33,"column_end":44},"kind":"Impl","from":{"krate":0,"index":35908},"to":{"krate":0,"index":1964}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1373914,"byte_end":1373922,"line_start":1383,"line_end":1383,"column_start":23,"column_end":31},"kind":"Impl","from":{"krate":0,"index":35898},"to":{"krate":0,"index":3414}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1374244,"byte_end":1374252,"line_start":1399,"line_end":1399,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":35898},"to":{"krate":0,"index":3778}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1374454,"byte_end":1374462,"line_start":1408,"line_end":1408,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":35898},"to":{"krate":0,"index":3840}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1388731,"byte_end":1388740,"line_start":1826,"line_end":1826,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":29124},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1389572,"byte_end":1389577,"line_start":1855,"line_end":1855,"column_start":35,"column_end":40},"kind":"Impl","from":{"krate":0,"index":29144},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1391791,"byte_end":1391798,"line_start":1909,"line_end":1909,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":29184},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1393492,"byte_end":1393501,"line_start":1954,"line_end":1954,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":29164},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1395452,"byte_end":1395466,"line_start":2003,"line_end":2003,"column_start":35,"column_end":49},"kind":"Impl","from":{"krate":0,"index":29206},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1397028,"byte_end":1397044,"line_start":2048,"line_end":2048,"column_start":35,"column_end":51},"kind":"Impl","from":{"krate":0,"index":29226},"to":{"krate":0,"index":5230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1492382,"byte_end":1492391,"line_start":143,"line_end":143,"column_start":6,"column_end":15},"kind":"Impl","from":{"krate":0,"index":35942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1493137,"byte_end":1493148,"line_start":163,"line_end":163,"column_start":6,"column_end":17},"kind":"Impl","from":{"krate":0,"index":35914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1493948,"byte_end":1493959,"line_start":185,"line_end":185,"column_start":6,"column_end":17},"kind":"Impl","from":{"krate":0,"index":35928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1494767,"byte_end":1494773,"line_start":207,"line_end":207,"column_start":14,"column_end":20},"kind":"Impl","from":{"krate":0,"index":35956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1496863,"byte_end":1496872,"line_start":271,"line_end":271,"column_start":24,"column_end":33},"kind":"Impl","from":{"krate":0,"index":35942},"to":{"krate":0,"index":6824}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1497114,"byte_end":1497125,"line_start":284,"line_end":284,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35914},"to":{"krate":0,"index":6824}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1497377,"byte_end":1497388,"line_start":297,"line_end":297,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":35928},"to":{"krate":0,"index":6824}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1497594,"byte_end":1497600,"line_start":309,"line_end":309,"column_start":32,"column_end":38},"kind":"Impl","from":{"krate":0,"index":35956},"to":{"krate":0,"index":6824}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1499484,"byte_end":1499490,"line_start":382,"line_end":382,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":35956},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1499815,"byte_end":1499821,"line_start":397,"line_end":397,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":35956},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1500145,"byte_end":1500156,"line_start":414,"line_end":414,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":35974},"to":{"krate":0,"index":6800}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1500448,"byte_end":1500459,"line_start":431,"line_end":431,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":35988},"to":{"krate":0,"index":6800}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1482074,"byte_end":1482092,"line_start":515,"line_end":515,"column_start":24,"column_end":42},"kind":"Impl","from":{"krate":0,"index":6890},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1482297,"byte_end":1482315,"line_start":522,"line_end":522,"column_start":43,"column_end":61},"kind":"Impl","from":{"krate":0,"index":6890},"to":{"krate":0,"index":6884}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1482478,"byte_end":1482496,"line_start":531,"line_end":531,"column_start":19,"column_end":37},"kind":"Impl","from":{"krate":0,"index":6890},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1482679,"byte_end":1482697,"line_start":538,"line_end":538,"column_start":21,"column_end":39},"kind":"Impl","from":{"krate":0,"index":6890},"to":{"krate":0,"index":2458}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564276,"byte_end":1564285,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":2258},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564288,"byte_end":1564298,"line_start":24,"line_end":24,"column_start":24,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":2312},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564301,"byte_end":1564304,"line_start":24,"line_end":24,"column_start":37,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":1770},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564320,"byte_end":1564323,"line_start":24,"line_end":24,"column_start":56,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564350,"byte_end":1564353,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":1754},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1564369,"byte_end":1564373,"line_start":25,"line_end":25,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1710},"to":{"krate":0,"index":7038}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1573574,"byte_end":1573584,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"kind":"Impl","from":{"krate":0,"index":7082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1573946,"byte_end":1573956,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":"Impl","from":{"krate":0,"index":7082},"to":{"krate":0,"index":7182}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1575945,"byte_end":1575956,"line_start":107,"line_end":107,"column_start":18,"column_end":29},"kind":"Impl","from":{"krate":0,"index":7092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1578730,"byte_end":1578740,"line_start":204,"line_end":204,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":7104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1580405,"byte_end":1580415,"line_start":260,"line_end":260,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":7116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1582518,"byte_end":1582526,"line_start":340,"line_end":340,"column_start":18,"column_end":26},"kind":"Impl","from":{"krate":0,"index":7126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1584545,"byte_end":1584554,"line_start":411,"line_end":411,"column_start":18,"column_end":27},"kind":"Impl","from":{"krate":0,"index":7138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1586651,"byte_end":1586659,"line_start":482,"line_end":482,"column_start":18,"column_end":26},"kind":"Impl","from":{"krate":0,"index":7150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1507353,"byte_end":1507360,"line_start":210,"line_end":210,"column_start":39,"column_end":46},"kind":"Impl","from":{"krate":0,"index":7190},"to":{"krate":0,"index":7182}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1510081,"byte_end":1510091,"line_start":293,"line_end":293,"column_start":20,"column_end":30},"kind":"Impl","from":{"krate":0,"index":36818},"to":{"krate":0,"index":2446}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1510170,"byte_end":1510180,"line_start":299,"line_end":299,"column_start":10,"column_end":20},"kind":"Impl","from":{"krate":0,"index":36818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1511322,"byte_end":1511331,"line_start":338,"line_end":338,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":36830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1514907,"byte_end":1514916,"line_start":427,"line_end":427,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":36830},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1515082,"byte_end":1515091,"line_start":434,"line_end":434,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":36830},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1530878,"byte_end":1530887,"line_start":1039,"line_end":1039,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":7208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1549176,"byte_end":1549185,"line_start":1533,"line_end":1533,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":7208},"to":{"krate":0,"index":7182}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1549525,"byte_end":1549530,"line_start":1548,"line_end":1548,"column_start":18,"column_end":23},"kind":"Impl","from":{"krate":0,"index":36782},"to":{"krate":0,"index":7246}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1555390,"byte_end":1555401,"line_start":1758,"line_end":1758,"column_start":27,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1720},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1555572,"byte_end":1555576,"line_start":1765,"line_end":1765,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":2828},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1555814,"byte_end":1555821,"line_start":1774,"line_end":1774,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2894},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1556303,"byte_end":1556322,"line_start":1787,"line_end":1787,"column_start":32,"column_end":51},"kind":"Impl","from":{"krate":0,"index":7430},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1556728,"byte_end":1556731,"line_start":1802,"line_end":1802,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":0,"index":3002},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1556914,"byte_end":1556920,"line_start":1809,"line_end":1809,"column_start":39,"column_end":45},"kind":"Impl","from":{"krate":0,"index":3036},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1557118,"byte_end":1557128,"line_start":1816,"line_end":1816,"column_start":35,"column_end":45},"kind":"Impl","from":{"krate":0,"index":3054},"to":{"krate":0,"index":7242}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1592416,"byte_end":1592424,"line_start":68,"line_end":68,"column_start":6,"column_end":14},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1603833,"byte_end":1603841,"line_start":412,"line_end":412,"column_start":14,"column_end":22},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1746}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1604084,"byte_end":1604092,"line_start":421,"line_end":421,"column_start":20,"column_end":28},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1802}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1604241,"byte_end":1604249,"line_start":428,"line_end":428,"column_start":14,"column_end":22},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1754}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1604497,"byte_end":1604505,"line_start":437,"line_end":437,"column_start":20,"column_end":28},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1808}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1604659,"byte_end":1604667,"line_start":444,"line_end":444,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1762}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1604924,"byte_end":1604932,"line_start":453,"line_end":453,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1814}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1605081,"byte_end":1605089,"line_start":460,"line_end":460,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1770}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1605355,"byte_end":1605363,"line_start":469,"line_end":469,"column_start":25,"column_end":33},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":1820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1605512,"byte_end":1605520,"line_start":476,"line_end":476,"column_start":14,"column_end":22},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":3804}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1605732,"byte_end":1605740,"line_start":483,"line_end":483,"column_start":32,"column_end":40},"kind":"Impl","from":{"krate":0,"index":36950},"to":{"krate":0,"index":3804}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1623090,"byte_end":1623107,"line_start":23,"line_end":23,"column_start":40,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":3792},"to":{"krate":0,"index":7576}}]}